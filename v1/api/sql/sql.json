{"FUNCTION":{"api.getDefinitionTable":{"code":"\r\nIF OBJECT_ID('api.getDefinitionTable') IS NOT NULL DROP FUNCTION api.getDefinitionTable;\r\nGO\r\nCREATE FUNCTION [api].[getDefinitionTable](@object_id INT) RETURNS VARCHAR(MAX)   \r\nAS   \r\nBEGIN   \r\nDECLARE @SQL                                NVARCHAR(MAX) = N''   \r\nDECLARE @GenerateFKs                        bit = 1;   \r\nDECLARE @UseSourceCollation                 bit = 1;   \r\nDECLARE @GenerateIdentity                   bit = 1;   \r\nDECLARE @GenerateIndexes                    bit = 1;   \r\nDECLARE @GenerateConstraints                bit = 1;   \r\nDECLARE @GenerateKeyConstraints             bit = 1;   \r\nDECLARE @AssignConstraintNameOfDefaults     bit = 1;   \r\nDECLARE @AddDropIfItExists                  bit = 0;   \r\n   \r\n;WITH index_column AS    \r\n(   \r\n    SELECT    \r\n          ic.[object_id]   \r\n        , ic.index_id   \r\n        , ic.is_descending_key   \r\n        , ic.is_included_column   \r\n        , c.name   \r\n    FROM sys.index_columns ic WITH(NOWAIT)   \r\n    JOIN sys.columns c WITH(NOWAIT) ON ic.[object_id] = c.[object_id] AND ic.column_id = c.column_id   \r\n    WHERE ic.[object_id] = @object_id   \r\n),   \r\nfk_columns AS    \r\n(   \r\n     SELECT    \r\n          k.constraint_object_id   \r\n        , cname = c.name   \r\n        , rcname = rc.name   \r\n    FROM sys.foreign_key_columns k WITH(NOWAIT)   \r\n    JOIN sys.columns rc WITH(NOWAIT) ON rc.[object_id] = k.referenced_object_id AND rc.column_id = k.referenced_column_id    \r\n    JOIN sys.columns c WITH(NOWAIT) ON c.[object_id] = k.parent_object_id AND c.column_id = k.parent_column_id   \r\n    WHERE k.parent_object_id = @object_id and @GenerateFKs = 1   \r\n)   \r\nSELECT @SQL =    \r\n    --------------------  DROP IS Exists --------------------------------------------------------------------------------------------------   \r\n        CASE WHEN @AddDropIfItExists = 1   \r\n        THEN    \r\n            --Drop table if exists   \r\n            CAST(   \r\n                N'IF OBJECT_ID(''' + quotename(OBJECT_schema_name(@object_id)) + N'.' + quotename(OBJECT_NAME(@object_id)) + N''') IS NOT NULL DROP TABLE ' + quotename(OBJECT_schema_name(@object_id)) + N'.' + quotename(OBJECT_NAME(@object_id)) + N';' + NCHAR(13)    \r\n            as nvarchar(max))   \r\n            +   \r\n            --Drop foreign keys   \r\n            ISNULL(((   \r\n                SELECT    \r\n                    CAST(   \r\n                        N'ALTER TABLE ' + quotename(s.name) + N'.' + quotename(t.name) + N' DROP CONSTRAINT ' + RTRIM(f.name) + N';' + NCHAR(13)   \r\n                    as nvarchar(max))   \r\n                FROM sys.tables t   \r\n                INNER JOIN sys.foreign_keys f ON f.parent_object_id = t.object_id   \r\n                INNER JOIN sys.schemas      s ON s.schema_id = f.schema_id   \r\n                WHERE f.referenced_object_id = @object_id   \r\n                FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)'))   \r\n            ,N'') + NCHAR(13)   \r\n        ELSE   \r\n            --Create if table not exists   \r\n            CAST(   \r\n                N'IF OBJECT_ID(''' + quotename(OBJECT_schema_name(@object_id)) + N'.' + quotename(OBJECT_NAME(@object_id)) + N''') IS NULL '  \r\n            as nvarchar(max)) + NCHAR(13)   \r\n\t\tEND    \r\n    +   \r\n    --------------------- CREATE TABLE -----------------------------------------------------------------------------------------------------------------   \r\n    CAST(   \r\n            N'BEGIN ' + NCHAR(13)+ N'CREATE TABLE ' + quotename(OBJECT_schema_name(@object_id)) + N'.' + quotename(OBJECT_NAME(@object_id)) + NCHAR(13) + N'(' + NCHAR(13) + STUFF((   \r\n            SELECT    \r\n                CAST(   \r\n                    NCHAR(9) + N',' + quotename(c.name) + N' ' +    \r\n                    CASE WHEN c.is_computed = 1   \r\n                        THEN N' AS ' + cc.[definition]    \r\n                        ELSE UPPER(tp.name) +    \r\n                            CASE WHEN tp.name IN(N'varchar', N'char', N'varbinary', N'binary', N'text')   \r\n                                    THEN N'(' + CASE WHEN c.max_length = -1 THEN N'MAX' ELSE CAST(c.max_length AS NVARCHAR(5)) END + N')'   \r\n                                    WHEN tp.name IN(N'nvarchar', N'nchar', N'ntext')   \r\n                                    THEN N'(' + CASE WHEN c.max_length = -1 THEN N'MAX' ELSE CAST(c.max_length \/ 2 AS NVARCHAR(5)) END + N')'   \r\n                                    WHEN tp.name IN(N'datetime2', N'time2', N'datetimeoffset')    \r\n                                    THEN N'(' + CAST(c.scale AS NVARCHAR(5)) + N')'   \r\n                                    WHEN tp.name = N'decimal'    \r\n                                    THEN N'(' + CAST(c.[precision] AS NVARCHAR(5)) + N',' + CAST(c.scale AS NVARCHAR(5)) + N')'   \r\n                                ELSE N''   \r\n                            END +   \r\n                            CASE WHEN c.collation_name IS NOT NULL and @UseSourceCollation = 1 THEN N' COLLATE ' + c.collation_name ELSE N'' END +   \r\n                            CASE WHEN c.is_nullable = 1 THEN N' NULL' ELSE N' NOT NULL' END +   \r\n                            CASE WHEN dc.[definition] IS NOT NULL THEN CASE WHEN @AssignConstraintNameOfDefaults = 1 THEN N' CONSTRAINT ' + quotename(dc.name) ELSE N'' END + N' DEFAULT' + dc.[definition] ELSE N'' END +    \r\n                            CASE WHEN ic.is_identity = 1 and @GenerateIdentity = 1 THEN N' IDENTITY(' + CAST(ISNULL(ic.seed_value, N'0') AS NCHAR(1)) + N',' + CAST(ISNULL(ic.increment_value, N'1') AS NCHAR(1)) + N')' ELSE N'' END    \r\n                    END + NCHAR(13)   \r\n                AS nvarchar(Max))   \r\n            FROM sys.columns c WITH(NOWAIT)   \r\n                INNER JOIN sys.types tp WITH(NOWAIT) ON c.user_type_id = tp.user_type_id   \r\n                LEFT JOIN sys.computed_columns cc WITH(NOWAIT) ON c.[object_id] = cc.[object_id] AND c.column_id = cc.column_id   \r\n                LEFT JOIN sys.default_constraints dc WITH(NOWAIT) ON c.default_object_id != 0 AND c.[object_id] = dc.parent_object_id AND c.column_id = dc.parent_column_id   \r\n                LEFT JOIN sys.identity_columns ic WITH(NOWAIT) ON c.is_identity = 1 AND c.[object_id] = ic.[object_id] AND c.column_id = ic.column_id   \r\n            WHERE c.[object_id] = @object_id   \r\n            ORDER BY c.column_id   \r\n            FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)'), 1, 2, NCHAR(9) + N' ')   \r\n    as nvarchar(max))   \r\n    +    \r\n\t  \r\n    ---------------------- Key Constraints ----------------------------------------------------------------   \r\n    CAST(   \r\n        case when @GenerateKeyConstraints <> 1 THEN N'' ELSE    \r\n            ISNULL((SELECT NCHAR(9) + N', CONSTRAINT ' + quotename(k.name) + N' PRIMARY KEY ' + ISNULL(kidx.type_desc, N'') + N'(' +    \r\n                       (SELECT STUFF((   \r\n                             SELECT N', ' + quotename(c.name) + N' ' + CASE WHEN ic.is_descending_key = 1 THEN N'DESC' ELSE N'ASC' END   \r\n                             FROM sys.index_columns ic WITH(NOWAIT)   \r\n                             JOIN sys.columns c WITH(NOWAIT) ON c.[object_id] = ic.[object_id] AND c.column_id = ic.column_id   \r\n                             WHERE ic.is_included_column = 0   \r\n                                 AND ic.[object_id] = k.parent_object_id    \r\n                                 AND ic.index_id = k.unique_index_id        \r\n                             FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)'), 1, 2, N''))   \r\n                + N')' + NCHAR(13)   \r\n                FROM sys.key_constraints k WITH(NOWAIT) LEFT JOIN sys.indexes kidx ON   \r\n                    k.parent_object_id = kidx.object_id and k.unique_index_id = kidx.index_id   \r\n                WHERE k.parent_object_id = @object_id    \r\n                    AND k.[type] = N'PK'), N'') + N')'  + NCHAR(13)   \r\n        END    \r\n    as nvarchar(max))   \r\n    +    \r\n    --------------------- FOREIGN KEYS -----------------------------------------------------------------------------------------------------------------   \r\n    CAST(   \r\n        ISNULL((SELECT(   \r\n            SELECT NCHAR(13) +   \r\n             N'ALTER TABLE ' + + quotename(OBJECT_schema_name(@object_id)) + N'.' + quotename(OBJECT_NAME(@object_id)) + + N' WITH'    \r\n            + CASE WHEN fk.is_not_trusted = 1    \r\n                THEN N' NOCHECK'    \r\n                ELSE N' CHECK'    \r\n              END +    \r\n              N' ADD CONSTRAINT ' + quotename(fk.name)  + N' FOREIGN KEY('    \r\n              + STUFF((   \r\n                SELECT N', ' + quotename(k.cname) + N''   \r\n                FROM fk_columns k   \r\n                WHERE k.constraint_object_id = fk.[object_id]   \r\n                FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)'), 1, 2, N'')   \r\n               + N')' +   \r\n              N' REFERENCES ' + quotename(SCHEMA_NAME(ro.[schema_id])) + N'.' + quotename(ro.name) + N'('   \r\n              + STUFF((   \r\n                SELECT N', ' + quotename(k.rcname) + N''   \r\n                FROM fk_columns k   \r\n                WHERE k.constraint_object_id = fk.[object_id]   \r\n                FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)'), 1, 2, N'')   \r\n               + N')'   \r\n            + CASE    \r\n                WHEN fk.delete_referential_action = 1 THEN N' ON DELETE CASCADE'    \r\n                WHEN fk.delete_referential_action = 2 THEN N' ON DELETE SET NULL'   \r\n                WHEN fk.delete_referential_action = 3 THEN N' ON DELETE SET DEFAULT'    \r\n                ELSE N''    \r\n              END   \r\n            + CASE    \r\n                WHEN fk.update_referential_action = 1 THEN N' ON UPDATE CASCADE'   \r\n                WHEN fk.update_referential_action = 2 THEN N' ON UPDATE SET NULL'   \r\n                WHEN fk.update_referential_action = 3 THEN N' ON UPDATE SET DEFAULT'     \r\n                ELSE N''    \r\n              END    \r\n            + NCHAR(13) + N'ALTER TABLE ' + + quotename(OBJECT_schema_name(@object_id)) + N'.' + quotename(OBJECT_NAME(@object_id)) + + N' CHECK CONSTRAINT ' + quotename(fk.name)  + N'' + NCHAR(13)   \r\n        FROM sys.foreign_keys fk WITH(NOWAIT)   \r\n        JOIN sys.objects ro WITH(NOWAIT) ON ro.[object_id] = fk.referenced_object_id   \r\n        WHERE fk.parent_object_id = @object_id   \r\n        FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)')), N'')   \r\n    as nvarchar(max))   \r\n    +    \r\n    --------------------- INDEXES ----------------------------------------------------------------------------------------------------------   \r\n    CAST(   \r\n        ISNULL(((SELECT   \r\n             NCHAR(13) + N'CREATE' + CASE WHEN i.is_unique = 1 THEN N' UNIQUE ' ELSE N' ' END    \r\n                    + i.type_desc + N' INDEX ' + quotename(i.name) + N' ON ' + + quotename(OBJECT_schema_name(@object_id)) + N'.' + quotename(OBJECT_NAME(@object_id)) + + N'(' +   \r\n                    STUFF((   \r\n                    SELECT N', ' + quotename(c.name) + N'' + CASE WHEN c.is_descending_key = 1 THEN N' DESC' ELSE N' ASC' END   \r\n                    FROM index_column c   \r\n                    WHERE c.is_included_column = 0   \r\n                        AND c.index_id = i.index_id   \r\n                    FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)'), 1, 2, N'') + N')'     \r\n                    + ISNULL(NCHAR(13) + N'INCLUDE(' +    \r\n                        STUFF((   \r\n                        SELECT N', ' + quotename(c.name) + N''   \r\n                        FROM index_column c   \r\n                        WHERE c.is_included_column = 1   \r\n                            AND c.index_id = i.index_id   \r\n                        FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)'), 1, 2, N'') + N')', N'')  + NCHAR(13)   \r\n            FROM sys.indexes i WITH(NOWAIT)   \r\n            WHERE i.[object_id] = @object_id   \r\n                AND i.is_primary_key = 0   \r\n                AND i.[type] in(1,2)   \r\n                and @GenerateIndexes = 1   \r\n            FOR XML PATH(N''), TYPE).value(N'.', N'NVARCHAR(MAX)')   \r\n        ), N'')   \r\n    as nvarchar(max))   \r\n\t+ NCHAR(13) + N'END' + NCHAR(13)  \r\n\tRETURN CONVERT(TEXT,@sql)   \r\nEND \r\n\r\nGO\r\n"},"fn.CharAtIndex":{"code":"\r\nIF OBJECT_ID('fn.CharAtIndex') IS NOT NULL DROP FUNCTION fn.CharAtIndex;\r\nGO\r\nCREATE FUNCTION [fn].[CharAtIndex](@line VARCHAR(5000),@pos TINYINT,@delimeter CHAR(1) = ' ')   \r\nRETURNS VARCHAR(255)   \r\nAS   \r\nBEGIN   \r\n\tDECLARE @Result VARCHAR(255)   \r\n\tDECLARE @charpos INT   \r\n\tDECLARE @i INT   \r\n\tSET @i=0   \r\n\tWHILE @i<@pos   \r\n\tBEGIN   \r\n\t\tSET @i=@i+1;   \r\n\t\tSET @charpos = CHARINDEX(@delimeter,@line)   \r\n\t\tSET @line=SUBSTRING(@line,@charpos+1,99999)   \r\n\tEND   \r\n\tSET @charpos = CHARINDEX(@delimeter,@line+@delimeter)   \r\n\tSET @Result=SUBSTRING(@line,0,@charpos)   \r\n\tRETURN @Result   \r\nEND \r\n\r\nGO\r\n"},"om.tagname":{"code":"\r\nIF OBJECT_ID('om.tagname') IS NOT NULL DROP FUNCTION om.tagname;\r\nGO\r\nCREATE FUNCTION [om].[tagname](@id INT) RETURNS varchar(200)   \r\nAS   \r\nBEGIN   \r\n\tDECLARE @tagname VARCHAR(500)   \r\n\t;WITH P(level,id,masterID,name,tag,title,srcID,tagname) AS    \r\n\t(    \r\n\t\tSELECT 0,I.id,I.masterID,I.name,I.tag,I.title,I.srcID,CONVERT(VARCHAR(500),ISNULL(C.tag,'')+ISNULL(CASE WHEN ISNUMERIC(I.tag)=1 THEN right('000'+convert(varchar(3),I.tag),3) ELSE I.tag END,''))   \r\n\t\tFROM om.items I    \r\n\t\tINNER JOIN om.items C ON C.id = I.srcID    \r\n\t\tWHERE I.id=@id AND(C.tag IS NOT NULL OR I.tag IS NOT NULL)   \r\n\t\tUNION ALL   \r\n\t\tSELECT level+1,I.id,I.masterID,I.name,I.tag,I.title,I.srcID,CONVERT(VARCHAR(500),ISNULL(C.tag,'')+ISNULL(CASE WHEN ISNUMERIC(I.tag)=1 THEN right('000'+convert(varchar(3),I.tag),3) ELSE I.tag END,'')+'.'+P.tagname)   \r\n\t\tFROM om.items I    \r\n\t\tINNER JOIN P ON I.id=P.masterID   \r\n\t\tINNER JOIN om.items C ON C.id = I.srcID AND(C.tag IS NOT NULL OR I.tag IS NOT NULL)   \r\n\t)    \r\n\tSELECT @tagname=tagname\tFROM P    \r\n\tRETURN @tagname   \r\nEND \r\n\r\nGO\r\n"},"om.itemChilds":{"code":"\r\nIF OBJECT_ID('om.itemChilds') IS NOT NULL DROP FUNCTION om.itemChilds;\r\nGO\r\nCREATE FUNCTION [om].[itemChilds](@itemId INT)RETURNS TABLE    \r\nAS   \r\nRETURN    \r\n(   \r\n\tWITH P( id,level,masterId,name,classID,startDT,endDT,finishDT,deletedDT,state,srcID) AS(    \r\n\t--SELECT ISNULL(I.detailId,I.id),0,I.masterId,I.name,I.classID,I.startDT,I.endDT,I.finishDT,I.deletedDT,I.state,I.srcID   \r\n\tSELECT I.id,0,I.masterId,I.name,I.classID,I.startDT,I.endDT,I.finishDT,I.deletedDT,I.state,I.srcID   \r\n\tFROM om.items I   \r\n\tWHERE I.id = @itemId   \r\n\tUNION ALL   \r\n\tSELECT I.id,level+1,I.masterId,I.name,I.classID,I.startDT,I.endDT,I.finishDT,I.deletedDT,I.state,I.srcID   \r\n\tFROM P INNER JOIN om.items I ON I.masterId = P.id and level<8   \r\n\t)    \r\n\tSELECT * FROM P   \r\n) \r\n\r\nGO\r\n"},"om.itemMasters":{"code":"\r\nIF OBJECT_ID('om.itemMasters') IS NOT NULL DROP FUNCTION om.itemMasters;\r\nGO\r\nCREATE FUNCTION [om].[itemMasters](\t@itemId INT ) RETURNS TABLE    \r\nAS   \r\nRETURN(   \r\n\tWITH P( id,level,masterId,name)    \r\n\tAS(SELECT ISNULL(I.detailId,I.id),0,I.masterId,I.name FROM om.items I WHERE I.id = @itemId   \r\n\tUNION ALL    \r\n\tSELECT ISNULL(I.detailId,I.id),level+1,I.masterId,I.name   \r\n\tFROM  P INNER JOIN om.items I ON I.id = P.masterID and level<8 )    \r\n\tSELECT * FROM P WHERE level>0   \r\n) \r\n\r\nGO\r\n"},"api.fieldget":{"code":"\r\nIF OBJECT_ID('api.fieldget') IS NOT NULL DROP FUNCTION api.fieldget;\r\nGO\r\nCREATE FUNCTION [api].[fieldget](@id INT,@fieldID INT) RETURNS VARCHAR(MAX)    \r\nAS   \r\nBEGIN   \r\n\tDECLARE @value VARCHAR(MAX)   \r\n\tSET @value=NULL   \r\n\t;WITH P(level,id,srcID) AS(    \r\n\t\tSELECT 0,I.id,I.srcID    \r\n\t\tFROM api.items I    \r\n\t\tWHERE I.id=@id    \r\n\tUNION ALL   \r\n\t\tSELECT level+1,I.id,I.srcID   \r\n\t\tFROM api.items I    \r\n\t\tINNER JOIN P ON I.id=P.srcID   \r\n\t)    \r\n\tSELECT @value=ISNULL(@value,F.value)   \r\n\tFROM P    \r\n\tINNER JOIN om.attributes F ON F.id=P.id AND F.fieldID=@fieldID   \r\n\tRETURN @value   \r\nEND \r\n\r\nGO\r\n"},"fn.getAttribute":{"code":"\r\nIF OBJECT_ID('fn.getAttribute') IS NOT NULL DROP FUNCTION fn.getAttribute;\r\nGO\r\nCREATE FUNCTION [fn].[getAttribute](@id INT,@attributeName VARCHAR(500)) RETURNS VARCHAR(MAX)    \r\nAS   \r\nBEGIN   \r\n\tDECLARE @value VARCHAR(MAX)   \r\n\tDECLARE @fieldID INT  \r\n\tSELECT @fieldID=id FROM om.field WHERE name=@attributeName  \r\n\tSET @value=NULL   \r\n\t;WITH P(level,id,srcID) AS(    \r\n\t\tSELECT 0,I.id,I.srcID    \r\n\t\tFROM api.items I    \r\n\t\tWHERE I.id=@id    \r\n\tUNION ALL   \r\n\t\tSELECT level+1,I.id,I.srcID   \r\n\t\tFROM api.items I    \r\n\t\tINNER JOIN P ON I.id=P.srcID   \r\n\t)    \r\n\tSELECT @value=ISNULL(@value,F.value)   \r\n\tFROM P    \r\n\tINNER JOIN om.attributes F ON F.id=P.id AND F.fieldID=@fieldID   \r\n\tRETURN @value   \r\nEND \r\n\r\nGO\r\n"},"api.getChildren":{"code":"\r\nIF OBJECT_ID('api.getChildren') IS NOT NULL DROP FUNCTION api.getChildren;\r\nGO\r\nCREATE FUNCTION [api].[getChildren](@itemId INT,@level INT) RETURNS TABLE    \r\nAS   \r\nRETURN (   \r\n\tWITH P( id,level,masterId,name)    \r\n\tAS (    \r\n\t\tSELECT ISNULL(I.detailId,I.id),0,I.masterId,I.name   \r\n\t\t\tFROM api.items I   \r\n\t\t\tWHERE I.id = @itemId   \r\n\t\tUNION ALL   \r\n\t\tSELECT ISNULL(I.detailId,I.id),level+1,I.masterId,I.name   \r\n\t\tFROM P INNER JOIN api.items I ON I.masterId = P.id and level<@level   \r\n\t)    \r\n\tSELECT  * FROM P   \r\n) \r\n\r\nGO\r\n"},"api.getHost":{"code":"\r\nIF OBJECT_ID('api.getHost') IS NOT NULL DROP FUNCTION api.getHost;\r\nGO\r\nCREATE FUNCTION [api].[getHost](@host VARCHAR(50)) RETURNS TABLE AS RETURN(   \r\n\tSELECT H.id AS HostID,H.keyname AS HostName,H.name CompanyName,H.itemConfig config   \r\n\tFROM    \r\n\t\tapi.items H   \r\n\t\tINNER JOIN auth.host AH ON AH.id = H.id   \r\n\t\tLEFT OUTER JOIN auth.hostdomain HD ON HD.domain=@host AND HD.id=H.id   \r\n\t\tLEFT OUTER JOIN api.items S ON S.classID=1091 AND H.id=S.hostID   \r\n\tWHERE    \r\n\t\tH.hostID=1 AND H.classId=1002 AND(AH.name+'.aliconnect.nl'=@host OR S.keyname+'.aliconnect.nl'=@host OR HD.domain=@host)   \r\n) \r\n\r\nGO\r\n"},"api.itemAttributes":{"code":"\r\nIF OBJECT_ID('api.itemAttributes') IS NOT NULL DROP FUNCTION api.itemAttributes;\r\nGO\r\nCREATE FUNCTION [api].[itemAttributes](@id INT) RETURNS TABLE    \r\nAS    \r\nRETURN(   \r\n\tWITH P( id,srcId,level) AS(    \r\n\t\tSELECT id,srcId,0 FROM api.items WHERE id = @id    \r\n\t\tUNION ALL   \r\n\t\tSELECT I.id,I.srcId,level+1 FROM P INNER JOIN api.items I ON I.id = P.srcId AND level<8   \r\n\t)   \r\n\tSELECT P.id,name,value    \r\n\tFROM P INNER JOIN om.attributes F ON F.id=P.id   \r\n) \r\n\r\nGO\r\n"},"api.getHostAccount":{"code":"\r\nIF OBJECT_ID('api.getHostAccount') IS NOT NULL DROP FUNCTION api.getHostAccount;\r\nGO\r\nCREATE FUNCTION [api].[getHostAccount](@host VARCHAR(50),@sessionId VARCHAR(50)) RETURNS @T TABLE(HostID INT,UserID INT,HostName VARCHAR(200),GroupID INT,AccountID INT,UserName VARCHAR(200)) AS    \r\nBEGIN   \r\n\tDECLARE @HostID INT,@DomainID INT,@UserID INT,@GroupID INT,@AccountID INT,@UserName VARCHAR(200),@HostName VARCHAR(200)   \r\n\tSELECT @hostID=hostID,@HostName=HostName FROM api.hostGet(@host)   \r\n\t--SELECT @hostId=id,@domainId = aid FROM auth.hostdomain WHERE domain=@host   \r\n\t--IF @hostId IS NULL SELECT @hostId=id FROM om.items WHERE classid=1002 AND @host=keyname+'.aliconnect.nl'   \r\n\tSELECT @userId=U.id,@UserName=I.name   \r\n\tFROM auth.hostLoginSession HL   \r\n\tINNER JOIN auth.users U ON U.id = HL.userId AND U.password IS NOT NULL   \r\n\tINNER JOIN api.items I ON I.id=U.id   \r\n\tWHERE HL.sessionId = @sessionId AND(HL.hostid = @hostId OR HL.keepSignedIn=1)    \r\n\tSET @groupId=0   \r\n\tSELECT @accountId=AccountID,@groupId=GroupID FROM auth.account WHERE UserID=@UserID AND HostID=@HostID AND groupID IS NOT NULL   \r\n\tINSERT @T VALUES(@HostID,@UserID,@HostName,@GroupID,@AccountID,@UserName)   \r\n\tRETURN   \r\nEND \r\n\r\nGO\r\n"},"api.getAccountState":{"code":"\r\nIF OBJECT_ID('api.getAccountState') IS NOT NULL DROP FUNCTION api.getAccountState;\r\nGO\r\nCREATE FUNCTION [api].[getAccountState](@accountID INT) RETURNS TABLE    \r\nAS   \r\nRETURN   \r\n(   \r\n\tSELECT I.id,S.value AS periode,S.createdDT,S.modifiedDT  \r\n\tFROM api.items I   \r\n\t\tCROSS JOIN(SELECT MAX(aid)aid FROM om.attributes A WHERE id=@accountID AND fieldID=1952) A  \r\n\t\tINNER JOIN api.attributes S ON S.aid=A.aid  \r\n\t\t--INNER JOIN api.items IG ON IG.id = A.itemID  \r\n\t\t--LEFT OUTER JOIN om.attributes AM ON AM.id = I.id AND AM.fieldID=931  \r\n\tWHERE I.id=@accountID  \r\n) \r\n\r\nGO\r\n"},"api.userItems":{"code":"\r\nIF OBJECT_ID('api.userItems') IS NOT NULL DROP FUNCTION api.userItems;\r\nGO\r\nCREATE FUNCTION [api].[userItems](@userID INT) RETURNS TABLE     \r\nAS    \r\nRETURN     \r\n(    \r\n\tSELECT    \r\n\t\tV.lastvisitDT,    \r\n\t\tV.LastVisitDT LastVisitDateTime,    \r\n\t\tI.* \r\n\tFROM api.citems I    \r\n\tLEFT OUTER JOIN om.itemUserVisit V ON V.id=I.id AND V.userID=@userID    \r\n) \r\n \r\n \r\n \r\n\r\nGO\r\n"}},"PROCEDURE":{"api.getItemPivot":{"code":"\r\nIF OBJECT_ID('api.getItemPivot') IS NOT NULL DROP PROCEDURE api.getItemPivot;\r\nGO\r\nCREATE PROCEDURE [api].[getItemPivot] @where VARCHAR(MAX), @cols VARCHAR(MAX), @order VARCHAR(MAX) = ''   \r\nAS   \r\n\tDECLARE @query  AS NVARCHAR(MAX)   \r\n\tset @query = 'SELECT id,idx,itemname,subject,state,startDT,endDT,finishDT,' + @cols + ' from    \r\n\t\t\t\t(   \r\n\t\t\t\t\tselect id,idx,itemname,subject,state,startDT,endDT,finishDT,name,value from omv.fields I WHERE '+@where+'   \r\n\t\t\t\t) x   \r\n\t\t\t\tpivot    \r\n\t\t\t\t(   \r\n\t\t\t\t\tmax(value)   \r\n\t\t\t\t\tfor name in(' + @cols + ')   \r\n\t\t\t\t) p    \r\n\t\t\t\t'+@order   \r\n\t--print @query   \r\n\texecute(@query); \r\n\r\nGO\r\n"},"api.setBlur":{"code":"\r\nIF OBJECT_ID('api.setBlur') IS NOT NULL DROP PROCEDURE api.setBlur;\r\nGO\r\nCREATE PROCEDURE [api].[setBlur] @host VARCHAR(50)=NULL,@sessionId VARCHAR(50)=NULL,@uid CHAR(128)=NULL,@ip VARCHAR(50)=NULL,@deviceUID VARCHAR(150)=NULL   \r\nAS   \r\n\tRETURN  \r\n\t--SET NOCOUNT ON; SET TEXTSIZE 2147483647   \r\n\t--DECLARE @HostID INT,@UserID INT,@CurIP VARCHAR(50),@DeviceID INT,@tlogID INT   \r\n\t--SELECT @userID=userID,@hostID=hostID FROM api.hostAccountGet(@host,@sessionID)   \r\n\t--UPDATE auth.userLoginLocLog SET BlurDT=GETUTCDATE() WHERE UserID=@UserID AND EndDT IS NULL   \r\n\t--UPDATE auth.hostLogin SET hasFocus=NULL,onblurDt=GETUTCDATE() WHERE userID=@userID AND id=@hostID   \r\n\t--IF @DeviceUID IS NULL RETURN   \r\n\t--SELECT @DeviceID=DeviceID FROM auth.device WHERE DeviceUID=@DeviceUID    \r\n\t--IF @DeviceID IS NULL BEGIN INSERT auth.device(deviceUID,ip) VALUES(@DeviceUID,@ip) SET @deviceID=@@identity END   \r\n\t--SELECT @tlogID=aid FROM auth.deviceLog WHERE DeviceID=@DeviceID AND UserID=@userID AND CONVERT(DATE,startDT)=CONVERT(DATE,GETUTCDATE())   \r\n\t--IF @tlogID IS NULL INSERT auth.deviceLog(DeviceID,UserID,startDT,endDT) VALUES(@DeviceID,@userID,GETUTCDATE(),GETUTCDATE())   \r\n\t--ELSE UPDATE auth.deviceLog SET endDT=GETUTCDATE() WHERE aid=@tlogID \r\n\r\nGO\r\n"},"api.setFocus":{"code":"\r\nIF OBJECT_ID('api.setFocus') IS NOT NULL DROP PROCEDURE api.setFocus;\r\nGO\r\nCREATE PROCEDURE [api].[setFocus] @host VARCHAR(50)=NULL,@sessionId VARCHAR(50)=NULL,@uid CHAR(128)=NULL,@IP VARCHAR(50)=NULL,@deviceUID VARCHAR(150)=NULL   \r\nAS   \r\n\tRETURN  \r\n\t--SET NOCOUNT ON;\tSET TEXTSIZE 2147483647   \r\n\t--DECLARE @HostID INT,@UserID INT,@CurIP VARCHAR(50),@DeviceID INT,@tlogID INT   \r\n\t----EXEC auth.userGet @sessionId=@sessionId, @host=@host, @groupID=@groupID OUTPUT, @hostID=@hostID OUTPUT, @userID=@userID OUTPUT   \r\n\t--SELECT @userID=userID,@hostID=hostID FROM api.hostAccountGet(@host,@sessionID)   \r\n\t--SELECT @CurIP=IP FROM auth.userLoginLocLog WHERE UserID=@UserID AND EndDT IS NULL   \r\n\t--IF @CurIP IS NULL OR @CurIP<>@IP   \r\n\t--BEGIN   \r\n\t--\tUPDATE auth.userLoginLocLog SET EndDT=BlurDT WHERE UserID=@UserID AND EndDT IS NULL   \r\n\t--\tINSERT auth.userLoginLocLog(UserID,IP,StartDT) VALUES(@UserID,@IP,GETUTCDATE())   \r\n\t--END   \r\n\t--UPDATE auth.hostLogin SET hasFocus=1,onfocusDt=GETUTCDATE() WHERE userID=@userID AND id=@hostID   \r\n\t--SELECT @userID UserID,@hostID HostID   \r\n\t--IF @DeviceUID IS NULL RETURN   \r\n\t--SELECT @DeviceID=DeviceID FROM auth.device WHERE DeviceUID=@DeviceUID    \r\n\t--IF @DeviceID IS NULL BEGIN INSERT auth.device(deviceUID,ip) VALUES(@DeviceUID,@ip) SET @deviceID=@@identity END   \r\n\t--SELECT @tlogID=aid FROM auth.deviceLog WHERE DeviceID=@DeviceID AND UserID=@userID AND CONVERT(DATE,startDT)=CONVERT(DATE,GETUTCDATE())   \r\n\t--IF @tlogID IS NULL INSERT auth.deviceLog(DeviceID,UserID,startDT,endDT) VALUES(@DeviceID,@userID,GETUTCDATE(),GETUTCDATE())   \r\n\t--ELSE UPDATE auth.deviceLog SET endDT=GETUTCDATE() WHERE aid=@tlogID \r\n\r\nGO\r\n"},"api.setItemProperty":{"code":"\r\nIF OBJECT_ID('api.setItemProperty') IS NOT NULL DROP PROCEDURE api.setItemProperty;\r\nGO\r\nCREATE PROCEDURE [api].[setItemProperty] @id VARCHAR(10),@name VARCHAR(10), @value VARCHAR(500)   \r\nAS   \r\n\tIF @value>'' SET @value=''''+@value+''''; ELSE SET @value='NULL'   \r\n\t--PRINT 'UPDATE om.items SET '+@name+'='+@value+' WHERE id='+@id  \r\n\tEXEC('UPDATE om.items SET '+@name+'='+@value+' WHERE id='+@id) \r\n\r\nGO\r\n"},"api.addItemUserVisit":{"code":"\r\nIF OBJECT_ID('api.addItemUserVisit') IS NOT NULL DROP PROCEDURE api.addItemUserVisit;\r\nGO\r\nCREATE PROCEDURE [api].[addItemUserVisit] @id INT,@userID int--,@hostID int=NULL   \r\nAS   \r\n\tIF NOT EXISTS(SELECT 0 FROM om.itemuservisit WHERE id=@id AND userID=@userID)    \r\n\t\tINSERT om.itemuservisit(id,userID,firstvisitDt,lastvisitDT,cnt)    \r\n\t\tVALUES(@id,@userID,GETUTCDATE(),GETUTCDATE(),0)   \r\n\tELSE    \r\n\t\tUPDATE om.itemuservisit SET cnt=cnt+1,lastvisitDT=GETUTCDATE() WHERE id=@id AND userID=@userID \r\n\r\nGO\r\n"},"api.addItemWord":{"code":"\r\nIF OBJECT_ID('api.addItemWord') IS NOT NULL DROP PROCEDURE api.addItemWord;\r\nGO\r\nCREATE PROCEDURE [api].[addItemWord] @word VARCHAR(50),@id INT,@cnt TINYINT AS   \r\n\tDECLARE @wordID INT   \r\n\tSELECT @wordID=id FROM om.word WHERE word=@word   \r\n\tIF @wordID IS NULL BEGIN INSERT om.word(word) VALUES(@word) SET @wordID=@@identity END   \r\n\tINSERT om.wordItem(wordID,itemID,cnt) VALUES(@wordID,@id,@cnt) \r\n\r\nGO\r\n"},"api.getAttribute":{"code":"\r\nIF OBJECT_ID('api.getAttribute') IS NOT NULL DROP PROCEDURE api.getAttribute;\r\nGO\r\nCREATE PROCEDURE [api].[getAttribute] @id INT,@name VARCHAR(100)=NULL, @fieldID INT=NULL,@value VARCHAR(500)=NULL OUTPUT, @itemID INT=NULL OUTPUT   \r\nAS   \r\n\tSELECT @value=value,@itemID=itemID FROM om.attributes WHERE id=@id AND name=@name \r\n\r\nGO\r\n"},"api.getDeviceData":{"code":"\r\nIF OBJECT_ID('api.getDeviceData') IS NOT NULL DROP PROCEDURE api.getDeviceData;\r\nGO\r\nCREATE PROCEDURE [api].[getDeviceData] @deviceID INT = NULL, @deviceUID VARCHAR(200)= NULL,@appUID VARCHAR(200)=NULL   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\t--DECLARE @sql VARCHAR(MAX)   \r\n\t--SELECT @sql=sql FROM auth.app WHERE uid=@deviceUID   \r\n\t--IF @sql IS NOT NULL EXEC(@sql)   \r\n\t--SELECT * FROM auth.app WHERE id=@deviceID--uid=@deviceUID   \r\n\tSELECT @deviceUID=uid FROM om.items WHERE id=@deviceID \r\n\tSELECT * FROM auth.app WHERE uid=@deviceUID   \r\n\tSELECT TOP 1 aid,documentname FROM aim.auth.appprintqueue WHERE uid IN(@deviceUID,@appUID) AND printDT IS NULL ORDER BY createDt; \r\n\r\nGO\r\n"},"api.getItem":{"code":"\r\nIF OBJECT_ID('api.getItem') IS NOT NULL DROP PROCEDURE api.getItem;\r\nGO\r\nCREATE PROCEDURE [api].[getItem] @id INT=NULL OUTPUT,@hostId INT,@schema VARCHAR(50)=NULL,@class VARCHAR(50)=NULL,@classId INT=NULL,@tag VARCHAR(50)=NULL,@keyname VARCHAR(50)=NULL,@title VARCHAR(500)=NULL,@toId INT=NULL   \r\nAS  \r\n\tIF @schema IS NOT NULL SET @class=@schema  \r\n\tIF @classId IS NULL SELECT @classId=id FROM om.class WHERE class=@class   \r\n\tIF @classId IS NULL BEGIN SELECT @classId=MAX(id)+1 FROM om.class INSERT om.class(id,class) VALUES(@classId,@class) END   \r\n\tIF @id IS NOT NULL AND NOT EXISTS(SELECT 0 FROM om.items WHERE id=@id) --SELECT 0 FROM om.items WHERE id=3562758  \r\n\tBEGIN  \r\n\t\tSET IdENTITY_INSERT om.items ON  \r\n\t\tINSERT om.items(classId,id,title)VALUES(@classId,@id,@title)  \r\n\t\tSET IdENTITY_INSERT om.items OFF  \r\n\tEND  \r\n\tIF @id IS NOT NULL UPDATE om.items SET hostId=ISNULL(@hostId,hostId),keyname=ISNULL(@keyname,keyname),tag=ISNULL(@tag,tag),toId=ISNULL(@toId,toId) WHERE id=@id  \r\n\tIF @id IS NULL AND @tag IS NOT NULL SELECT @id=id FROM om.items WHERE deletedDT IS NULL AND hostId=@hostId AND classId=@classId AND tag=@tag   \r\n\tIF @id IS NULL AND @keyName IS NOT NULL SELECT @id=id FROM om.items WHERE deletedDT IS NULL AND hostId=@hostId AND classId=@classId AND keyname=@keyName  \r\n\tIF @id IS NULL BEGIN INSERT om.items(hostId,classId,tag,keyname)VALUES(@hostId,@classId,@tag,@keyname) SET @id=SCOPE_IdENTITY() END \r\n\r\nGO\r\n"},"api.getItemNetwork":{"code":"\r\nIF OBJECT_ID('api.getItemNetwork') IS NOT NULL DROP PROCEDURE api.getItemNetwork;\r\nGO\r\nCREATE PROCEDURE [api].[getItemNetwork] @id INT,@host VARCHAR(50) = NULL,@sessionId VARCHAR(50) = NULL   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\tSET TEXTSIZE 2147483647   \r\n\tSET DATEFORMAT DMY   \r\n\t--DECLARE @groupID INT,@hostID INT,@userID INT,@accountId INT   \r\n\t--SELECT @groupID=groupID,@hostID=hostID,@userID=userID,@accountID=accountID FROM api.hostAccountGet(@host,@sessionId)   \r\n\t--EXEC auth.userGet @sessionId,@host,@groupID OUTPUT,@hostID OUTPUT,@userID OUTPUT   \r\n\tDECLARE @T TABLE(fromID INT,toID INT,level TINYINT)   \r\n\t   \r\n\t;WITH P( fromID,toID,level) AS(    \r\n\t\tSELECT fromID,toID,1 FROM om.link WHERE fromID = @id    \r\n\t\tUNION ALL   \r\n\t\tSELECT I.fromID,I.toID,level+1   \r\n\t\tFROM P INNER JOIN om.link I ON I.fromID = P.toID AND level<2    \r\n\t)    \r\n\tINSERT @T SELECT * FROM P   \r\n\t;WITH P( fromID,toID,level) AS(    \r\n\t\tSELECT fromID,toID,1 FROM om.link WHERE toID = @id    \r\n\t\tUNION ALL   \r\n\t\tSELECT I.fromID,I.toID,level+1   \r\n\t\tFROM P INNER JOIN om.link I ON I.toID = P.toID AND level<3   \r\n\t)    \r\n\tINSERT @T SELECT * FROM P   \r\n\t\t   \r\n\t;WITH P( fromID,toID,level) AS(    \r\n\t\tSELECT I.id,I.itemId,1    \r\n\t\tFROM om.attributes I WHERE id = @id AND I.itemID IS NOT NULL   \r\n\t\tUNION ALL   \r\n\t\tSELECT I.id,I.itemId,level+1   \r\n\t\tFROM om.attributes I    \r\n\t\tINNER JOIN P ON I.id = P.toID AND level<2 AND I.itemID IS NOT NULL   \r\n\t)    \r\n\tINSERT @T SELECT * FROM P   \r\n\t;WITH P( fromID,toID,level) AS(    \r\n\t\tSELECT I.itemId,I.id,1    \r\n\t\tFROM om.attributes I WHERE itemId = @id AND I.itemID IS NOT NULL   \r\n\t\tUNION ALL   \r\n\t\tSELECT I.itemId,I.id,level+1   \r\n\t\tFROM om.attributes I    \r\n\t\tINNER JOIN P ON I.itemId = P.toID AND level<2 AND I.itemID IS NOT NULL   \r\n\t)    \r\n\tINSERT @T SELECT * FROM P   \r\n\tSELECT DISTINCT I.id [key],I.name text,I.classID    \r\n\tFROM @T T   \r\n\tINNER JOIN om.items I ON I.id IN(T.toID,T.fromID)   \r\n\tSELECT * FROM @T --WHERE fromID IS NOT NULL \r\n\r\nGO\r\n"},"api.setItem":{"code":"\r\nIF OBJECT_ID('api.setItem') IS NOT NULL DROP PROCEDURE api.setItem;\r\nGO\r\nCREATE PROCEDURE [api].[setItem] @id INT,@submit BIT=0,@moduserID INT=NULL,@hostID INT=NULL  \r\nAS  \r\n\tSET NOCOUNT ON  \r\n\tDECLARE @pos INT,@msgID INT,@pageID INT,@www BIT,@footerID INT,@aid INT,@classID INT,@ItemID INT,@ItemHostID INT,@SiteID INT,@AccountID INT,@userID INT,@groupID INT,@ToID INT,@FromID INT,@SrcID INT,@ContactID INT,@CompanyID INT,@PersonID INT,@value VARCHAR(500),@name VARCHAR(500),@website VARCHAR(500),@config VARCHAR(MAX),@keyname VARCHAR(500),@email VARCHAR(500),@email1 VARCHAR(500),@email2 VARCHAR(500),@jobtitle VARCHAR(500),@displayname VARCHAR(500),@givenname VARCHAR(500),@middlename VARCHAR(500),@surname VARCHAR(500),@surname2 VARCHAR(500),@companyname VARCHAR(500),@company VARCHAR(500),@msg VARCHAR(MAX)  \r\n\tSELECT @www=www,@ClassID=classID,@UserID=UserID,@ToID=ToID,@FromID=FromID,@ItemHostID=HostID,@SrcID=SrcID,@keyname=keyname,@name=name,@config=Config FROM om.items WHERE id=@id  \r\n\t--IF @classID=1000 -- Persoon  \r\n\t--BEGIN  \r\n\t--\tSET @value=fn.getAttribute(@id,'EmailAddresses2Address')  \r\n\t--\tIF @Value>'' EXEC auth.setEmail @email=@value,@id=@id  \r\n\t--END  \r\n\t--ELSE IF @classID=1004 BEGIN  \r\n\t--\tIF @HostID=1 AND @www<>1 UPDATE om.items SET www=1 WHERE id=@id  \r\n\t--\tIF @ItemHostID<>1   \r\n\t--\tBEGIN  \r\n\t--\t\tSELECT @email=ISNULL(EmailAddresses0Address,EmailAddresses2Address),@email1=EmailAddresses0Address,@email2=EmailAddresses2Address,@jobtitle=JobTitle,@displayname=displayname,@surname=surname,@middlename=middlename,@givenname=givenname,@companyname=companyname,@company=company  \r\n\t--\t\tFROM(SELECT F.id,F.name,F.value FROM om.fields F WHERE id=@id) X   \r\n\t--\t\tPIVOT(max(value) FOR name in(EmailAddresses0Address,EmailAddresses2Address,JobTitle,DisplayName,Surname,GivenName,MiddleName,CompanyName,Company)) P1   \r\n\t--\t\tIF @email IS NOT NULL  \r\n\t--\t\tBEGIN  \r\n\t--\t\t\t--IF fn.getAttribute(@personID,'msgContactAddSendDT') IS NULL  \r\n\t--\t\t\t--BEGIN  \r\n\t--\t\t\t--\tSELECT @msg=ISNULL(@msg+',','')+api.mailMsgGet('msgContactAdd')  \r\n\t--\t\t\t--\t--EXEC api.setAttribute @id=@PersonID,@name='msgContactAddSendDT',@Value=GETUTCDATE()  \r\n\t--\t\t\t--END  \r\n\t--\t\t\tSELECT TOP 1 @aid=aid,@personID=id FROM auth.email WHERE email IN(@email1,@email2)  \r\n\t--\t\t\tIF @aid IS NULL  \r\n\t--\t\t\tBEGIN  \r\n\t--\t\t\t\tINSERT auth.email(email)VALUES(@email)  \r\n\t--\t\t\t\tSET @aid=scope_identity()  \r\n\t--\t\t\tEND  \r\n\t--\t\t\tIF @personID IS NULL SET @personID=@toID  \r\n\t--\t\t\tIF @personID IS NULL   \r\n\t--\t\t\tBEGIN  \r\n\t--\t\t\t\tSET @name=ISNULL(@name,@email)  \r\n\t--\t\t\t\tINSERT om.items(hostID,classID,name) VALUES(1,1000,@name)  \r\n\t--\t\t\t\tSET @personID=scope_identity()  \r\n\t--\t\t\t\tIF @surname IS NULL  \r\n\t--\t\t\t\tBEGIN  \r\n\t--\t\t\t\t\tSELECT @surname=@name,@pos=CHARINDEX('-',@name)  \r\n\t--\t\t\t\t\tIF @pos>0 SELECT @surname2=LTRIM(SUBSTRING(@surname,@pos+1,999)),@surname=RTRIM(SUBSTRING(@surname,0,@pos))  \r\n\t--\t\t\t\t\tSET @pos=CHARINDEX(' ',@surname)  \r\n\t--\t\t\t\t\tIF @pos>0  \r\n\t--\t\t\t\t\tBEGIN  \r\n\t--\t\t\t\t\t\tSELECT @givenname=SUBSTRING(@surname,0,@pos),@surname=SUBSTRING(@surname,@pos+1,99999),@pos=0  \r\n\t--\t\t\t\t\t\tWHILE CHARINDEX(' ',@surname,@pos)>0 SET @pos=CHARINDEX(' ',@surname,@pos)+1  \r\n\t--\t\t\t\t\t\tIF @pos>0 SELECT @middlename=SUBSTRING(@surname,0,@pos-1),@surname=SUBSTRING(@surname,@pos,99999)  \r\n\t--\t\t\t\t\tEND  \r\n\t--\t\t\t\t\tSET @surname=@surname+ISNULL(' - '+@surname2,'')  \r\n\t--\t\t\t\tEND  \r\n\t--\t\t\t\tIF @surname>'' EXEC api.setAttribute @id=@PersonID,@name='Surname',@Value=@surname  \r\n\t--\t\t\t\tIF @givenname>'' EXEC api.setAttribute @id=@PersonID,@name='GivenName',@Value=@givenname  \r\n\t--\t\t\t\tIF @middlename>'' EXEC api.setAttribute @id=@PersonID,@name='MiddleName',@Value=@middlename  \r\n\t--\t\t\t\tEXEC api.setAttribute @id=@PersonID,@name='EmailAddresses2Address',@Value=@email  \r\n\t--\t\t\t\tUPDATE auth.email SET id=@PersonID WHERE email=@email  \r\n\t--\t\t\tEND  \r\n\t--\t\t\tIF @toID IS NULL EXEC api.setAttribute @id=@id,@name='DisplayName',@itemID=@personID  \r\n\t--\t\t\tIF @email1 IS NOT NULL AND NOT EXISTS(SELECT 0 FROM auth.email WHERE email=@email1) INSERT auth.email(id,email) VALUES(@personID,@email1)  \r\n\t--\t\t\tIF @email2 IS NOT NULL AND NOT EXISTS(SELECT 0 FROM auth.email WHERE email=@email2) INSERT auth.email(id,email) VALUES(@personID,@email2)  \r\n\t--\t\t\t--IF fn.getAttribute(@personID,'accountMailSendDT') IS NULL  \r\n\t--\t\t\t--BEGIN  \r\n\t--\t\t\t--\tSELECT @msg=ISNULL(@msg+',','')+api.mailMsgGet('mailAliconnectAccountAdd')  \r\n\t--\t\t\t--\t--EXEC api.setAttribute @id=@PersonID,@name='accountMailSendDT',@Value=GETUTCDATE()  \r\n\t--\t\t\t--END  \r\n\t--\t\t\t--IF ISNULL(@toID,0)<>@personID  \r\n\t--\t\t\t--BEGIN  \r\n\t--\t\t\t--\tEXEC api.setAttribute @id=@id,@hostID=@hostID,@name='DisplayName',@classID=1000,@itemID=@personID,@idname='toID'  \r\n\t--\t\t\t--\tSET @toID=@personID  \r\n\t--\t\t\t--END  \r\n\t--\t\tEND  \r\n\t--\t\t--SELECT @fromID=ISNULL(srcID,id) FROM api.items WHERE id=@fromID  \r\n\t--\t\t--IF @srcID IS NULL AND @toID IS NOT NULL AND @fromID IS NOT NULL SELECT @srcID=I.ID FROM api.items I WHERE classID=1004 AND hostID=1 AND toID=@toID AND fromID=@fromID  \r\n\t--\t\t--IF @srcID IS NOT NULL AND @srcID<>@id UPDATE om.items SET srcID=@srcID WHERE id=@id  \r\n\t--\t\tIF @srcID IS NULL  \r\n\t--\t\tBEGIN  \r\n\t--\t\t\tIF @fromID IS NOT NULL SELECT @companyID=srcID FROM api.items WHERE id=@fromID  \r\n\t--\t\t\tIF @companyID IS NOT NULL   \r\n\t--\t\t\tBEGIN  \r\n\t--\t\t\t\tSELECT TOP 1 @srcID=id FROM api.items WHERE hostID=1 AND classID=1004 AND fromID=@companyID AND toID=@personID  \r\n\t--\t\t\t\tIF @srcID IS NULL   \r\n\t--\t\t\t\tBEGIN  \r\n\t--\t\t\t\t\tINSERT om.items(hostID,classID,name) VALUES(1,1004,@name)  \r\n\t--\t\t\t\t\tSET @srcID=scope_identity()  \r\n\t--\t\t\t\t\tEXEC api.setAttribute @id=@srcID,@name='Company',@itemID=@companyID  \r\n\t--\t\t\t\t\tEXEC api.setAttribute @id=@srcID,@name='DisplayName',@itemID=@personID  \r\n\t--\t\t\t\t\tEXEC api.setAttribute @id=@srcID,@name='JobTitle',@value=@jobtitle  \r\n\t--\t\t\t\tEND  \r\n\t--\t\t\t\tUPDATE om.items SET srcID=@srcID WHERE id=@id  \r\n\t--\t\t\tEND  \r\n\t--\t\tEND  \r\n\t\t\t  \r\n\t--\t\t--IF @srcID IS NULL AND @toID IS NOT NULL AND @fromID IS NOT NULL SELECT @srcID=I.ID FROM api.items I WHERE classID=1004 AND hostID=1 AND toID=@toID AND fromID=@fromID  \r\n\t--\t\t--IF @srcID IS NULL AND @email IS NOT NULL SELECT @srcID=I.ID FROM api.items I INNER JOIN om.fields F ON I.classID=1004 AND I.hostID=1 AND F.id=I.id AND F.name='EmailAddresses0Address' AND F.value=@email  \r\n\t--\t\t--IF @srcID IS NULL AND @email2 IS NOT NULL SELECT @srcID=I.ID FROM api.items I INNER JOIN om.fields F ON I.classID=1004 AND I.hostID=1 AND F.id=I.id AND F.name='EmailAddresses2Address' AND F.value=@email2  \r\n\t--\t\t--IF @srcID IS NOT NULL AND @srcID<>@id UPDATE om.items SET srcID=@srcID WHERE id=@id  \r\n\t--\t\t----IF @personID IS NOT NULL AND(@srcID IS NULL OR @srcID<>@personID) UPDATE om.items SET srcID=@personID WHERE id=@id  \r\n\t--\t\t--IF @msg IS NOT NULL EXEC api.addMail @ToID=@personID,@hostID=@HostID,@pri=1,@subject='Een account',@msg=@msg--@name='mailAliconnectAccountAdd'  \r\n\t--\tEND  \r\n\t--\tSELECT TOP 1 @groupID=itemID,@userID=UserID,@ModUserID=ModUserId,@aid=aid FROM om.fields WHERE id=@id AND classID=1103 AND hostID=@ItemHostID  \r\n\t--\tIF @groupID IS NOT NULL BEGIN  \r\n\t--\t\tIF NOT EXISTS(select 0 from auth.users where id=@personID)   \r\n\t--\t\tBEGIN  \r\n\t--\t\t\tINSERT auth.users(id) VALUES(@personID)  \r\n\t--\t\t\t--EXEC api.addMail @AccountId=@id,@hostID=@HostID,@name='mailAliconnectAccountAdd'  \r\n\t--\t\tEND  \r\n\t--\t\tSET @userID=@personID  \r\n\t--\tEND  \r\n\t--\tRETURN  \r\n\t--\tSELECT @id id,@name name,@msg msg,@aid aid,@groupID groupID,@personID personID,@userID userID,@ItemHostID itemHostID,@companyID companyID,@email email,@email2 email2,@srcID srcID,@toID toID,@fromID fromID   \r\n\t--\tRETURN   \r\n  \r\n\t--\t-- STOP  \r\n\t--\t--RETURN  \r\n\t--\t--DECLARE @rights VARCHAR(10)  \r\n\t--\t--SELECT TOP 1 @aid=aid,@rights=rights FROM om.fields WHERE id=@id AND classID=1103 AND hostID=@hostID  \r\n\t--\t--IF @aid IS NOT NULL   \r\n\t--\t--BEGIN  \r\n\t--\t--\tIF NOT EXISTS(select 0 from auth.users where id=@toid)   \r\n\t--\t--\tBEGIN  \r\n\t--\t--\t\tINSERT auth.users(id) VALUES(@ToID)  \r\n\t--\t--\t\tEXEC api.addMail @AccountId=@id,@hostID=@HostID,@name='mailAliconnectAccountAdd'  \r\n\t--\t--\tEND  \r\n\t--\t--\tIF @rights IS NULL  \r\n\t--\t--\tBEGIN  \r\n\t--\t--\t\tUPDATE om.fields SET rights='1' WHERE aid=@aid  \r\n\t--\t--\t\tEXEC api.addMail @AccountId=@id,@hostID=@HostID,@name='mailHostGroupAdd'  \r\n\t--\t--\tEND  \r\n\t--\t--END  \r\n\t--\t--IF @CompanyID IS NULL  \r\n\t--\t--BEGIN  \r\n\t--\t--\tSELECT @CompanyID=itemID FROM om.fields WHERE id=@id AND name='Company'  \r\n\t--\t--\tSET @Company=ISNULL(@Company,@companyname)  \r\n\t--\t--\tIF @CompanyID IS NULL AND @company IS NOT NULL SELECT @CompanyID=id FROM api.items WHERE classid=1002 and name=@company  \r\n\t--\t--\tIF @CompanyID IS NULL SELECT @CompanyID=I.fromID FROM api.items I INNER JOIN om.fields F ON F.id=I.id AND I.classid=1004 AND I.ToID=@PersonID and F.name='EmailAddresses0Address' and value=@email  \r\n\t--\t--\tIF @CompanyID IS NULL SELECT @CompanyID=I.fromID FROM api.items I INNER JOIN om.fields F ON F.id=I.id AND I.classid=1004 AND I.ToID=@PersonID and F.name='EmailAddresses2Address' and value=@email  \r\n\t--\t--\tIF @CompanyID IS NULL SELECT @CompanyID=I.fromID FROM api.items I INNER JOIN om.fields F ON F.id=I.id AND I.classid=1004 and F.name='EmailAddresses2Address' and value=@email  \r\n\t--\t--\tIF @CompanyID IS NULL SELECT @CompanyID=I.fromID FROM api.items I INNER JOIN om.fields F ON F.id=I.id AND I.classid=1004 and F.name='EmailAddresses0Address' and value=@email2  \r\n\t--\t--\tIF @CompanyID IS NULL SELECT @CompanyID=I.fromID FROM api.items I INNER JOIN om.fields F ON F.id=I.id AND I.classid=1004 and F.name='EmailAddresses2Address' and value=@email2  \r\n\t--\t--\tIF @CompanyID IS NULL AND @company IS NOT NULL   \r\n\t--\t--\tBEGIN  \r\n\t--\t--\t\tINSERT om.items(hostID,classID,name) VALUES(1,1002,@companyname)  \r\n\t--\t--\t\tSET @CompanyID=scope_identity()  \r\n\t--\t--\t\tEXEC api.setAttribute @id=@CompanyID,@name='CompanyName',@Value=@company  \r\n\t--\t--\tEND  \r\n\t--\t--END  \r\n\t--\t--IF @FromID IS NULL OR @ToID IS NULL OR @CompanyID<>@FromID OR @PersonID<>@ToID  \r\n\t--\t--BEGIN  \r\n\t--\t--\tUPDATE om.items SET FromID=@CompanyID,ToID=@PersonID WHERE id=@id  \r\n\t--\t--\t--EXEC api.setAttribute @id=@id,@hostID=1,@name='DisplayName',@ClassID=1000,@ItemID=@PersonID  \r\n\t--\t--\t--EXEC api.setAttribute @id=@id,@hostID=1,@name='Company',@ClassID=1002,@ItemID=@CompanyID  \r\n\t--\t--END  \r\n\t--\t--SELECT TOP 1 @groupID=itemID,@userID=UserID,@ModUserID=ModUserId,@aid=aid FROM om.fields WHERE id=@id AND classID=1103 AND hostID=@hostID  \r\n\t--\t--IF @GroupID IS NOT NULL  \r\n\t--\t--BEGIN  \r\n\t--\t--\tIF NOT EXISTS(select 0 from auth.users where id=@toid)   \r\n\t--\t--\tBEGIN  \r\n\t--\t--\t\tINSERT auth.users(id) VALUES(@PersonID)  \r\n\t--\t--\t\tEXEC api.addMail @AccountID=@AccountID,@HostID=@id,@name='mailAliconnectAccountAdd'  \r\n\t--\t--\tEND  \r\n\t--\t--\tIF @userID IS NULL  \r\n\t--\t--\tBEGIN  \r\n\t--\t--\t\tUPDATE om.fields SET userID=@ModUserID WHERE aid=@aid  \r\n\t--\t--\t\tEXEC api.addMail @AccountId=@id,@name='mailHostGroupAdd'  \r\n\t--\t--\tEND  \r\n\t--\t--END  \r\n  \r\n  \r\n\t--END  \r\n  \r\n\t----SELECT @classid,@hostid,@keyname,@srcid,@id  \r\n  \r\n\t--ELSE IF @classID=1002 BEGIN -- Company  \r\n  \r\n  \r\n\t--\tIF @ItemHostID<>1  \r\n\t--\tBEGIN  \r\n\t--\t\tIF @srcID IS NULL  \r\n\t--\t\tBEGIN  \r\n\t--\t\t\tSET @value=fn.getAttribute(@id,'BusinessHomePage')  \r\n\t--\t\t\tIF @value IS NOT NULL SELECT @srcID=I.ID FROM api.items I INNER JOIN om.fields F ON I.classID=1002 AND I.www=1 AND I.hostID=1 AND F.id=I.id AND F.name='BusinessHomePage' AND F.value=@value  \r\n\t--\t\t\tIF @srcID IS NOT NULL AND @srcID<>@id EXEC api.setAttribute @id=@id,@idname='srcID',@itemID=@srcID  \r\n\t--\t\tEND  \r\n\t--\t\tIF @srcID IS NULL  \r\n\t--\t\tBEGIN  \r\n\t--\t\t\tSET @value=fn.getAttribute(@id,'EmailAddresses1Address')  \r\n\t--\t\t\tIF @value IS NOT NULL SELECT @srcID=I.ID FROM api.items I INNER JOIN om.fields F ON I.classID=1002 AND I.www=1 AND I.hostID=1 AND F.id=I.id AND F.name='EmailAddresses1Address' AND F.value=@value  \r\n\t--\t\t\tIF @srcID IS NOT NULL AND @srcID<>@id EXEC api.setAttribute @id=@id,@idname='srcID',@itemID=@srcID  \r\n\t--\t\tEND  \r\n\t--\t\tRETURN  \r\n\t--\tEND  \r\n\t--\tUPDATE om.items SET www=1 WHERE id=@id  \r\n\t--\tIF @KeyName IS NOT NULL   \r\n\t--\tBEGIN  \r\n  \r\n  \r\n  \r\n\t--\t\tSELECT @aid=aid,@contactID=itemID FROM om.fields WHERE id=@id AND name='Owner'  \r\n\t--\t\tIF @contactID IS NULL BEGIN  \r\n\t--\t\t\tSELECT @contactID=userID FROM om.items WHERE id=@id  \r\n\t--\t\t\tIF @contactID IS NOT NULL EXEC api.setAttribute @id=@id,@name='Owner',@itemID=@contactID  \r\n\t--\t\tEND  \r\n  \r\n\t--\t\t--SELECT @ItemHostID,@KeyName,@aid,@contactID RETURN  \r\n  \r\n  \r\n  \r\n\t--\t\tIF @contactID IS NULL RETURN  \r\n  \r\n\t--\t\tSELECT @UserID=ToID,@fromID=fromID,@toID=toID FROM api.items WHERE id=@contactID  \r\n\t--\t\t--SELECT @UserID,@contactID,@ItemHostID,@KeyName,@aid,@contactID RETURN  \r\n\t--\t\tIF @UserID IS NULL RETURN  \r\n\t--\t\tSELECT @AccountID=id FROM api.items WHERE hostID=@id AND classID=1004 AND srcID=@contactID  \r\n\t--\t\tIF @AccountID IS NULL  \r\n\t--\t\tBEGIN  \r\n\t--\t\t--SELECT @UserID,@contactID,@ItemHostID,@KeyName,@aid,@contactID RETURN -- DEBUG  \r\n\t--\t\t\tSET @value=fn.getAttribute(@contactID,'EmailAddresses0Address')  \r\n\t--\t\t--SELECT @value,@UserID,@contactID,@ItemHostID,@KeyName,@aid,@contactID RETURN -- DEBUG  \r\n\t--\t\t\tIF @value IS NULL SET @value=fn.getAttribute(@toID,'EmailAddresses0Address')  \r\n\t--\t\t\t--SELECT 'TEST',@value,@contactID,@toID,@fromID  \r\n\t--\t\t\tIF @value IS NULL RETURN  \r\n\t--\t\t\t--SELECT 'TEST',@classID  \r\n\t--\t\t\tINSERT om.items(hostID,classID,srcID,fromID,toID,name)   \r\n\t--\t\t\tSELECT @id,1004,@contactID,fromID,toID,name  \r\n\t--\t\t\tFROM api.items WHERE id=@contactID  \r\n\t--\t\t\tSET @AccountID=scope_identity()  \r\n\t--\t\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='EmailAddresses0Address',@value=@value  \r\n\t--\t\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='DisplayName',@itemID=@toID  \r\n\t--\t\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='Company',@itemID=@fromID  \r\n\t--\t\tEND  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=0,@masterID=@id,@keyname='ceo',@idx=1,@detailID=@accountID  \r\n\t--\t\tUPDATE om.items SET userID=@userID WHERE id=@id  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=1162,@keyname='maintask',@name='Organisatie taken',@id=@itemId OUTPUT  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=0,@masterID=@id,@keyname='maintask',@name='Organisatie taken',@idx=1,@detailID=@itemId  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=1004,@keyname='support',@name='Support Aliconnect',@srcID=2750880,@id=@itemId OUTPUT  \r\n\t--\t\tIF NOT EXISTS(SELECT 0 FROM auth.users WHERE id=@UserID)   \r\n\t--\t\tBEGIN  \r\n\t--\t\t\tINSERT auth.users(id) VALUES(@UserID)  \r\n\t--\t\t\tEXEC api.addMail @AccountID=@AccountID,@HostID=@id,@name='mailAliconnectAccountAdd'  \r\n\t--\t\tEND  \r\n\t--\t\t--SELECT @GroupID=ItemID FROM om.fields WHERE id=@UserID AND F.hostID=@HostID AND F.classID=1103  \r\n\t--\t\t--IF @GroupID IS NULL  \r\n\t--\t\tSELECT @groupID=id FROM api.items WHERE classID=1103 AND hostID=@id AND name='Admin'  \r\n\t--\t\tIF @groupID IS NULL  \r\n\t--\t\tBEGIN  \r\n\t--\t\t\tEXEC api.getItemLink @hostID=@id,@classID=1103,@name='Admin',@id=@groupID OUTPUT  \r\n\t--\t\t\t--INSERT om.items(hostID,classID,name) VALUES(@id,1103,'Admin')  \r\n\t--\t\t\t--SELECT @groupID=scope_identity()  \r\n\t--\t\t\tINSERT auth.groupClass(groupID,classID,config) SELECT @groupID,classID,config FROM auth.groupClass WHERE groupID=2619989 -- aliconnect Admin  \r\n\t--\t\t\tEXEC api.addMail @AccountID=@UserID,@HostID=@HostID,@name='mailToOwnerGroupAdminAdd'  \r\n\t--\t\tEND  \r\n\t--\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='groupID',@value='Admin',@ItemID=@groupID,@classID=1103,@moduserID=@userID,@rights='R'  \r\n\t--\t\t--SELECT @groupID  \r\n\t--\t\t--RETURN  \r\n\t--\t\t--IF NOT EXISTS(SELECT 0 FROM om.fields WHERE id=@AccountID AND hostID=@id AND classID=1103)  \r\n\t--\t\t--BEGIN  \r\n\t--\t\t--\t--SELECT @AccountID,@id,@userID,@HostID,@groupid  \r\n\t--\t\t--\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='groupID',@value='Admin',@ItemID=@groupID,@classID=1103,@moduserID=@userID,@rights='R'  \r\n\t--\t\t--\tEXEC api.addMail @AccountID=@AccountID,@HostID=@id,@name='mailHostGroupAdd'  \r\n\t--\t\t--END  \r\n\t--\t\t--IF NOT EXISTS(SELECT 0 FROM om.fields WHERE id=@id AND classID=1004 AND rights>'')  \r\n\t--\t\t--BEGIN  \r\n\t--\t\t--\tEXEC api.setAttribute @id=@id,@hostID=1,@name='owner',@value='X',@ItemID=@AccountID,@UserID=@PersonID,@classID=1004  \r\n\t--\t\t--\tEXEC api.addMail @AccountID=@AccountID,@HostID=@id,@name='mailToOwnerAccountAdd'  \r\n\t--\t\t--END  \r\n\t--\t\t--SELECT @keyname  \r\n  \r\n  \r\n\t--\t\tRETURN  \r\n  \r\n  \r\n\t--\t\tUPDATE om.fields SET rights='R',moduserID=@userID WHERE id=@id AND name IN('owner','hostName')  \r\n\t--\t\tSET @KeyName=REPLACE(REPLACE(@KeyName,' ',''),'.','')  \r\n\t--\t\tIF NOT EXISTS(SELECT 0 FROM auth.host WHERE id=@id) INSERT auth.host(id,mailAccountAid) VALUES(@id,2)  \r\n\t--\t\t--BEGIN  \r\n\t--\t\t--\tINSERT auth.host(id,mailAccountAid) VALUES(@id,2)  \r\n\t--\t\t--\tEXEC api.addMail @AccountID=@UserID,@HostID=@HostID,@name='mailToOwnerHostAdd'  \r\n\t--\t\t--END  \r\n\t--\t\tIF @Config IS NULL UPDATE om.items SET config=I.config FROM(SELECT config FROM om.items WHERE id=1) I WHERE om.items.id=@id  \r\n\t--\t\t--RETURN  \r\n\t--\t\t--SELECT @SiteID=id FROM api.items WHERE hostID=@id AND classID=1091 AND DetailID IS NULL  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=1091,@keyName=@keyname,@hasChildren=1,@masterID=@id,@id=@siteID  OUTPUT  \r\n\t--\t\tEXEC api.setAttribute @id=@SiteID,@hostID=@id,@name='Company',@classID=1002,@itemID=@id  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=1092,@masterID=@SiteID,@keyname='Welkom',@idx=0,@state='published',@id=@pageID  OUTPUT  \r\n\t--\t\tUPDATE om.items SET www=1,startDT=GETUTCDATE() WHERE id=@pageID  \r\n\t--\t\t--SELECT @hostid,@id,@SiteID,@pageID  \r\n\t--\t\tEXEC api.setAttribute @id=@pageID,@hostID=@id,@name='Website',@value='Website',@classID=1091,@typeID=11,@itemID=@SiteID  \r\n\t--\t\tEXEC api.setAttribute @id=@pageID,@hostID=@id,@name='Title',@value='Welkom'  \r\n\t--\t\tEXEC api.setAttribute @id=@pageID,@hostID=@id,@name='Description',@value='Welkom op deze site.'  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=1092,@masterID=@SiteID,@keyname='Footer',@idx=99,@state='published',@id=@footerID  OUTPUT  \r\n\t--\t\tEXEC api.setAttribute @id=@footerID,@hostID=@id,@name='Webpage',@value='Webpage',@classID=1092,@typeID=11,@itemID=@SiteID  \r\n\t--\t\tEXEC api.getItemLink @hostID=@id,@classID=1092,@masterID=@footerID,@keyname='Contact',@idx=0,@state='published',@id=@itemID  OUTPUT  \r\n\t--\t\tEXEC api.setAttribute @id=@itemID,@hostID=@id,@name='Webpage',@value='Webpage',@classID=1092,@typeID=11,@itemID=@footerID  \r\n\t--\t\t--EXEC api.addMail @AccountID=@UserID,@HostID=@HostID,@name='mailToOwnerSiteAdded'  \r\n\t--\t\t--IF NOT EXISTS(SELECT 0 FROM api.items WHERE hostID=@id AND masterID=@AccountID AND DetailID=@SiteID AND classid=1091)  \r\n\t--\t\t--\tINSERT om.items(hostID,classID,masterID,detailID,name) VALUES(@id,1091,@AccountID,@SiteID,@Keyname)  \r\n\t--\tEND  \r\n\t--END \r\n\r\nGO\r\n"},"auth.addUserMsg":{"code":"\r\nIF OBJECT_ID('auth.addUserMsg') IS NOT NULL DROP PROCEDURE auth.addUserMsg;\r\nGO\r\nCREATE PROCEDURE [auth].[addUserMsg] @userID INT,@name VARCHAR(50),@itemID INT=NULL,@byID INT=NULL    \r\nAS   \r\n\tIF NOT EXISTS(SELECT 0 FROM auth.userMsg WHERE userID=@userID AND name=@name AND ISNULL(itemID,0)=ISNULL(@itemID,0))    \r\n\t\tINSERT auth.userMsg(userID,name,itemID,createdByID)VALUES(@userID,@name,@itemID,@byID) \r\n\r\nGO\r\n"},"auth.delCompany":{"code":"\r\nIF OBJECT_ID('auth.delCompany') IS NOT NULL DROP PROCEDURE auth.delCompany;\r\nGO\r\nCREATE PROCEDURE [auth].[delCompany] @name VARCHAR(100)   \r\nAS   \r\n\tDECLARE @id INT   \r\n\tSELECT @id=id FROM om.items WHERE hostID=1 AND classID=1002 AND name=@name   \r\n\tIF @id IS NULL RETURN   \r\n\tDELETE om.items WHERE id=@id    \r\n\tDELETE om.items WHERE fromID=@id    \r\n\tDELETE om.items WHERE srcID=@id \r\n\r\nGO\r\n"},"mail.getQueue":{"code":"\r\nIF OBJECT_ID('mail.getQueue') IS NOT NULL DROP PROCEDURE mail.getQueue;\r\nGO\r\nCREATE PROCEDURE [mail].[getQueue]   \r\nAS   \r\n\tSELECT TOP 1   \r\n\t\tM.aid   \r\n\t\t,M.msg   \r\n\t\t,S.SMTPHost   \r\n\t\t,S.SMTPSecure   \r\n\t\t,S.SMTPPort AS Port   \r\n\t\t--,H.name AS Hostname   \r\n\t\t--,H.Basecolor   \r\n\t\t--,ISNULL(M.hostname,'aliconnect') hostname   \r\n\t\t,A.username+'@'+A.host AS Username   \r\n\t\t,A.username+'@'+A.host AS FromEmail   \r\n\t\t,M.Hostname   \r\n\t\t,A.Password   \r\n\t\t,CONVERT(TEXT,M.Subject) Subject   \r\n\t\t,A.name ReplyToName   \r\n\t\t--,M.ToId   \r\n\t\t--,TE.email ToEmail   \r\n\t\t--,TE.name ToName   \r\n\t\t--,'mailer@aliconnect.nl' FromEmail   \r\n\t\t--,'Aliconnect' FromName   \r\n\t\t--,'mailer@aliconnect.nl' ReplyToEmail   \r\n\t\t--,'Aliconnect' ReplyToName   \r\n\tFROM   \r\n\t\tmail.queue M    \r\n\t\t--LEFT OUTER JOIN auth.host H ON H.id = M.hostID   \r\n\t\tLEFT OUTER JOIN auth.mailAccount A ON A.host = 'aliconnect.nl' AND A.username = 'mailer'   \r\n\t\tLEFT OUTER JOIN auth.mailServer S ON S.host = A.host   \r\n\t\t--LEFT OUTER JOIN auth.useremail TE ON TE.hostID=H.id AND TE.userID=M.toID   \r\n\tWHERE   \r\n\t\tM.sendDT IS NULL   \r\n\tORDER BY M.pri,M.aid \r\n\r\nGO\r\n"},"shop.getPurchaseOrders":{"code":"\r\nIF OBJECT_ID('shop.getPurchaseOrders') IS NOT NULL DROP PROCEDURE shop.getPurchaseOrders;\r\nGO\r\nCREATE PROCEDURE [shop].[getPurchaseOrders] @clientId INT,@hostID INT   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\tDECLARE @T TABLE(quant INT,extra VARCHAR(500),id INT,obj VARCHAR(MAX),ArtNr VARCHAR(100),cp FLOAT,pd FLOAT,Lev VARCHAR(100),LevId INT)   \r\n\tINSERT @T   \r\n\tSELECT R.quant,R.extra,I.id,I.obj,ArtNr,P.cp,P.pd,VS.value AS Lev,VS.itemId AS LevId   \r\n\tFROM om.orderrow R   \r\n\tINNER JOIN om.items I ON I.id = R.itemId AND R.clientId=@clientId AND R.hostID=@hostID AND orderedDT IS NULL   \r\n\tINNER JOIN(SELECT id,name,value FROM om.attributes I ) X   \r\n\tPIVOT( MAX(value) FOR name IN(ArtNr,cp,pd,sc,cd) ) P ON P.id = I.id    \r\n\tINNER JOIN om.attributes VS ON VS.id=I.id AND VS.name='Supplier' --AND VS.itemId IS NOT NULL   \r\n\t--SELECT * FROM @T   \r\n\tSELECT * FROM(SELECT id,name,value FROM om.attributes I WHERE id=@hostID) X    \r\n\tPIVOT(MAX(value) FOR name IN(CompanyName,CompanyEmail,CompanyEmailInvoice,BusinessAddressStreet,BusinessAddressNumber,BusinessAddressAdd,BusinessAddressPostalCode,BusinessAddressCity,BusinessAddressTown,BusinessAddressState,BusinessAddressCountry,OtherAddressStreet,OtherAddressNumber,OtherAddressAdd,OtherAddressPostalCode,OtherAddressCity,OtherAddressTown,OtherAddressState,OtherAddressCountry,BTWnr)) P2    \r\n\tSELECT *,21 AS btw FROM    \r\n\t(SELECT id,name,value FROM om.attributes I INNER JOIN(SELECT DISTINCT LevId  FROM @T) T ON T.LevId=I.id) X    \r\n\tPIVOT(MAX(value) FOR name IN(CompanyName,CompanyEmail,CompanyEmailInvoice,BusinessAddressStreet,BusinessAddressNumber,BusinessAddressAdd,BusinessAddressPostalCode,BusinessAddressCity,BusinessAddressTown,BusinessAddressState,BusinessAddressCountry,OtherAddressStreet,OtherAddressNumber,OtherAddressAdd,OtherAddressPostalCode,OtherAddressCity,OtherAddressTown,OtherAddressState,OtherAddressCountry,BTWnr)) P2    \r\n\t--SELECT    \r\n\t--\tT.LevId AS id,   \r\n\t--\tP.*,   \r\n\t--\t21 btw,   \r\n\t--\t0 betkort   \r\n\t    \r\n\t--FROM(SELECT DISTINCT LevId FROM @T) T   \r\n\t--INNER JOIN om.items I ON I.id = T.LevId   \r\n\t--INNER JOIN    \r\n\t--ON P.id = I.id    \r\n\tSELECT obj,cp amount,pd discount,quant,ArtNr,'' unit,LevId FROM @T   \r\n\tUPDATE om.orderrow SET orderedDT=GETUTCDATE() WHERE clientId=@clientId AND hostID=@hostID AND orderedDT IS NULL   \r\n\tUPDATE om.items SET om.items.quant=ISNULL(om.items.quant,0)+T.quant FROM @T T WHERE om.items.id = T.id \r\n\r\nGO\r\n"},"api.setItemAttributeCount":{"code":"\r\nIF OBJECT_ID('api.setItemAttributeCount') IS NOT NULL DROP PROCEDURE api.setItemAttributeCount;\r\nGO\r\nCREATE PROCEDURE [api].[setItemAttributeCount] @itemID INT,@fieldID INT=NULL,@value VARCHAR(MAX),@attributeName VARCHAR(100)=NULL,@StandardOutput VARCHAR(50)=NULL,@Quality VARCHAR(50)=NULL  \r\nAS  \r\n\tDECLARE @count INT  \r\n\t--,@StandardOutput VARCHAR(50),@Quality VARCHAR(50),@MinRawValue FLOAT,@MinEngValue FLOAT,@MaxEngValue FLOAT,@MaxRawValue FLOAT,@MaxValidValue FLOAT,@MinValidValue FLOAT,@Hysteresis FLOAT,@engValue FLOAT  \r\n  \r\n\tSET @count = CASE WHEN @value IS NULL THEN 0 WHEN @value>'' THEN 1 ELSE -1 END  \r\n\tIF @attributeName IS NOT NULL  \r\n\tBEGIN  \r\n\t\tIF NOT EXISTS(SELECT 0 FROM om.field WHERE name=@attributeName) INSERT om.field(name)VALUES(@attributeName)  \r\n\t\tSELECT @fieldID=id FROM om.field WHERE name=@attributeName  \r\n\tEND  \r\n\tIF @fieldID IS NULL SET @fieldID=1738  \r\n  \r\n  \r\n\t--SELECT @StandardOutput=value FROM om.attributes WHERE id=@itemID AND fieldID=1889  \r\n  \r\n  \r\n\t--IF @value>'' AND ISNUMERIC(@value)=1  \r\n\t--BEGIN  \r\n\t--\tSELECT @MinValidValue=value FROM om.attributes WHERE id=@itemID AND fieldID=1883  \r\n\t--\tSELECT @MaxValidValue=value FROM om.attributes WHERE id=@itemID AND fieldID=1882  \r\n\t--\tSET @Quality='Valid'  \r\n\t--\tIF @MinValidValue>@value OR @MaxValidValue<@value SET @Quality='NotValid'  \r\n\t--\tELSE  \r\n\t--\tBEGIN  \r\n\t--\t\tEXEC api.setAttribute @id=@itemID,@fieldID=@fieldID,@value=@value  \r\n\t--\t\tEXEC api.setAttribute @id=@itemID,@fieldID=1547,@value=@Quality  \r\n\t--\t\t--SELECT @Quality=value FROM om.attributes WHERE id=@itemID AND fieldID=1547  \r\n  \r\n\t--\t\tSELECT @MinRawValue=value FROM om.attributes WHERE id=@itemID AND fieldID=1878  \r\n\t--\t\tIF @MinRawValue IS NOT NULL  \r\n\t--\t\tBEGIN  \r\n\t--\t\t\tSELECT @MaxRawValue=value FROM om.attributes WHERE id=@itemID AND fieldID=1881  \r\n\t--\t\t\tSELECT @MinEngValue=value FROM om.attributes WHERE id=@itemID AND fieldID=1879  \r\n\t--\t\t\tSELECT @MaxEngValue=value FROM om.attributes WHERE id=@itemID AND fieldID=1880  \r\n\t--\t\t\tSET @engValue=(@MaxEngValue-@MinEngValue)\/(@MaxRawValue-@MinRawValue)*(@Value-@MinRawValue)+@MinEngValue  \r\n\t--\t\tEND  \r\n  \r\n\t--\t\t--SELECT @Hysteresis=value FROM om.attributes WHERE id=@itemID AND fieldID=1884  \r\n\t--\tEND  \r\n\t--END  \r\n  \r\n  \r\n\tDECLARE @TM TABLE(level INT,id INT)  \r\n\t;WITH P(level,id) AS(  \r\n\t\tSELECT   \r\n\t\t\t0,@itemId  \r\n\t\tUNION ALL    \r\n\t\tSELECT   \r\n\t\t\tlevel+1,I.masterId  \r\n\t\t\tFROM  P INNER JOIN om.items I ON I.id = P.id and level<50 AND I.masterID IS NOT NULL  \r\n\t)  \r\n\tINSERT @TM SELECT * FROM P   \r\n  \r\n\tINSERT om.itemAttributeCount(itemID,fieldID)  \r\n\tSELECT T.id,@fieldID   \r\n\tFROM @TM T  \r\n\tLEFT OUTER JOIN om.itemAttributeCount IAC ON IAC.itemID=T.id AND IAC.fieldID=@fieldID  \r\n\tWHERE IAC.fieldID IS NULL  \r\n  \r\n\tUPDATE om.itemAttributeCount SET attributeCount=attributeCount+@count  \r\n\tFROM @TM T  \r\n\tWHERE om.itemAttributeCount.itemID=T.id AND om.itemAttributeCount.fieldID=@fieldID  \r\n\t  \r\n\tSELECT T.*,IAC.*,@attributeName as attributeName,I.classID,I.class,GETUTCDATE() AS ts,@StandardOutput StandardOutput, @Quality Quality  \r\n\tFROM @TM T  \r\n\tINNER JOIN api.citems I ON I.id=T.id  \r\n\tINNER JOIN om.itemAttributeCount IAC ON IAC.itemID=T.id AND IAC.fieldID=@fieldID  \r\n\tORDER BY T.level  \r\n  \r\n\t--SELECT I.id,I.title,I.name,A.*   \r\n\t--FROM api.items I  \r\n\t--LEFT OUTER JOIN(SELECT id,name,value FROM om.attributes WHERE fieldID IN(1883,1882,1878,1881,1879,1880))X PIVOT(MAX(value)FOR name IN(MinValidValue,MaxValidValue,MinRawValue,MaxRawValue,MinEngValue,MaxEngValue)) A ON A.id=I.id  \r\n\t--WHERE I.id=@itemID  \r\n  \r\n\t--SELECT D.id,D.title,D.name,@engValue Value,A.*   \r\n\t--FROM api.items I  \r\n\t--INNER JOIN api.items D ON D.id=I.detailID  \r\n\t--LEFT OUTER JOIN(SELECT id,name,value FROM om.attributes WHERE fieldID IN(1888,1889,1875,1876,1884,1892,1893))X PIVOT(MAX(value)FOR name IN(AttributeType,ValueType,LowWarning,HighWarning,LowAlarm,HighAlarm,Hysteresis)) A ON A.id=D.id  \r\n\t--WHERE I.masterID=@itemID \r\n\r\nGO\r\n"},"api.setItemAttributeId":{"code":"\r\nIF OBJECT_ID('api.setItemAttributeId') IS NOT NULL DROP PROCEDURE api.setItemAttributeId;\r\nGO\r\nCREATE PROCEDURE [api].[setItemAttributeId] @classID INT=NULL,@itemID INT=NULL  \r\nAS   \r\n\tDECLARE @T TABLE(aid INT,name VARCHAR(500) collate Latin1_General_CS_AI)   \r\n\tINSERT @T   \r\n\tSELECT aid,name   \r\n\tFROM om.attributes   \r\n\tWHERE fieldid IS NULL AND id IN(SELECT id FROM om.items WHERE classID=@classID OR id=@itemID)   \r\n\tSELECT * FROM @T  \r\n  \r\n\tINSERT om.field(name)   \r\n\tSELECT DISTINCT name FROM @T WHERE name NOT IN(SELECT name FROM om.field)   \r\n\tUPDATE om.attributes SET om.attributes.fieldID=F.id FROM @T T INNER JOIN om.field F ON F.name=T.name    \r\n\tWHERE om.attributes.aid=T.aid AND om.attributes.fieldID IS NULL \r\n\r\nGO\r\n"},"api.setItemMerge":{"code":"\r\nIF OBJECT_ID('api.setItemMerge') IS NOT NULL DROP PROCEDURE api.setItemMerge;\r\nGO\r\nCREATE PROCEDURE [api].[setItemMerge] @oldid INT, @newid INT    \r\nAS    \r\n\tUPDATE om.attributes SET id=@newid WHERE id=@oldid    \r\n\tUPDATE om.attributes SET itemid=@newid WHERE itemid=@oldid    \r\n\tUPDATE om.items SET toID=@newid WHERE toid=@oldid    \r\n\tUPDATE om.items SET fromID=@newid WHERE fromid=@oldid    \r\n\tUPDATE om.items SET srcID=@newid WHERE srcid=@oldid    \r\n\tUPDATE om.items SET hostID=@newid WHERE hostid=@oldid    \r\n\tUPDATE om.items SET masterID=@newid WHERE masterID=@oldid    \r\n\tUPDATE om.link SET fromid=@newid WHERE fromid=@oldid    \r\n\tUPDATE om.link SET toid=@newid WHERE toid=@oldid    \r\n\tUPDATE auth.email set id=@newid WHERE id=@oldid    \r\n\tDELETE om.items WHERE id=@oldid \r\n\r\nGO\r\n"},"auth.delAccount":{"code":"\r\nIF OBJECT_ID('auth.delAccount') IS NOT NULL DROP PROCEDURE auth.delAccount;\r\nGO\r\nCREATE PROCEDURE [auth].[delAccount] @email VARCHAR(100)=NULL,@userID INT=NULL   \r\nAS   \r\n\tIF @userID IS NULL SELECT @userID=id FROM auth.email WHERE email=@email   \r\n\tIF @userid IS NULL RETURN   \r\n\t--UPDATE om.items SET srcID = NULL where srcID IN(SELECT id FROM om.items WHERE hostID=1 AND classID=1004 AND toID=@userID)   \r\n\tUPDATE om.items SET deletedDT=GETUTCDATE() WHERE hostID=1 AND classID=1004 AND toID=@userID   \r\n\tUPDATE om.items SET deletedDT=GETUTCDATE() WHERE id=@userID   \r\n\t--DELETE auth.users WHERE id=@userID   \r\n\t--DELETE om.items WHERE id=@userID   \r\n\t--DELETE auth.email WHERE id=@userID \r\n\r\nGO\r\n"},"auth.getPerson":{"code":"\r\nIF OBJECT_ID('auth.getPerson') IS NOT NULL DROP PROCEDURE auth.getPerson;\r\nGO\r\nCREATE PROCEDURE [auth].[getPerson] @email VARCHAR(500),@PersonID INT OUTPUT   \r\nAS   \r\n\tDECLARE @aid INT   \r\n\tSELECT @aid=aid,@personId=id FROM auth.email WHERE email=@email   \r\n\tIF @aid IS NULL   \r\n\tBEGIN   \r\n\t\tINSERT auth.email(email) VALUES(@email)   \r\n\t\tSET @aid=@@identity    \r\n\tEND   \r\n\tIF @PersonID IS NULL   \r\n\tBEGIN   \r\n\t\tINSERT om.items(classID,name,hostID,www) VALUES(1000,@email,1,1)   \r\n\t\tSET @PersonID=scope_identity()   \r\n\t\tUPDATE auth.email SET id=@PersonID WHERE aid=@aid   \r\n\tEND \r\n\r\nGO\r\n"},"auth.setEmail":{"code":"\r\nIF OBJECT_ID('auth.setEmail') IS NOT NULL DROP PROCEDURE auth.setEmail;\r\nGO\r\nCREATE PROCEDURE [auth].[setEmail] @email VARCHAR(500),@id INT=NULL   \r\nAS   \r\n\tDECLARE @aid INT,@PersonID INT,@ClassID INT,@SrcID INT   \r\n\tSELECT @aid=aid,@PersonID=id FROM auth.email WHERE email=@email   \r\n\tIF @aid IS NULL INSERT auth.email(email,id) VALUES(@email,@id)   \r\n\tSELECT @ClassID=ClassID,@SrcID=SrcID FROM om.items WHERE id=@ID   \r\n\tIF @ClassID=1000 SET @SrcID=@Id   \r\n\tIF @PersonID IS NULL UPDATE auth.email SET id=@SrcID WHERE aid=@aid \r\n\r\nGO\r\n"},"api.delItem":{"code":"\r\nIF OBJECT_ID('api.delItem') IS NOT NULL DROP PROCEDURE api.delItem;\r\nGO\r\nCREATE PROCEDURE [api].[delItem] @id VARCHAR(50), @userID INT=NULL, @hostID INT=NULL   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\t;WITH P( id,level,masterId,name)    \r\n\tAS (    \r\n\t\tSELECT I.id,0,I.masterId,I.name   \r\n\t\t\tFROM api.items I   \r\n\t\t\tWHERE I.id = @id   \r\n\t\tUNION ALL   \r\n\t\tSELECT I.id,level+1,I.masterId,I.name   \r\n\t\tFROM P INNER JOIN api.items I ON I.masterId = P.id    \r\n\t)    \r\n\tUPDATE om.items SET deletedDT=GETUTCDATE(),deletedById=@userID WHERE id IN(SELECT id FROM P)   \r\n\tSELECT CONVERT(VARCHAR(20),@hostID)+'\/'+RIGHT(@id, 3)+'\/'+@id AS path \r\n\r\nGO\r\n"},"api.getDeviceTree":{"code":"\r\nIF OBJECT_ID('api.getDeviceTree') IS NOT NULL DROP PROCEDURE api.getDeviceTree;\r\nGO\r\nCREATE PROCEDURE [api].[getDeviceTree] @hostID INT=NULL,@hostUID VARCHAR(50)=NULL,@deviceUID VARCHAR(100)=NULL,@deviceID INT=NULL,@name VARCHAR(50)   \r\nAS   \r\n   \r\n \t;WITH P(level, id, name) AS(    \r\n\t\tSELECT 0,id,name FROM api.items WHERE id=@deviceID   \r\n\t\tUNION ALL   \r\n\t\tSELECT level+1,I.id,I.name FROM P INNER JOIN api.items I ON I.masterID = P.id AND level<7   \r\n\t)   \r\n\tSELECT @deviceID=id FROM P WHERE name=@name   \r\n   \r\n\t--DECLARE @id INT   \r\n\t--SELECT @id=I.id FROM api.items I INNER JOIN api.items H ON H.id=@hostID AND H.uid=@hostUID AND I.uid=@deviceUID--I.keyname=@name   \r\n\t--IF @deviceID IS NULL SELECT @deviceID=I.id FROM api.items I WHERE I.classID=2107 AND I.uid=@deviceUID   \r\n   \r\n\tSELECT D.name typical,P.idx,D.id--,F.name,F.value title,F.typeID,F.aid    \r\n\tFROM api.items P    \r\n\tINNER JOIN api.items D ON P.masterID=@deviceID AND D.id=P.detailID    \r\n\t--LEFT OUTER JOIN om.attributes F ON F.id = D.id AND F.typeID IN(1,2)    \r\n\tORDER BY P.keyname,D.name,P.idx--,F.name \r\n\r\nGO\r\n"},"api.getHostIndex":{"code":"\r\nIF OBJECT_ID('api.getHostIndex') IS NOT NULL DROP PROCEDURE api.getHostIndex;\r\nGO\r\nCREATE PROCEDURE [api].[getHostIndex] @hostID INT=NULL,@host VARCHAR(50)=NULL,@httpdomainhost VARCHAR(50)=NULL,@key VARCHAR(50)=NULL,@appName VARCHAR(50)=NULL,@pagename VARCHAR(50)=NULL,@app BIT=null,@page BIT=null   \r\nAS   \r\n\tDECLARE @appID INT,@pageID INT,@hostUID VARCHAR(50),@appUID VARCHAR(50),@title VARCHAR(500),@description VARCHAR(MAX),@files VARCHAR(MAX)   \r\n\t--SELECT * FROM auth.app WHERE convert(varchar(50),uid)=@key   \r\n\tIF @key IS NOT NULL SELECT @appID=id,@appUID=uid,@appName=name,@hostID=hostID FROM auth.app WHERE convert(varchar(50),uid)=@key   \r\n\tIF @hostID IS NULL SELECT @hostID=id FROM auth.host H WHERE H.name=@host OR(@host IS NULL AND H.domain=@httpdomainhost)   \r\n\t--SELECT @hostID   \r\n\tIF @app=1 AND @appID IS NULL SELECT @appID=id,@appUID=uid,@appName=name FROM auth.app WHERE hostID=@hostID AND name=isnull(@appName,'')   \r\n\tIF @app=1 AND @appID IS NULL SELECT @appID=id,@appUID=uid,@appName=name FROM auth.app WHERE hostID=@hostID AND name=''   \r\n\tELSE IF @page=1 AND @pagename IS NOT NULL SELECT TOP 1 @pageID=id,@pagename=name,@description=subject,@files=files FROM api.items WHERE hostID=@hostID AND classID=1092 AND keyname IS NOT NULL AND keyname=@pagename   \r\n\tELSE IF @page=1 SELECT TOP 1 @pageID=id,@pagename=name,@description=subject,@files=files FROM api.items WHERE hostID=@hostID AND classID=1092    \r\n\t--SELECT @hostID=id FROM auth.host WHERE name=@host OR(@host IS NULL AND domain=@domain)   \r\n\t--SELECT @hostID hostID,@hostUID hostUID,@appID appID,@appUID appUID   \r\n\tSELECT TOP 1    \r\n\tCONVERT(VARCHAR(50),H.uid) hostUID,H.id hostID,H.name host,@appID appID,@appUID appUID,@appName appName,@pageID pageID,@pagename title,@description description,@files files   \r\n\tFROM auth.host H    \r\n\tWHERE H.id=@hostID --OR H.name=@host OR(@host IS NULL AND H.domain=@domain) \r\n\r\nGO\r\n"},"api.getItemAttributes":{"code":"\r\nIF OBJECT_ID('api.getItemAttributes') IS NOT NULL DROP PROCEDURE api.getItemAttributes;\r\nGO\r\nCREATE PROCEDURE [api].[getItemAttributes] @id INT=NULL    \r\nAS    \r\n\t--get all item properties from source tree  \r\n\tSET NOCOUNT ON;SET TEXTSIZE 2147483647;    \r\n\t;WITH P ( id,srcID,level) AS (     \r\n\t\tSELECT id,srcID,0 FROM api.items WHERE id=@id     \r\n\t\tUNION ALL    \r\n\t\tSELECT I.id,I.srcID,level+1 FROM P INNER JOIN api.items I ON I.id = P.srcID AND level<20    \r\n\t)    \r\n\tSELECT P.level    \r\n\t\t,@id id    \r\n\t\t,A.aid    \r\n\t\t,A.www    \r\n\t\t,A.name    \r\n\t\t,ISNULL(CONVERT(TEXT,I.name),A.value) as value    \r\n\t\t,A.userID    \r\n\t\t,A.itemID    \r\n\t\t,A.hostID    \r\n\t\t,A.rights    \r\n\t\t,A.modDt    \r\n\t\t,A.moduserID    \r\n\tFROM    \r\n\t\tP    \r\n\t\tINNER JOIN om.attributes A ON A.id = P.id     \r\n\t\tLEFT OUTER JOIN api.items I ON I.id = A.itemID     \r\n\tWHERE    \r\n\t\tA.value>'' OR I.name>''     \r\n\tORDER BY level DESC \r\n\r\nGO\r\n"},"api.getItemFile":{"code":"\r\nIF OBJECT_ID('api.getItemFile') IS NOT NULL DROP PROCEDURE api.getItemFile;\r\nGO\r\nCREATE PROCEDURE [api].[getItemFile]     \r\n\t@sessionId VARCHAR(50) = NULL,     \r\n\t@host VARCHAR(500) = NULL,    \r\n\t@hostID INT = NULL,    \r\n\t@userID INT = NULL,    \r\n\t@hostname VARCHAR(500) = NULL,    \r\n\t@name VARCHAR(500) = NULL,    \r\n\t@path VARCHAR(500) = NULL,    \r\n\t@root VARCHAR(500) = NULL,    \r\n\t@src VARCHAR(500) = NULL,    \r\n\t@srcs VARCHAR(500) = NULL,    \r\n\t@size VARCHAR(500) = NULL,    \r\n\t@ext VARCHAR(500) = NULL,    \r\n\t@type VARCHAR(500) = NULL,    \r\n\t@id VARCHAR(10) = NULL,    \r\n\t@sync BIT = NULL,    \r\n\t@itemId VARCHAR(10) = NULL,    \r\n\t@lastModifiedDate VARCHAR(500) = NULL    \r\nAS    \r\n\tSET NOCOUNT ON    \r\n\tSET DATEFORMAT DMY    \r\n\tDECLARE @groupID INT, @uid UNIQUEIDENTIFIER, @prefix VARCHAR(250)    \r\n\tIF @hostID IS NULL SELECT @groupID=groupID,@hostID=hostID,@userID=userID FROM  api.hostAccountGet(@host,@sessionID);     \r\n\t--EXEC auth.userGet @sessionId=@sessionId, @host=@host, @groupID=@groupID OUTPUT, @hostID=@hostID OUTPUT, @userID=@userID OUTPUT    \r\n\tSELECT @host=keyname FROM api.items WHERE id=@hostID    \r\n\t--SET @host=REPLACE(REPLACE(REPLACE(@host,'.aliconnect',''),'.nl',''),'.','')    \r\n\tIF ISNULL(@id,0) = 0    \r\n\tBEGIN    \r\n\t\tSET @uid = newid()    \r\n\t\tSET @src='\/shared\/'+CONVERT(VARCHAR(10),@hostID)+'\/'+RIGHT(@itemId, 3)+'\/'+@itemId+'\/'+REPLACE(CONVERT(VARCHAR(250),@uid),'-','')+'\/'+REPLACE(@name,' ','_')    \r\n\t\tINSERT om.files (uid,itemId,userID,hostID,host,name,ext,type,src,srcs,size,lastModifiedDate)     \r\n\t\tSELECT @uid,@itemId,@userID,@hostID,@hostname,@name,@ext,@type,@src,ISNULL(@srcs,@src),@size,ISNULL(@lastModifiedDate,GETUTCDATE())    \r\n\t\tSET @id=@@IDENTITY    \r\n\tEND    \r\n\t    \r\n\tSELECT F.id,type,ext,CONVERT(VARCHAR(250),uid) as uid,host,name,src,srcs,size,lastModifiedDate--,OD.token    \r\n\tFROM om.files F    \r\n\t--LEFT OUTER JOIN auth.onedrive OD ON OD.id=1    \r\n\tWHERE F.id = @id \r\n\r\nGO\r\n"},"api.getItemLink":{"code":"\r\nIF OBJECT_ID('api.getItemLink') IS NOT NULL DROP PROCEDURE api.getItemLink;\r\nGO\r\nCREATE PROCEDURE [api].[getItemLink] @hostID INT=NULL,@detailID INT=NULL,@srcID INT=NULL,@classID INT=NULL,@class VARCHAR(500)=NULL,@keyid INT=NULL,@key VARCHAR(500)=NULL,@keyname VARCHAR(500)=NULL,@hasChildren BIT=NULL,@id INT=NULL OUTPUT,@name VARCHAR(500)=NULL,@state VARCHAR(500)=NULL,@idx INT=NULL,@masterID INT=NULL   \r\nAS   \r\n\tSET NOCOUNT ON;   \r\n\tSET @id=NULL   \r\n\tIF @class IS NOT NULL IF ISNUMERIC(@class)=1 SET @classID=@class ELSE SELECT @classID=id FROM om.class WHERE class=@class    \r\n\t--IF @key IS NOT NULL IF ISNUMERIC(@key)=1 SET @keyID=@key ELSE SET @keyname=@key    \r\n\tSET @key=ISNULL(@key,@keyname)   \r\n\tIF @id IS NULL AND @key IS NOT NULL SELECT TOP 1 @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyName=@key --AND masterID=ISNULL(@masterID,masterID)   \r\n\tIF @id IS NULL AND @key IS NOT NULL SELECT TOP 1 @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND name=@key --AND masterID=ISNULL(@masterID,masterID)   \r\n\tIF @id IS NULL AND @keyID IS NOT NULL SELECT TOP 1 @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyID=@keyID --ND masterID=ISNULL(@masterID,masterID)   \r\n   \r\n\t--select @id   \r\n\t--return    \r\n\tIF @id IS NULL   \r\n\tBEGIN   \r\n\t\tINSERT om.items(hostID,classID,keyID,keyName)    \r\n\t\tVALUES(@hostID,@classID,@keyID,@key)   \r\n\t\tSET @id = scope_identity()   \r\n\tEND   \r\n\tUPDATE om.items SET masterID=ISNULL(@masterID,masterID),name=ISNULL(ISNULL(@name,@key),name),hasChildren=ISNULL(@hasChildren,hasChildren),idx=ISNULL(@idx,idx),detailID=ISNULL(@detailID,detailID),srcID=ISNULL(@srcID,srcID),state=ISNULL(@state,state) WHERE id=@id \r\n\r\nGO\r\n"},"api.getItemModelTree":{"code":"\r\nIF OBJECT_ID('api.getItemModelTree') IS NOT NULL DROP PROCEDURE api.getItemModelTree;\r\nGO\r\nCREATE PROCEDURE [api].[getItemModelTree] @id INT   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\t;WITH P( id,detailID,srcID,masterID,level,path) AS(    \r\n\t\tSELECT id,detailID,srcID,null,1,CONVERT(VARCHAR(5000),'')    \r\n\t\tFROM api.items    \r\n\t\tWHERE id = @id AND selected=1   \r\n\t\tUNION ALL   \r\n\t\tSELECT I.id,I.detailID,I.srcID,P.id,level+1,CONVERT(VARCHAR(5000),path+STR(I.idx))    \r\n\t\tFROM P   \r\n\t\tINNER JOIN api.items I ON I.masterID = ISNULL(P.detailID,P.id) AND level<10 AND ISNULL(selected,1)=1--AND ISNULL(I.selected,1)=1    \r\n\t\tINNER JOIN api.items D ON D.id = ISNULL(I.detailID,I.id)    \r\n\t)    \r\n\tSELECT I.id as itemID,I.name,P.masterID,P1.*--,P.level,I.idx   \r\n\tFROM P   \r\n\tINNER JOIN api.items I ON I.id = P.id   \r\n\tINNER JOIN api.items D ON D.id=ISNULL(I.detailID,I.id)    \r\n\tLEFT OUTER JOIN om.class C ON C.id = D.classID   \r\n\tINNER JOIN(SELECT I.id,F.name,F.value FROM om.attributes F INNER JOIN P I ON F.id IN(I.id,I.srcID)) X PIVOT(max(value) FOR name in(w,h,depth,x,y,z,r,rx,ry,rz,children,shape,geo,dx,dy,dz,fx,PowerKVA,Air,Water)) P1 ON P1.id=I.id    \r\n\twhere path is not null   \r\n\tORDER BY path \r\n\r\nGO\r\n"},"api.getItemTree":{"code":"\r\nIF OBJECT_ID('api.getItemTree') IS NOT NULL DROP PROCEDURE api.getItemTree;\r\nGO\r\nCREATE PROCEDURE [api].[getItemTree] @id INT,@host VARCHAR(50) = NULL,@sessionId VARCHAR(50) = NULL   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\tSET TEXTSIZE 2147483647   \r\n\t--DECLARE @groupID INT, @hostID INT, @userID INT, @detailID INT,@path VARCHAR(MAX), @rw BIT   \r\n\t--EXEC auth.userGet @sessionId=@sessionId, @host=@host, @groupID=@groupID OUTPUT, @hostID=@hostID OUTPUT, @userID=@userID OUTPUT   \r\n\t--IF @id IS NULL SET @id = @userID   \r\n\t--DECLARE @T TABLE(level TINYINT,id INT,name VARCHAR(250),class VARCHAR(250),groupname VARCHAR(250),idx INT,detailID INT,classID INT,srcID INT,selected BIT, disabled BIT, menuitem BIT, hasChildren BIT, fields TEXT)   \r\n\tDECLARE @T TABLE(id INT,detailID INT,masterID INT,classID INT,srcID INT,level TINYINT,path VARCHAR(5000),files VARCHAR(MAX))   \r\n\tDECLARE @T2 TABLE(id INT,srcID INT,files VARCHAR(MAX), level INT)   \r\n\t;WITH P( id,detailID,masterID,classID,srcID,level,path,files)    \r\n\tAS(    \r\n\t\tSELECT id,detailID,null,classID,srcID,1,CONVERT(VARCHAR(5000),''),files   \r\n\t\tFROM api.items   \r\n\t\tWHERE id = @id    \r\n\t\tUNION ALL   \r\n\t\tSELECT I.id,I.detailID,P.id,I.classID,I.srcID,level+1,CONVERT(VARCHAR(5000),path+STR(I.idx)),I.files    \r\n\t\tFROM P INNER JOIN api.items I ON I.masterID = P.id AND level<6 AND ISNULL(I.selected,1)=1   \r\n\t)    \r\n\tINSERT @T SELECT * FROM P   \r\n\t--SELECT * FROM @T RETURN   \r\n\t;WITH P( id, srcID, files, level)    \r\n\tAS(    \r\n\t\tSELECT srcID,srcID,files,0    \r\n\t\tFROM @T   \r\n\t\tUNION ALL   \r\n\t\tSELECT P.id,I.srcID,ISNULL(P.files,I.files),level+1   \r\n\t\tFROM P INNER JOIN api.items I ON I.id=P.srcID   \r\n\t)    \r\n\tINSERT @T2 SELECT * FROM P   \r\n\tSELECT I.id,I.name,I.files   \r\n\tFROM(SELECT DISTINCT id FROM @T2) T   \r\n\tINNER JOIN api.items I ON T.id=I.id   \r\n\t--UPDATE @T SET files=P.files FROM(SELECT id itemID,files FROM @T2 where files is not null) P WHERE id=P.itemId   \r\n\tSELECT T.id,name,value   \r\n\tFROM(SELECT DISTINCT id,srcID,level FROM @T2) T   \r\n\tINNER JOIN om.attributes F ON T.srcID=F.id --AND name IN('Product','')   \r\n\tORDER BY T.level DESC   \r\n\tSELECT I.id,I.name,I.files,I.masterID,I.srcID,T.level   \r\n\tFROM(SELECT id,level FROM @T) T   \r\n\tINNER JOIN api.items I ON T.id=I.id   \r\n\tORDER BY level,I.masterID,I.idx   \r\n\tSELECT T.id,name,value   \r\n\tFROM(SELECT DISTINCT id FROM @T) T   \r\n\tINNER JOIN om.attributes F ON T.id=F.id --AND name IN('Product')   \r\n\tRETURN   \r\n\t--SELECT \tP.id,A.name,A.value   \r\n\t--FROM   \r\n\t--\t@T2 P   \r\n\t--\tINNER JOIN api.items I ON I.id=P.id   \r\n\t--\tINNER JOIN om.attributes A ON A.id IN(I.detailID,I.id,I.srcID,I.toID,I.FromID) AND A.name > '' AND A.value > ''    \r\n\t--WHERE A.value>''   \r\n\t--SELECT C.id,C.config FROM(SELECT DISTINCT classID FROM @T) T INNER JOIN om.class C ON C.id=T.classID   \r\n\tSELECT P.level,P.masterID,I.id,I.name,I.files,I.state,I.startDT,I.endDT,I.finishDT,D.groupname,I.idx,I.detailID,D.classID,I.srcID,D.hasChildren,P.files sFiles   \r\n\tFROM @T P   \r\n\tINNER JOIN api.items I ON I.id = P.id --AND I.deletedDT IS NULL   \r\n\tINNER JOIN om.items D ON D.id=ISNULL(I.detailID,I.id) AND D.deletedDT IS NULL   \r\n\t--where D.name like 'vkl%'   \r\n\tORDER BY path \r\n\r\nGO\r\n"},"api.getUserItems":{"code":"\r\nIF OBJECT_ID('api.getUserItems') IS NOT NULL DROP PROCEDURE api.getUserItems;\r\nGO\r\nCREATE PROCEDURE [api].[getUserItems]  @UserID INT, @HostID INT   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\tDECLARE @T TABLE(id INT,lastvisitDT DATETIME)   \r\n\tINSERT @T SELECT TOP 500 id,lastvisitDT FROM om.itemuservisit WHERE userID=@userID ORDER BY lastvisitDT DESC   \r\n\tINSERT @T SELECT TOP 500 id,lastvisitDT FROM om.itemuservisit WHERE userID<>@userID AND id NOT IN(SELECT id FROM @T) ORDER BY lastvisitDT DESC   \r\n\tSELECT I.id,I.name,I.classID,I.state,I.obj,I.idx,T.lastvisitDT    \r\n\tFROM @T T    \r\n\tINNER JOIN api.items I ON I.id=T.id AND I.hostID=@HostID \r\n\r\nGO\r\n"},"api.setAttribute":{"code":"\r\nIF OBJECT_ID('api.setAttribute') IS NOT NULL DROP PROCEDURE api.setAttribute;\r\nGO\r\nCREATE PROCEDURE [api].[setAttribute]    \r\n\t@id INT=NULL,@fieldID INT=NULL,@www BIT=NULL,@aid INT=NULL OUTPUT,@max INT=0   \r\n\t,@hostID INT=NULL,@keyNr INT=NULL,@keyId INT=NULL,@keyname VARCHAR(50)=NULL   \r\n\t,@class VARCHAR(50)=NULL,@idname VARCHAR(50)=NULL,@tag VARCHAR(50)=NULL, @createdDT VARCHAR(50)=NULL, @valueSource VARCHAR(50)=NULL   \r\n\t,@schema VARCHAR(50)=NULL -- deprecated   \r\n\t,@userID INT=NULL   \r\n\t,@moduserID INT=NULL -- deprecated   \r\n\t,@modifiedByID INT=NULL   \r\n\t,@type VARCHAR(50)=NULL,@rights VARCHAR(50)=NULL,@typeid INT=NULL,@value VARCHAR(MAX)=NULL  \r\n\t,@name VARCHAR(MAX)=NULL  \r\n\t,@title VARCHAR(MAX)=NULL  \r\n\t,@find BIT=NULL,@filter BIT=NULL,@classID INT=NULL,@attributeItemID INT=NULL   \r\n\t,@itemId VARCHAR(10)=NULL  \r\n\t,@kop TINYINT=NULL, @idx INT=NULL,@isnull BIT=NULL,@sessionID VARCHAR(50)=NULL,@host VARCHAR(50)=NULL,@modifiedDT VARCHAR(50)=NULL    \r\nAS    \r\n\tSET NOCOUNT ON    \r\n\tDECLARE @itemclassID INT,@EmailAid INT,@personID INT,@ToID INT,@FromID INT,@SrcID INT,@email VARCHAR(200),@isProperty BIT    \r\n\tIF @title IS NOT NULL SET @name = @title  \r\n   \r\n\tSET @modifiedByID=ISNULL(@modifiedByID,@moduserID)   \r\n   \r\n\tIF @schema IS NOT NULL SET @class=@schema -- @schema deprecated   \r\n   \r\n\tIF NOT @name>'' RETURN    \r\n    \r\n\tSELECT @fieldID=id,@isProperty=isProperty FROM om.field WHERE name=@name    \r\n\t--SELECT \t@fieldID,@isProperty   \r\n   \r\n\tIF @fieldID IS NULL BEGIN INSERT om.field (name) VALUES (@name) SET @fieldID=scope_identity() END    \r\n    \r\n\tIF @hostID=1 SET @www=1    \r\n\tIF @hostID IS NULL SELECT @hostID=hostid FROM om.items WHERE id=@id    \r\n  \r\n  \r\n    \r\n\t--select @hostID    \r\n\tIF @class IS NOT NULL   \r\n\tBEGIN  \r\n\t\tSELECT @classID=id FROM om.class WHERE class=@class    \r\n\t\tIF @classID IS NULL   \r\n\t\tBEGIN  \r\n\t\t\tSELECT @classID = MAX(id)+1 FROM om.class  \r\n\t\t\tINSERT om.class(id,class) VALUES(@classID,@class)  \r\n\t\tEND  \r\n\tEND  \r\n\tIF @classID IS NOT NULL AND @itemID IS NULL -- This propertie is a relation property, it is set but no relation itemID is set. So the relation object must be foud    \r\n\tBEGIN    \r\n\t\tIF @tag IS NOT NULL -- a keyid is set, so object with classID with keyid must be selectd    \r\n\t\t\tSELECT @itemID=id,@value=title FROM api.items WHERE hostID=@hostID AND classID=@classID AND tag=@tag   \r\n\t\tELSE IF @keyID IS NOT NULL -- a keyid is set, so object with classID with keyid must be selectd    \r\n\t\t\tSELECT @itemID=id,@value=ISNULL(@value,name) FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyID=@keyID    \r\n\t\tELSE IF @keyname IS NOT NULL -- a keyname is set, so object with classID with keyname must be selectd    \r\n\t\t\tSELECT @itemID=id,@value=ISNULL(@value,name) FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyname=@keyname    \r\n\t\tELSE IF @keyNr IS NOT NULL\t-- idem with KeyNr    \r\n\t\t\tSELECT @itemID=id,@value=ISNULL(@value,name) FROM api.items WHERE hostID=@hostID AND classID=@classID AND nr=@keyNr    \r\n\t\tIF @itemID IS NULL AND @value IS NOT NULL -- If Value supplied then the object must be created if not exist    \r\n\t\tBEGIN    \r\n\t\t\t-- First check if object exists with key equal to @value    \r\n\t\t\t\tSELECT @itemID=id,@value=ISNULL(@value,name) FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyname=@value    \r\n\t\t\t-- If still not find then look for name equal to @value    \r\n\t\t\tIF @itemID IS NULL     \r\n\t\t\t\tSELECT @itemID=id,@value=ISNULL(@value,name) FROM api.items WHERE hostID=@hostID AND classID=@classID AND name=@value    \r\n\t\t\t-- If classID is acccount (class=1000) then do not create object, also clear idname     \r\n\t\t\tIF @itemID IS NULL AND @classID IN (1000) SET @idname = NULL    \r\n\t\t\t-- Stil object not found then create    \r\n\t\t\tELSE IF @itemID IS NULL     \r\n\t\t\tBEGIN    \r\n\t\t\t\tINSERT api.items(hostID,classID,name,nr,keyID,keyName) SELECT @hostID,@classID,@value,@keyNr,@keyID,ISNULL(@keyName,@value)    \r\n\t\t\t\tSET @itemId=scope_identity()    \r\n\t\t\tEND    \r\n\t\tEND    \r\n\tEND    \r\n\tELSE IF @itemID IS NOT NULL SELECT @classID=classID,@value=name FROM om.items WHERE id=@itemID    \r\n\tIF @idname IS NOT NULL     \r\n\tBEGIN    \r\n\t\tIF @itemID IS NOT NULL EXEC('UPDATE om.items SET '+@idname+'='+@itemID+' WHERE id='+@id)    \r\n\t\tELSE EXEC api.setItemProperty @id=@id,@name=@idname,@value=@value    \r\n\t\t--IF @value>'' EXEC('UPDATE om.items SET '+@idname+'='''+@value+''' WHERE id='+@id)    \r\n\t\t--ELSE EXEC('UPDATE om.items SET '+@idname+'=NULL WHERE id='+@id)    \r\n\tEND    \r\n\tELSE IF @isProperty=1    \r\n\tBEGIN    \r\n\t\t--PRINT 'A'   \r\n\t\tEXEC api.setItemProperty @id=@id,@name=@name,@value=@value    \r\n\t\t--RETURN    \r\n\tEND   \r\n    \r\n\t--BEGIN    \r\n\t--\tIF @value>'' EXEC('UPDATE om.items SET '+@name+'='''+@value+''' WHERE id='+@id)    \r\n\t--\tELSE EXEC('UPDATE om.items SET '+@name+'=NULL WHERE id='+@id)    \r\n\t--END    \r\n\tIF @max=0    \r\n\tBEGIN   \r\n\t\tIF @aid IS NULL SELECT @aid=aid FROM om.attributes WHERE id=@id AND fieldID=@fieldID AND hostID=@hostID AND itemID=@itemID --AND hostID=@hostID ??  \r\n\t\tIF @aid IS NULL SELECT @aid=aid FROM om.attributes WHERE id=@id AND fieldID=@fieldID AND hostID=@hostID AND ISNULL(userID,0)IN(@userID,0) AND(rights IS NULL OR moduserID=@moduserID)    \r\n\t\tIF @aid IS NULL AND @hostID IS NULL SELECT @aid=aid FROM om.attributes WHERE id=@id AND fieldID=@fieldID   \r\n\tEND   \r\n\t--IF @aid IS NULL SELECT @aid=aid FROM om.attributes WHERE id=@id AND name=@name   \r\n\tIF @aid IS NOT NULL AND @isnull=1 RETURN    \r\n\t  \r\n    \r\n\t--select @aid    \r\n\t--IF @aid IS NOT NULL AND @typeID IS NULL AND ISNULL(@value,'')='' BEGIN DELETE om.attributes WHERE aid=@aid RETURN END    \r\n\t    \r\n\t--IF @value='' AND @typeID IS NULL RETURN    \r\n\t--IF @value='' AND @aid IS NULL RETURN    \r\n\tIF @aid IS NULL BEGIN INSERT om.attributes(id,name,fieldID) VALUES(@id,@name,@fieldID) SET @aid = scope_identity() END    \r\n  \r\n\tUPDATE om.attributes SET     \r\n\t\thostID=@hostID,    \r\n\t\tmodUserId=ISNULL(@modifiedByID,@userID),    \r\n\t\tuserID=ISNULL(@userID,0),    \r\n\t\tmodDt=GETUTCDATE(),    \r\n\t\ttypeID=@typeID,    \r\n\t\tfieldID=@fieldID,    \r\n\t\trights=@rights,    \r\n\t\tvalue=@value,    \r\n\t\tfilter=@filter,    \r\n\t\tclassID=@classID,    \r\n\t\titemId=@itemId,    \r\n\t\tkop=@kop,    \r\n\t\tidx=@idx,    \r\n\t\twww=@www     \r\n\tWHERE     \r\n\t\taid=@aid    \r\n    \r\n\tUPDATE om.items SET modifiedDT=GETUTCDATE() WHERE id=@id    \r\n\tIF @itemID IS NOT NULL AND @UserID IS NOT NULL EXEC api.addItemUserVisit @id=@itemId,@userID=@UserID--,@hostID=@hostID    \r\n\tIF @id IS NOT NULL AND @UserID IS NOT NULL EXEC api.addItemUserVisit @id=@id,@userID=@UserID--,@hostID=@hostID    \r\n   \r\n\t--EXEC api.addItemUserVisit @id=@id,@userID=@userID[api].[setAttribute] \r\n \r\n\r\nGO\r\n"},"api.setItemChildIdx":{"code":"\r\nIF OBJECT_ID('api.setItemChildIdx') IS NOT NULL DROP PROCEDURE api.setItemChildIdx;\r\nGO\r\nCREATE PROCEDURE [api].[setItemChildIdx] @id INT   \r\nAS   \r\n\t--SELECT id,ROW_NUMBER() OVER(ORDER BY idx) AS idx FROM api.items WHERE masterID=@id   \r\n\tUPDATE om.items SET om.items.idx=I.idx-1 from(SELECT id,ROW_NUMBER() OVER(ORDER BY idx) AS idx FROM api.items WHERE masterID=@id) I WHERE om.items.id=I.id   \r\n\tDECLARE @hasChildren BIT   \r\n\tIF EXISTS(SELECT 0 FROM api.items WHERE masterID=@id) SET @hasChildren=1 ELSE SET @hasChildren=0   \r\n\tUPDATE om.items SET hasChildren=@hasChildren WHERE id=@id \r\n\r\nGO\r\n"},"api.setItemIdx":{"code":"\r\nIF OBJECT_ID('api.setItemIdx') IS NOT NULL DROP PROCEDURE api.setItemIdx;\r\nGO\r\nCREATE PROCEDURE [api].[setItemIdx] @id INT   \r\nAS   \r\n\t--SELECT id,idx,ROW_NUMBER()OVER(ORDER BY ISNULL(ISNULL(title,name),keyname)) AS rowNr FROM api.items WHERE masterID=@id   \r\n\tUPDATE om.items SET om.items.idx=I.idx-1 from(SELECT id,ROW_NUMBER() OVER(ORDER BY ISNULL(ISNULL(title,name),keyname)) AS idx FROM api.items WHERE masterID=@id) I WHERE om.items.id=I.id   \r\n\tDECLARE @hasChildren BIT   \r\n\tIF EXISTS(SELECT 0 FROM api.items WHERE masterID=@id) SET @hasChildren=1 ELSE SET @hasChildren=0   \r\n\tUPDATE om.items SET hasChildren=@hasChildren WHERE id=@id \r\n\r\nGO\r\n"},"auth.addHost":{"code":"\r\nIF OBJECT_ID('auth.addHost') IS NOT NULL DROP PROCEDURE auth.addHost;\r\nGO\r\nCREATE PROCEDURE [auth].[addHost] @companyName VARCHAR(50),@hostname VARCHAR(50),@ownerID INT,@domain VARCHAR(50)=NULL   \r\nAS   \r\n\tDECLARE @companyID INT,@siteID INT   \r\n\tSELECT @companyID=id FROM api.items WHERE hostID=1 AND classID=1002 AND name=@companyName   \r\n\tIF NOT EXISTS(SELECT 0 FROM auth.host WHERE id=@companyID) INSERT auth.host(id)VALUES(@companyID)   \r\n\tUPDATE auth.host SET name=ISNULL(@hostname,name),domain=ISNULL(@domain,domain),mailAccountAid=ISNULL(mailAccountAid,2) WHERE id=@companyID   \r\n\tSELECT id,name FROM auth.host WHERE id=@companyID   \r\n\tSELECT @companyName,@hostname,@ownerID,@companyID   \r\n\tRETURN   \r\n\tSET NOCOUNT ON   \r\n\t--DECLARE @pos INT,@msgID INT,@pageID INT,@www BIT,@footerID INT,@aid INT,@classID INT,@ItemID INT,@ItemHostID INT,@SiteID INT,@AccountID INT,@userID INT,@groupID INT,@ToID INT,@FromID INT,@SrcID INT,@ContactID INT,@CompanyID INT,@PersonID INT,@value VARCHAR(500),@name VARCHAR(500),@website VARCHAR(500),@config VARCHAR(MAX),@keyname VARCHAR(500),@email VARCHAR(500),@email1 VARCHAR(500),@email2 VARCHAR(500),@jobtitle VARCHAR(500),@displayname VARCHAR(500),@givenname VARCHAR(500),@middlename VARCHAR(500),@surname VARCHAR(500),@surname2 VARCHAR(500),@companyname VARCHAR(500),@company VARCHAR(500),@msg VARCHAR(MAX)   \r\n\t\/*   \r\n\tIF @ItemHostID<>1   \r\n\tBEGIN   \r\n\t\tIF @srcID IS NULL   \r\n\t\tBEGIN   \r\n\t\t\tSET @value=api.fieldget(@id,'BusinessHomePage')   \r\n\t\t\tIF @value IS NOT NULL SELECT @srcID=I.ID FROM api.items I INNER JOIN om.attributes F ON I.classID=1002 AND I.www=1 AND I.hostID=1 AND F.id=I.id AND F.name='BusinessHomePage' AND F.value=@value   \r\n\t\t\tIF @srcID IS NOT NULL AND @srcID<>@id EXEC api.setAttribute @id=@id,@idname='srcID',@itemID=@srcID   \r\n\t\tEND   \r\n\t\tIF @srcID IS NULL   \r\n\t\tBEGIN   \r\n\t\t\tSET @value=api.fieldget(@id,'EmailAddresses1Address')   \r\n\t\t\tIF @value IS NOT NULL SELECT @srcID=I.ID FROM api.items I INNER JOIN om.attributes F ON I.classID=1002 AND I.www=1 AND I.hostID=1 AND F.id=I.id AND F.name='EmailAddresses1Address' AND F.value=@value   \r\n\t\t\tIF @srcID IS NOT NULL AND @srcID<>@id EXEC api.setAttribute @id=@id,@idname='srcID',@itemID=@srcID   \r\n\t\tEND   \r\n\t\tRETURN   \r\n\tEND   \r\n\tUPDATE om.items SET www=1 WHERE id=@id   \r\n\tIF @KeyName IS NOT NULL    \r\n\tBEGIN   \r\n\t\tSELECT @aid=aid,@contactID=itemID FROM om.attributes WHERE id=@id AND name='owner'   \r\n\t\tIF @contactID IS NULL RETURN   \r\n\t\tSELECT @UserID=ToID,@fromID=fromID,@toID=toID FROM api.items WHERE id=@contactID   \r\n\t\tIF @UserID IS NULL RETURN   \r\n\t\tSELECT @AccountID=id FROM api.items WHERE hostID=@id AND classID=1004 AND srcID=@contactID   \r\n\t\tIF @AccountID IS NULL   \r\n\t\tBEGIN   \r\n\t\t\tSET @value=api.fieldget(@contactID,'EmailAddresses0Address')   \r\n\t\t\tIF @value IS NULL SET @value=api.fieldget(@toID,'EmailAddresses0Address')   \r\n\t\t\tSELECT 'TEST',@value,@contactID,@toID,@fromID   \r\n\t\t\tIF @value IS NULL RETURN   \r\n\t\t\tSELECT 'TEST',@classID   \r\n\t\t\tINSERT om.items(hostID,classID,srcID,fromID,toID,name)    \r\n\t\t\tSELECT @id,1004,@contactID,fromID,toID,name   \r\n\t\t\tFROM api.items WHERE id=@contactID   \r\n\t\t\tSET @AccountID=scope_identity()   \r\n\t\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='EmailAddresses0Address',@value=@value   \r\n\t\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='DisplayName',@itemID=@toID   \r\n\t\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='Company',@itemID=@fromID   \r\n\t\tEND   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=0,@masterID=@id,@keyname='ceo',@idx=1,@detailID=@accountID   \r\n\t\tUPDATE om.items SET userID=@userID WHERE id=@id   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=1162,@keyname='maintask',@name='Organisatie taken',@id=@itemId OUTPUT   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=0,@masterID=@id,@keyname='maintask',@name='Organisatie taken',@idx=1,@detailID=@itemId   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=1004,@keyname='support',@name='Support Aliconnect',@srcID=2750880,@id=@itemId OUTPUT   \r\n\t\tIF NOT EXISTS(SELECT 0 FROM auth.users WHERE id=@UserID)    \r\n\t\tBEGIN   \r\n\t\t\tINSERT auth.users(id) VALUES(@UserID)   \r\n\t\t\tEXEC mail.send @AccountID=@AccountID,@HostID=@id,@name='mailAliconnectAccountAdd'   \r\n\t\tEND   \r\n\t\t--SELECT @GroupID=ItemID FROM om.attributes WHERE id=@UserID AND F.hostID=@HostID AND F.classID=1103   \r\n\t\t--IF @GroupID IS NULL   \r\n\t\tSELECT @groupID=id FROM api.items WHERE classID=1103 AND hostID=@id AND name='Admin'   \r\n\t\tIF @groupID IS NULL   \r\n\t\tBEGIN   \r\n\t\t\tEXEC api.getItemLink @hostID=@id,@classID=1103,@name='Admin',@id=@groupID OUTPUT   \r\n\t\t\t--INSERT om.items(hostID,classID,name) VALUES(@id,1103,'Admin')   \r\n\t\t\t--SELECT @groupID=scope_identity()   \r\n\t\t\tINSERT auth.groupClass(groupID,classID,config) SELECT @groupID,classID,config FROM auth.groupClass WHERE groupID=2619989 -- aliconnect Admin   \r\n\t\t\tEXEC mail.send @AccountID=@UserID,@HostID=@HostID,@name='mailToOwnerGroupAdminAdd'   \r\n\t\tEND   \r\n\t\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='groupID',@value='Admin',@ItemID=@groupID,@classID=1103,@moduserID=@userID,@rights='R'   \r\n\t\t--SELECT @groupID   \r\n\t\t--RETURN   \r\n\t\t--IF NOT EXISTS(SELECT 0 FROM om.attributes WHERE id=@AccountID AND hostID=@id AND classID=1103)   \r\n\t\t--BEGIN   \r\n\t\t--\t--SELECT @AccountID,@id,@userID,@HostID,@groupid   \r\n\t\t--\tEXEC api.setAttribute @id=@AccountID,@hostID=@id,@name='groupID',@value='Admin',@ItemID=@groupID,@classID=1103,@moduserID=@userID,@rights='R'   \r\n\t\t--\tEXEC mail.send @AccountID=@AccountID,@HostID=@id,@name='mailHostGroupAdd'   \r\n\t\t--END   \r\n\t\t--IF NOT EXISTS(SELECT 0 FROM om.attributes WHERE id=@id AND classID=1004 AND rights>'')   \r\n\t\t--BEGIN   \r\n\t\t--\tEXEC api.setAttribute @id=@id,@hostID=1,@name='owner',@value='X',@ItemID=@AccountID,@UserID=@PersonID,@classID=1004   \r\n\t\t--\tEXEC mail.send @AccountID=@AccountID,@HostID=@id,@name='mailToOwnerAccountAdd'   \r\n\t\t--END   \r\n\t\t--SELECT @keyname   \r\n\t\tUPDATE om.attributes SET rights='R',moduserID=@userID WHERE id=@id AND name IN('owner','hostName')   \r\n\t\tSET @KeyName=REPLACE(REPLACE(@KeyName,' ',''),'.','')   \r\n\t\tIF NOT EXISTS(SELECT 0 FROM auth.host WHERE id=@id) INSERT auth.host(id,mailAccountAid) VALUES(@id,2)   \r\n\t\t--BEGIN   \r\n\t\t--\tINSERT auth.host(id,mailAccountAid) VALUES(@id,2)   \r\n\t\t--\tEXEC mail.send @AccountID=@UserID,@HostID=@HostID,@name='mailToOwnerHostAdd'   \r\n\t\t--END   \r\n\t\tIF @Config IS NULL UPDATE om.items SET config=I.config FROM(SELECT config FROM om.items WHERE id=1) I WHERE om.items.id=@id   \r\n\t\t--RETURN   \r\n\t\t--SELECT @SiteID=id FROM api.items WHERE hostID=@id AND classID=1091 AND DetailID IS NULL   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=1091,@keyName=@keyname,@hasChildren=1,@masterID=@id,@id=@siteID  OUTPUT   \r\n\t\tEXEC api.setAttribute @id=@SiteID,@hostID=@id,@name='Company',@classID=1002,@itemID=@id   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=1092,@masterID=@SiteID,@keyname='Welkom',@idx=0,@state='published',@id=@pageID  OUTPUT   \r\n\t\tUPDATE om.items SET www=1,startDT=GETUTCDATE() WHERE id=@pageID   \r\n\t\t--SELECT @hostid,@id,@SiteID,@pageID   \r\n\t\tEXEC api.setAttribute @id=@pageID,@hostID=@id,@name='Website',@value='Website',@classID=1091,@typeID=11,@itemID=@SiteID   \r\n\t\tEXEC api.setAttribute @id=@pageID,@hostID=@id,@name='Title',@value='Welkom'   \r\n\t\tEXEC api.setAttribute @id=@pageID,@hostID=@id,@name='Description',@value='Welkom op deze site.'   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=1092,@masterID=@SiteID,@keyname='Footer',@idx=99,@state='published',@id=@footerID  OUTPUT   \r\n\t\tEXEC api.setAttribute @id=@footerID,@hostID=@id,@name='Webpage',@value='Webpage',@classID=1092,@typeID=11,@itemID=@SiteID   \r\n\t\tEXEC api.getItemLink @hostID=@id,@classID=1092,@masterID=@footerID,@keyname='Contact',@idx=0,@state='published',@id=@itemID  OUTPUT   \r\n\t\tEXEC api.setAttribute @id=@itemID,@hostID=@id,@name='Webpage',@value='Webpage',@classID=1092,@typeID=11,@itemID=@footerID   \r\n\t\t--EXEC mail.send @AccountID=@UserID,@HostID=@HostID,@name='mailToOwnerSiteAdded'   \r\n\t\t--IF NOT EXISTS(SELECT 0 FROM api.items WHERE hostID=@id AND masterID=@AccountID AND DetailID=@SiteID AND classid=1091)   \r\n\t\t--\tINSERT om.items(hostID,classID,masterID,detailID,name) VALUES(@id,1091,@AccountID,@SiteID,@Keyname)   \r\n\tEND   \r\n\t*\/ \r\n\r\nGO\r\n"},"auth.getEmail":{"code":"\r\nIF OBJECT_ID('auth.getEmail') IS NOT NULL DROP PROCEDURE auth.getEmail;\r\nGO\r\nCREATE PROCEDURE [auth].[getEmail] @email VARCHAR(500),@id INT=NULL OUTPUT   \r\nAS   \r\n\tDECLARE @aid INT,@PersonID INT,@ClassID INT,@SrcID INT   \r\n\tSELECT @aid=aid,@PersonID=I.id FROM auth.email E LEFT OUTER JOIN api.items I ON I.id=E.id AND E.email=@email   \r\n\tIF @aid IS NULL BEGIN INSERT auth.email(email,id) VALUES(@email,@id) SET @aid=@@identity END   \r\n\t--IF @id IS NULL AND @PersonID IS NULL SELECT @id=I.id FROM api.items I INNER JOIN om.attributes F ON F.id=I.id AND I.classid=1000 AND F.name='EmailAddresses2Address' and value=@email   \r\n\t--IF @id IS NULL AND @PersonID IS NULL SELECT @id=I.ToID FROM api.items I INNER JOIN om.attributes F ON F.id=I.id AND I.classid=1004 AND F.name='EmailAddresses0Address' and value=@email   \r\n\t--IF @id IS NULL AND @PersonID IS NULL SELECT @id=I.ToID FROM api.items I INNER JOIN om.attributes F ON F.id=I.id AND I.classid=1004 AND F.name='EmailAddresses2Address' and value=@email   \r\n\t--IF @id IS NULL AND @PersonID IS NULL SELECT @id=I.ToID FROM api.items I INNER JOIN om.attributes F ON F.id=I.id AND I.classid=1100 AND F.name='EmailAddresses0Address' and value=@email   \r\n\t--IF @id IS NULL AND @PersonID IS NULL SELECT @id=I.ToID FROM api.items I INNER JOIN om.attributes F ON F.id=I.id AND I.classid=1100 AND F.name='EmailAddresses2Address' and value=@email   \r\n\tIF @id IS NOT NULL AND @PersonID IS NULL UPDATE auth.email SET id=@id WHERE aid=@aid   \r\n\tIF @PersonID IS NOT NULL SET @id=@personID \r\n\r\nGO\r\n"},"api.addItem":{"code":"\r\nIF OBJECT_ID('api.addItem') IS NOT NULL DROP PROCEDURE api.addItem;\r\nGO\r\nCREATE PROCEDURE [api].[addItem]    \r\n\t@hostID INT=NULL,   \r\n\t@userID INT=NULL,   \r\n\t@accountID INT=NULL,   \r\n\t@id INT=NULL OUTPUT,   \r\n\t@schema VARCHAR(250)=NULL,   \r\n\t@name VARCHAR(250)=NULL,   \r\n\t@keyname VARCHAR(250)=NULL,   \r\n\t@tag VARCHAR(250)=NULL,   \r\n\t@title VARCHAR(250)=NULL,   \r\n\t@subject VARCHAR(250)=NULL,   \r\n\t@summary VARCHAR(250)=NULL,   \r\n\t@filterfields VARCHAR(8000)=NULL,   \r\n\t@value VARCHAR(8000)=NULL,   \r\n\t@keyID VARCHAR(250)=NULL,   \r\n\t@sourceID INT=NULL,   \r\n\t@values VARCHAR(250)=NULL,   \r\n\t@masterID INT=NULL,   \r\n\t@classID INT=NULL,   \r\n\t@clone BIT=NULL,   \r\n\t@detailID INT = NULL,   \r\n\t@modifiedByID INT = NULL,   \r\n\t@idx INT = NULL,   \r\n\t@srcID INT = NULL,   \r\n\t@www BIT=null,   \r\n\t--@classname VARCHAR(100)=NULL,   \r\n\t@parentId INT = NULL,   \r\n\t@host VARCHAR(50) = NULL,   \r\n\t@finishDT VARCHAR(50) = NULL,   \r\n\t@startDT VARCHAR(50) = NULL,   \r\n\t@endDT VARCHAR(50) = NULL,   \r\n\t@sessionId VARCHAR(50) = NULL,    \r\n\t@where VARCHAR(100) = NULL,   \r\n\t@find BIT = NULL -- Geeft aan of gekeken moet worden naar keyid of keyname. Als deze worden gevonden dan niet toevoegen   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\tIF @id IS NOT NULL RETURN   \r\n\tIF @classID IS NULL AND @schema IS NOT NULL   \r\n\tBEGIN   \r\n\t\tSELECT @classID=id FROM om.class WHERE class=@schema   \r\n\t\tIF @classID IS NULL    \r\n\t\tBEGIN   \r\n\t\t\tSELECT @classID=MAX(id)+1 FROM om.class   \r\n\t\t\tINSERT om.class(id,class) VALUES(@classID,@schema)   \r\n\t\tEND \r\n\tEND \r\n\tIF @classID IS NULL RETURN \r\n\tIF @id IS NULL AND @keyID IS NOT NULL SELECT @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyID=@keyID   \r\n\tIF @id IS NULL AND @keyName IS NOT NULL SELECT @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyName=@keyName   \r\n\tIF @id IS NULL AND @tag IS NOT NULL AND @masterID IS NOT NULL SELECT @id=id FROM api.items WHERE masterID=@masterID AND classID=@classID AND tag=@tag   \r\n \r\n\t--IF @find IS NOT NULL AND @keyID IS NOT NULL SELECT @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyID=@keyID   \r\n\t--IF @find IS NOT NULL AND @id IS NULL AND @keyName IS NOT NULL SELECT @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND keyName=@keyName   \r\n\t--IF @find IS NOT NULL AND @id IS NULL AND @tag IS NOT NULL SELECT @id=id FROM api.items WHERE hostID=@hostID AND classID=@classID AND tag=@tag   \r\n  \tIF @id IS NOT NULL RETURN \r\n \r\n\tDECLARE @dt CHAR(10),@groupID INT,@moduserID INT,@nr INT,@fclassID INT,@childClassNr INT, @classNr INT   \r\n\tIF @srcID IS NOT NULL AND @classID IS NULL SELECT @classID = classID FROM om.items WHERE id = @srcID   \r\n\tIF @srcID IS NOT NULL SELECT @schema = name FROM om.items WHERE id = @srcID   \r\n\tIF @schema IS NULL SELECT @schema = class FROM om.class WHERE id = @classID   \r\n\t   \r\n\t--IF @id IS NOT NULL SET @masterID = @id   \r\n\tIF @masterID IS NOT NULL    \r\n\tBEGIN   \r\n\t\tIF @idx IS NULL    \r\n\t\tBEGIN   \r\n\t\t\tSET @idx=1   \r\n\t\t\tSELECT @idx=MAX(ISNULL(idx,0))+1 FROM api.items WHERE masterID=@masterID    \r\n\t\tEND   \r\n\t\tUPDATE om.items set hasChildren = 1 where id=@masterID or id=@parentId   \r\n\tEND   \r\n\tIF @masterID IS NOT NULL    \r\n\tBEGIN   \r\n\t\tIF @srcID<>@masterID    \r\n\t\tBEGIN   \r\n\t\t\tIF @srcID IS NULL    \r\n\t\t\t\tSELECT @nr=MAX(CONVERT(INT,tag)) FROM api.items WHERE tag IS NOT NULL AND ISNUMERIC(tag)=1 AND masterID=@masterID AND classID=@classID   \r\n\t\t\tELSE    \r\n\t\t\t\tSELECT @nr=MAX(CONVERT(INT,tag)) FROM api.items WHERE tag IS NOT NULL AND ISNUMERIC(tag)=1 AND masterID=@masterID AND srcID=@srcID    \r\n\t\t\tSET @nr=ISNULL(@nr,0)+1   \r\n\t\t\t--IF @nr<1000 SET @tag=right('000'+convert(varchar(3),@nr),3) ELSE SET @tag=@nr   \r\n\t\tEND   \r\n\tEND   \r\n\tELSE    \r\n\tBEGIN   \r\n\t\tIF @srcID IS NULL   \r\n\t\t\tSELECT @nr=MAX(CONVERT(INT,tag)) FROM api.items WHERE tag IS NOT NULL AND ISNUMERIC(tag)=1 AND hostID=@hostID AND classID=@classID   \r\n\t\tELSE    \r\n\t\t\tSELECT @nr=MAX(CONVERT(INT,tag)) FROM api.items WHERE tag IS NOT NULL AND ISNUMERIC(tag)=1 AND hostID=@hostID AND srcID=@srcID    \r\n\t\t--IF @nr IS NOT NULL SET @nr=right('000',convert(varchar(3),@nr+1))   \r\n\t\tIF @nr IS NOT NULL    \r\n\t\tBEGIN   \r\n\t\t\tSET @nr=ISNULL(@nr,0)+1   \r\n\t\t\t--IF @nr<1000 SET @tag=right('000'+convert(varchar(3),@nr),3) ELSE SET @tag=@nr   \r\n\t\tEND   \r\n\tEND   \r\n   \r\n\tDECLARE @i INT   \r\n   \r\n\tINSERT om.items(sourceID,finishDT,startDT,endDT,selected,childClassNr,ClassNr,tag,masterID,parentId,detailID,idx,hostID,userID,createdById,ownerID,modifiedByID,classID,srcID,keyname,name,clone,www)--,files,state,categorie,startDT,endDT,finishDT,filterfields)    \r\n\tVALUES(@sourceID,@finishDT,@startDT,@endDT,CASE WHEN @classID=2107 AND @masterID<>ISNULL(@srcID,0) THEN 1 ELSE null END,@childClassNr,@ClassNr,@nr,@masterID,@parentId,@detailID,@idx,@hostID,ISNULL(@userID,0),@moduserID,@moduserID,@moduserID,@classID,@srcID,@keyname,@name,@clone,@www) \r\n\tSET @id = SCOPE_IDENTITY()   \r\n\tIF @srcID IS NOT NULL EXEC api.setAttribute @id=@id,@name='Source',@hostID=@hostID,@ItemID=@SrcID,@classID=@fclassid   \r\n\tIF @masterID IS NOT NULL EXEC api.setAttribute @id=@id,@name='Master',@hostID=@hostID,@ItemID=@masterID,@classID=@fclassid \r\n\r\nGO\r\n"},"api.addMail":{"code":"\r\nIF OBJECT_ID('api.addMail') IS NOT NULL DROP PROCEDURE api.addMail;\r\nGO\r\nCREATE PROCEDURE [api].[addMail] @hostID INT=NULL,@host VARCHAR(50)=NULL,@ToID INT=NULL,@AccountId INT=NULL,@email VARCHAR(50)=NULL,@name varchar(200)=NULL,@subject varchar(200)=NULL,@hostname varchar(200)=NULL,@ItemID VARCHAR(10)=NULL,@content VARCHAR(MAX)=NULL,@msg VARCHAR(MAX)=NULL,@pri INT=null  \r\nAS  \r\n\tSET NOCOUNT ON  \r\n\tDECLARE @srcid INT,@title VARCHAR(500),@companyname VARCHAR(500),@contactname VARCHAR(500),@summary VARCHAR(500),@basecolor varchar(50)  \r\n\t--IF @HostID IS NULL SELECT @HostID=hostid FROM om.items WHERE id=@accountID  \r\n\tIF @HostID IS NULL SELECT @HostID=id FROM api.items WHERE classID=1002 AND keyname=@host  \r\n\tIF @HostID IS NULL SET @hostID=1  \r\n\tSELECT @hostname=keyname,@companyname=name FROM om.items WHERE id=@HostID  \r\n\tIF @AccountID IS NULL SELECT @AccountID=AccountID FROM auth.account WHERE hostID=@hostID AND UserID=@ToID  \r\n\tSELECT @contactname=title FROM api.items WHERE id=@accountID  \r\n  \r\n\tIF @email IS NULL SELECT @email=value FROM om.fields WHERE id=@AccountID AND fieldID=931--name='EmailAddresses0Address'  \r\n\tIF @email IS NULL SELECT @email=value FROM om.fields WHERE id=@AccountID AND fieldID=1118--name='EmailAddresses2Address'  \r\n\t--IF @email IS NULL SELECT @email=value FROM om.fields WHERE id=@srcID AND name='EmailAddresses0Address'  \r\n\t--IF @email IS NULL SELECT @email=value FROM om.fields WHERE id=@srcID AND name='EmailAddresses2Address'  \r\n\tIF @email IS NULL SELECT @email=value FROM om.fields WHERE id=@ToID AND fieldID=1118---name='EmailAddresses2Address'  \r\n\tSELECT @basecolor=value FROM om.fields WHERE id=@HostID AND fieldID=741--name='basecolor'  \r\n  \r\n\tIF @msg IS NULL  \r\n\tBEGIN  \r\n\t\tSELECT @subject=subject,@summary=summary,@msg=mailmsg FROM cfg.msg WHERE name=@name  \r\n\t\tIF @ItemID IS NOT NULL SELECT @Subject=name,@summary=summary FROM om.items WHERE id=@itemID  \r\n\t\t--SET @msg='{\"mail\":1,\"FromEmail\":\"mailer@alicon.nl\",\"FromName\":\"Aliconnect Max\",\"ReplyToEmail\":\"max@alicon.nl\", \"ReplyToName\":\"Max\",\"to\":\"'+@email+'\",\"Basecolor\":\"#fafafa\",\"Domain\":\"alicon.aliconnect.nl\",\"Hostname\":\"alicon\",\"Subject\":\"'+ISNULL(@subject,'')+'\",\"Summary\":\"'+ISNULL(@summary,'')+'\",\"mailbody\":{\"content\":\"'+ISNULL(@msg,'')+'\",\"ItemID\":0'+ISNULL(@ItemID,'')+'}}'  \r\n\t\tSET @msg=REPLACE(ISNULL(@msg,''),'\"','\\\"')  \r\n\t\tSET @msg=REPLACE(@msg,CHAR(13)+CHAR(10),'<\/p><p>')  \r\n\t\tSET @msg=REPLACE(@msg,CHAR(10),'<br>')  \r\n\t\tSET @msg='{\"content\":\"'+ISNULL(@msg,'')+'\",\"ItemID\":\"'+ISNULL(@ItemID,'')+'\"}'  \r\n\tEND  \r\n\tSET @email='max@alicon.nl';  \r\n\tSET @msg='{\"to\":\"'+isnull(@email,'')+'\",\"bcc\":\"max@alicon.nl\",\"Subject\":\"'+ISNULL(@subject,'')+'\",\"msgs\":{\"content\":\"Beste '+ISNULL(@contactname,'')+',\"},'+@msg+'}'  \r\n\tSET @msg=REPLACE(@msg,'email',ISNULL(@email,''))  \r\n\tSET @msg=REPLACE(@msg,'domain',ISNULL(@hostname,''))  \r\n\tSET @msg=REPLACE(@msg,'subject',ISNULL(@subject,''))  \r\n\tSET @msg=REPLACE(@msg,'summary',ISNULL(@summary,''))  \r\n\tSET @msg=REPLACE(@msg,'toname',ISNULL(@contactname,''))  \r\n\tSET @msg=REPLACE(@msg,'content',ISNULL(@content,''))  \r\n\tSET @msg=REPLACE(@msg,'companyname',ISNULL(@companyname,''))  \r\n\t--SET @msg='{\"mail\":1,\"FromEmail\":\"mailer@alicon.nl\",\"to\":\"'+@email+'\",\"Basecolor\":\"#fafafa\",\"Domain\":\"alicon.aliconnect.nl\",\"Hostname\":\"alicon\",\"Subject\":\"'+ISNULL(@subject,'')+'\",\"Summary\":\"'+ISNULL(@summary,'')+'\",\"mailbody\":{\"content\":\"'+ISNULL(@msg,'')+'\"}}'  \r\n\t--SELECT @hostID,@accountID,@msg  \r\n\tIF @msg IS NOT NULL INSERT mail.queue(host,msg,pri) VALUES(@host,@msg,@pri) \r\n\r\nGO\r\n"},"api.getAccount":{"code":"\r\nIF OBJECT_ID('api.getAccount') IS NOT NULL DROP PROCEDURE api.getAccount;\r\nGO\r\nCREATE PROCEDURE [api].[getAccount] @email VARCHAR(500)=NULL, @hostName VARCHAR(50)=NULL, @groupName VARCHAR(50)=NULL, @password VARCHAR(50)=NULL, @hostId INT=NULL OUTPUT, @userId INT=NULL OUTPUT, @accountId INT=NULL OUTPUT, @groupId INT=NULL OUTPUT,@verified BIT=NULL OUTPUT,@pwOk BIT=NULL OUTPUT,@select BIT=NULL  \r\nAS  \r\n\tDECLARE @userName VARCHAR(500),@accountName VARCHAR(500),@userUid VARCHAR(128),@hostUid VARCHAR(128),@accountUid VARCHAR(128),@groupUid VARCHAR(128)  \r\n\tIF @hostId IS NULL SELECT @hostId=id FROM api.items WHERE hostID=1 AND classID=1002 AND keyname=@hostName  \r\n\tIF @hostName IS NULL SELECT @hostName=keyname FROM api.items WHERE id=@hostId  \r\n\tIF @userId IS NOT NULL SELECT @email=value,@verified=CASE WHEN id=userId THEN 1 ELSE 0 END FROM api.attributes WHERE id=@userId AND fieldId=30  \r\n\tELSE SELECT @userId=id,@verified=CASE WHEN id=userId THEN 1 ELSE 0 END FROM om.attributes WHERE fieldId=30 AND value=@email  \r\n\tIF @password IS NOT NULL SELECT @pwOk=pwdcompare(@password,password)FROM auth.users WHERE id=@userId  \r\n\tSELECT @accountId=I.id,@groupId=A.itemId,@accountName=I.title,@groupName=A.value  \r\n\t\tFROM api.items I  \r\n\t\tINNER JOIN api.attributes A ON I.hostId=@hostId AND A.id=I.id AND A.fieldId=3 AND I.toId=@userId  \r\n\tSELECT @userName=title FROM api.items WHERE id=@userId  \r\n\tSELECT @accountName=ISNULL(title,@userName) FROM api.items WHERE id=@accountId  \r\n\tSELECT @hostUid=uid FROM api.items WHERE id=@hostId  \r\n\tSELECT @userUid=uid FROM api.items WHERE id=@userId  \r\n\tSELECT @accountUid=uid FROM api.items WHERE id=@accountId  \r\n\tSELECT @groupUid=uid FROM api.items WHERE id=@groupId  \r\n  \r\n\tIF @select IS NOT NULL SELECT @email email,@userName userName,@hostName hostName, @accountName accountName,@groupName groupName, @verified verified, @pwOk pwOk, @userId userID, @hostId hostID, @accountId accountID, @groupId groupID, @hostUid hostUID, @userUid userUID, @accountUid accountUID, @groupUid groupUID \r\n \r\n\r\nGO\r\n"},"api.getBuild":{"code":"\r\nIF OBJECT_ID('api.getBuild') IS NOT NULL DROP PROCEDURE api.getBuild;\r\nGO\r\nCREATE PROCEDURE [api].[getBuild] @rootID INT=NULL,@hostID INT=NULL  \r\nAS   \r\n\tSET NOCOUNT ON  \r\n\tDECLARE @T TABLE(id INT)  \r\n\tIF @hostID IS NOT NULL INSERT @T SELECT id FROM api.items WHERE hostID=@hostID  \r\n\tELSE IF @rootID IS NOT NULL  \r\n\tBEGIN  \r\n\t\tSELECT @hostID=hostID FROM om.items WHERE id=@rootID \r\n\t\t;WITH P(level,id) AS(    \r\n\t\t\tSELECT 0,@rootID  \r\n\t\tUNION ALL   \r\n\t\t\tSELECT level+1,I.id  \r\n\t\t\tFROM P INNER JOIN api.items I ON I.masterId = P.id and level<50\t\t\t \r\n\t\t)    \r\n\t\tINSERT @T SELECT DISTINCT id FROM P  \r\n\tEND  \r\n  \r\n\tDECLARE @S TABLE(id INT)  \r\n\t;WITH P(level,id,srcID) AS(    \r\n\tSELECT 0,I.id,I.srcID FROM api.items I INNER JOIN @T T ON T.id=I.id AND I.srcID IS NOT NULL  \r\n\tUNION ALL   \r\n\tSELECT level+1,I.id,I.srcID  \r\n\tFROM P INNER JOIN api.items I ON I.id=P.srcID and level<50\t\t\t \r\n\t)    \r\n  \r\n\tINSERT @S SELECT DISTINCT id FROM P WHERE id NOT IN(SELECT id FROM @T)  \r\n  \r\n\t;WITH P(level,id) AS(    \r\n\t\tSELECT 0,id FROM @S  \r\n\tUNION ALL   \r\n\t\tSELECT level+1,I.id  \r\n\t\tFROM P INNER JOIN api.items I ON I.masterId = P.id and level<50\t\t \r\n\t)    \r\n\t--SELECT DISTINCT id FROM P  \r\n  \r\n\tINSERT @T SELECT DISTINCT id FROM P WHERE id NOT IN(SELECT id FROM @T)  \r\n  \r\n\tINSERT @T SELECT id FROM(SELECT DISTINCT I.userID id FROM @T T INNER JOIN api.items I ON I.id=T.id)P WHERE id NOT IN(SELECT id FROM @T)  \r\n\tINSERT @T SELECT id FROM(SELECT DISTINCT I.hostID id FROM @T T INNER JOIN api.items I ON I.id=T.id)P WHERE id NOT IN(SELECT id FROM @T)  \r\n\tINSERT @T SELECT id FROM(SELECT DISTINCT I.ownerID id FROM @T T INNER JOIN api.items I ON I.id=T.id)P WHERE id NOT IN(SELECT id FROM @T)  \r\n\tINSERT @T SELECT DISTINCT A.itemID FROM @T T INNER JOIN om.attributes A ON A.id=T.id AND A.itemID IS NOT NULL WHERE A.itemID NOT IN(SELECT id FROM @T)  \r\n \r\n\t;WITH P(level,id) AS(    \r\n\t\tSELECT 0,masterID FROM api.items WHERE id=@rootID  \r\n\tUNION ALL   \r\n\t\tSELECT level+1,I.masterID  \r\n\t\tFROM P INNER JOIN api.items I ON I.id = P.id and level<50   \r\n\t)  \r\n\tINSERT @T SELECT id FROM P WHERE id NOT IN(SELECT id FROM @T)  \r\n\tINSERT @T VALUES(1)  \r\n  \r\n\tINSERT @T SELECT DISTINCT id FROM om.attributes WHERE itemID IN(SELECT id FROM @T) AND id NOT IN(SELECT id FROM @T)  \r\n  \r\n\tSELECT C.id,C.class name FROM(SELECT DISTINCT I.classID FROM @T T INNER JOIN api.items I ON I.id=T.id)I INNER JOIN om.class C ON C.id=I.classID  \r\n\tUNION  \r\n\tSELECT C.id,C.class name FROM om.class C WHERE id IN(1000,1002,1003,1004)  \r\n  \r\n\tSELECT F.id,F.name FROM(SELECT DISTINCT A.fieldID FROM @T T INNER JOIN api.attributes A ON A.id=T.id) A INNER JOIN om.attributeName F ON F.id=A.fieldID  \r\n\tUNION  \r\n\tSELECT F.id,F.name FROM om.attributeName F WHERE id IN(3,30)  \r\n  \r\n\tSELECT I.* FROM @T T INNER JOIN api.items I ON I.id=T.id AND I.hostID IN(@hostID,1) \r\n\t--where I.id in(3490197)  \r\n\t--where I.id=3557810  \r\n  \r\n\tSELECT A.aid,A.id,A.name,A.value,A.hostID,A.createdDT,A.modDT,A.userID,A.fieldID,A.itemID FROM @T T INNER JOIN om.attributes A ON A.id=T.id  \r\n\t--where T.id in(3557866)  \r\n\t--where a.aid=17876680  \r\n\t--where a.id=3557810 \r\n\r\nGO\r\n"},"api.getItemMessage":{"code":"\r\nIF OBJECT_ID('api.getItemMessage') IS NOT NULL DROP PROCEDURE api.getItemMessage;\r\nGO\r\nCREATE PROCEDURE [api].[getItemMessage]   \r\n\t@a VARCHAR(20) = NULL,    \r\n\t@host VARCHAR(100) = NULL,   \r\n\t@sessionId VARCHAR(100) = NULL,   \r\n\t@uid CHAR(128)=NULL,   \r\n\t@id INT = NULL,   \r\n\t@toId INT = NULL,   \r\n\t@hostID INT = NULL,   \r\n\t@userID INT = NULL,   \r\n\t@accountId INT = NULL,   \r\n\t@pri INT = NULL,   \r\n\t@groupID INT = NULL,   \r\n\t@domainId INT = NULL,   \r\n\t@sendDT DATETIME = NULL,   \r\n\t@aid INT = NULL,   \r\n\t@fromId INT = NULL,   \r\n\t@fav BIT = NULL,   \r\n\t@sentOn VARCHAR(250) = NULL,   \r\n\t@from VARCHAR(250) = NULL,   \r\n\t@to VARCHAR(250) = NULL,   \r\n\t@cc VARCHAR(250)= NULL,   \r\n\t@subject VARCHAR(250)= NULL,   \r\n\t@msg  VARCHAR(MAX)= NULL,   \r\n\t@content VARCHAR(MAX)= NULL,   \r\n\t@email  VARCHAR(MAX)= NULL,   \r\n\t@msgname  VARCHAR(100)= NULL,   \r\n\t@files VARCHAR(MAX)= NULL,   \r\n\t@all BIT= NULL   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\tSET TEXTSIZE 2147483647   \r\n\tSET DATEFORMAT DMY   \r\n\tDECLARE @classID INT   \r\n\t--IF @userID IS NULL SELECT @groupID=groupID,@hostID=hostID,@userID=userID,@accountID=accountID FROM api.hostAccountGet(@host,@sessionId)   \r\n\t--SELECT * FROM api.hostAccountGet('moba.aliconnect.nl','btmb5dogbhg25tmsrvd6cp8mn7')   \r\n\tDECLARE @T TABLE(id INT,new TINYINT)   \r\n\t--EXEC auth.userGet @sessionId=@sessionId, @host=@host, @groupID=@groupID OUTPUT, @hostID=@hostID OUTPUT, @userID=@userID OUTPUT, @accountId=@accountId OUTPUT, @domainId=@domainId OUTPUT   \r\n\tIF @fromId IS NOT NULL SET @userID = @fromId   \r\n\t   \r\n\tIF @a='sharedusers'   \r\n\tBEGIN   \r\n\t\tSELECT U.name,IU.fav,U.id userID, IU.id   \r\n\t\tFROM om.itemFav IU   \r\n\t\tINNER JOIN auth.users U ON U.id = IU.userID AND IU.id=@id   \r\n\tEND   \r\n\tELSE IF @a='get'   \r\n\tBEGIN   \r\n\t\tSELECT M.createdDT,FU.name AS FromName,M.msg,FU.id AS FromId,M.aid    \r\n\t\tFROM om.msg M    \r\n\t\tINNER JOIN auth.users FU ON FU.id = M.fromId AND M.itemid = @id AND pri IS NULL   \r\n\t\tORDER BY createdDT    \r\n\t\tUPDATE om.itemFav SET sendMsgDt = NULL WHERE id = @id AND userID = @userID   \r\n\t\tUPDATE api.msg SET readDt=GETUTCDATE() WHERE itemId=@id AND toId = @userID AND readDt IS NULL   \r\n\tEND   \r\n\tELSE IF @a='userlist'   \r\n\tBEGIN   \r\n\t\tINSERT @T(id)   \r\n\t\tselect F.id   \r\n\t\tfrom om.itemfav F   \r\n\t\tinner join api.items I ON F.userID=@accountId AND I.id=F.id AND I.hostID=@hostID --AND(F.notifiedDt IS NULL OR F.notifiedDt<I.modifiedDT)   \r\n\t\tleft outer join om.itemUserVisit V ON V.id=I.id AND V.userID=@userID   \r\n\t\tWHERE I.modifiedDT>V.lastvisitDT OR V.lastvisitDT IS NULL   \r\n\t\tSELECT I.name,I.subject,I.modifiedDT,I.id   \r\n\t\tFROM @T T   \r\n\t\tINNER JOIN om.items I ON I.id=T.id   \r\n\t\t--SELECT * FROM api.msg WHERE toId = @userID AND readDt IS NULL AND hostID = @hostID   \r\n\tEND   \r\n\tELSE IF @a='check'   \r\n\tBEGIN   \r\n\t\tINSERT @T(id,new)   \r\n\t\tSELECT F.id,CASE WHEN F.notifiedDt IS NULL OR F.notifiedDt<I.modifiedDT THEN 1 ELSE 0 END   \r\n\t\tFROM om.itemfav F   \r\n\t\tINNER JOIN api.items I ON    \r\n\t\t\tF.userID=@accountId    \r\n\t\t\tAND I.id=F.id    \r\n\t\t\tAND I.hostID=@hostID    \r\n\t\t\tAND(@all=1 OR F.notifiedDt IS NULL OR F.notifiedDt<I.modifiedDT)   \r\n\t\t\tAND I.modifiedByID<>@userID   \r\n\t\tLEFT OUTER JOIN om.itemUserVisit V ON V.id=I.id AND V.userID=@userID --AND V.hostID=@hostID   \r\n\t\tWHERE I.modifiedDT>V.lastvisitDT OR V.lastvisitDT IS NULL   \r\n\t\tSELECT I.*,T.new   \r\n\t\tFROM @T T   \r\n\t\tINNER JOIN api.listitems I ON I.id=T.id --AND T.new=1   \r\n\t\tUPDATE om.itemFav SET notifiedDt=GETUTCDATE()   \r\n\t\tFROM @T T   \r\n\t\tWHERE om.itemFav.userID=@accountId AND om.itemFav.id=T.id AND T.new=1   \r\n\tEND   \r\n\tELSE IF @a='send'   \r\n\tBEGIN   \r\n\t\tIF @from IS NOT NULL SELECT @userID=id FROM auth.email WHERE email=@from   \r\n\t\tIF @subject IS NULL AND @id IS NOT NULL SELECT @subject = name FROM om.items WHERE id = @id    \r\n\t\tIF @hostID IS NULL AND @id IS NOT NULL SELECT @hostID=hostID FROM om.items WHERE id=@id   \r\n\t\tIF @msgname IS NOT NULL SELECT @msg=msg,@subject=subject from cfg.msg WHERE name=@msgname   \r\n   \r\n\t\t   \r\n\t\t--IF @accountID IS NULL SELECT @accountID=I.id FROM om.attributes F INNER JOIN om.items I ON I.id=F.id AND I.classid=1004 AND F.name='EmailAddresses0Address' AND F.value=@from   \r\n   \r\n\t\tIF @accountID IS NULL SELECT @accountID=I.id FROM om.items I WHERE I.hostID=@hostID AND I.classID=1004 AND I.toID=@userID--I.id=F.id AND I.classid=1004 AND F.name='EmailAddresses0Address' AND F.value=@from   \r\n\t\t--select @userID,@hostID,@accountID   \r\n\t\t--return   \r\n   \r\n\t\tIF @accountID IS NULL RETURN   \r\n   \r\n\t\tIF NOT EXISTS(SELECT 0 FROM om.itemFav WHERE id=@id AND userID=@accountID) INSERT om.itemFav(userID,id,fav) VALUES(@accountID,@id,1)   \r\n\t\tINSERT om.msg(itemId,domainId,hostID,fromId,pri,subject,msg,files) VALUES(ISNULL(@id,@userID),@domainId,@hostID,ISNULL(@fromId,@userID),@pri,@subject,@msg,@files)   \r\n\t\t--SET @aid = scope_identity()   \r\n\t\t--IF @toId IS NOT NULL    \r\n\t\t--\tINSERT om.msgTo(msgAid,toId,sendDT)    \r\n\t\t--\tVALUES(@aid,@toId,@sendDT)   \r\n\t\t--ELSE IF @id IS NOT NULL   \r\n\t\t--BEGIN   \r\n\t\t--\tINSERT om.msgTo(msgAid,toId,sendDT)    \r\n\t\t--\tSELECT @aid,userID,@sendDT   \r\n\t\t--\tFROM om.itemFav F   \r\n\t\t--\tWHERE id=@id AND userID <> ISNULL(@fromId,@userID) AND sendMsgDt IS NULL   \r\n\t\t--\tSET @msg = '{\"Subject\":\"'+@subject+'\",\"msgs\":{\"name\":\"'+@subject+'\",\"content\":\"Er staat nieuwe informatie over dit onderwerp op Aliconnect portal\",\"href\":\"'+@host+'\"}}'   \r\n\t\t--\tINSERT mail.queue(toId,domainId,msg)   \r\n\t\t--\tSELECT F.userID,@domainId,@msg   \r\n\t\t--\tFROM om.itemFav F   \r\n\t\t--\tLEFT OUTER JOIN auth.hostLogin L ON    \r\n\t\t--\t\tL.id = @hostID AND L.userID = F.userID   \r\n\t\t--\tWHERE   \r\n\t\t--\t\tF.id=@id AND F.userID <> ISNULL(@fromId,@userID) AND sendMsgDt IS NULL    \r\n\t\t--\t\tAND L.hasFocus IS NULL   \r\n\t\t--\tUPDATE om.itemFav SET sendMsgDt = GETUTCDATE() WHERE id = @id AND userID <> @userID AND sendMsgDt IS NULL   \r\n\t\t--END   \r\n\t\tSELECT @msg AS msg   \r\n\t-- api.msgGet @a='send',@id=2407466,@host='alicon.nl',@fromId=265090,@toId=2407409,@subject='TEST',@msg='{\"content\":\"TEST\"}'   \r\n\tEND   \r\n\tELSE IF @a='del'   \r\n\tBEGIN   \r\n\t\tDELETE om.msg WHERE aid=@aid   \r\n\t\tDELETE om.msgTo WHERE msgaid=@aid   \r\n\tEND   \r\n\tELSE IF @a='toggle'   \r\n\tBEGIN   \r\n\t\t--SELECT @accountId = id FROM api.items WHERE classID=1100 AND srcID=@userID AND hostID=@hostID    \r\n\t\tDELETE om.itemFav WHERE userID = @accountId AND id=@id   \r\n\t\tIF @fav=1    \r\n\t\tBEGIN   \r\n\t\t\tSELECT @classID=classID FROM om.items WHERE id=@id   \r\n\t\t\tIF @classID=1004   \r\n\t\t\tBEGIN   \r\n\t\t\t\tEXEC api.setAttribute @id=@id,@name='Fav',@hostID=@hostID,@userID=@HostID,@www=1,@value='Fav'   \r\n\t\t\t\t--EXEC api.setAttribute @id=2698395,@name='Fav',@hostID=2347355,@userID=2347355,@www=1   \r\n\t\t\t --   DECLARE @ContactID INT,@SrcID INT,@JobTitle VARCHAR(200),@name VARCHAR(200)   \r\n\t\t\t\t----SELECT @hostID=hostID,@accountID=accountID FROM api.hostAccountGet('$post->host','$post->sessionID')   \r\n\t\t\t\t--SELECT @ToID=ToID,@FromID=FromID,@JobTitle=subject,@name=name FROM api.items WHERE id=@id   \r\n\t\t\t\t--SELECT @ContactID=id FROM api.items WHERE hostID=@hostID AND FromID=@FromID AND ToID=@ToID AND classID=1100   \r\n\t\t\t\t--IF @ContactID IS NULL   \r\n\t\t\t\t--BEGIN   \r\n\t\t\t\t--\tINSERT om.items(ClassID,HostID,FromID,ToID,name) VALUES(1100,@hostID,@FromID,@ToID,@name)   \r\n\t\t\t\t--\tSET @ContactID=scope_identity()   \r\n\t\t\t\t--END   \r\n\t\t\t\t--UPDATE om.items SET srcID=@id WHERE id=@ContactID   \r\n\t\t\t\t--EXEC api.setAttribute @id=@ContactID,@name='DisplayName',@hostID=@hostID,@ClassID=1000,@ItemID=@ToID   \r\n\t\t\t\t--EXEC api.setAttribute @id=@ContactID,@name='Company',@hostID=@hostID,@ClassID=1002,@ItemID=@FromID   \r\n\t\t\t\t--EXEC api.setAttribute @id=@ContactID,@name='JobTitle',@hostID=@hostID,@Value=@JobTitle   \r\n\t\t\t\t--SET @id=@ContactID   \r\n\t\t\t\tSELECT @id AS id--,@hostID hostID   \r\n\t\t\tEND   \r\n\t\t\tELSE INSERT om.itemFav(userID,id,fav) VALUES(@accountId,@id,1)   \r\n\t\tEND   \r\n\tEND \r\n\r\nGO\r\n"},"api.getTree":{"code":"\r\nIF OBJECT_ID('api.getTree') IS NOT NULL DROP PROCEDURE api.getTree;\r\nGO\r\nCREATE PROCEDURE [api].[getTree] @id INT \r\nAS \r\n\tDECLARE @T TABLE(level int,id int) \r\n\t;WITH P(level,id) AS( \r\n\t\tSELECT 0,@id \r\n\t\tUNION ALL \r\n\t\tSELECT level+1,I.id \r\n\t\tFROM P INNER JOIN api.items I ON I.masterID=P.id AND level<50 --AND ISNULL(I.selected,1)=1 \r\n\t) \r\n\t--SELECT * FROM P WHERE id IN(3564680, 3564681, 3564682, 3564683) \r\n \r\n\tINSERT @T SELECT * FROM P \r\n \r\n\t--SELECT * FROM api.citems WHERE id IN(3564680, 3564681, 3564682, 3564683) or detailID IN(3564680, 3564681, 3564682, 3564683) \r\n \r\n\t--SELECT * FROM @T WHERE id IN(3564680, 3564681, 3564682, 3564683) \r\n \r\n\t--SELECT P.level,I.*  \r\n\tSELECT P.level,I.id,I.detailID,name,title,masterID,srcID,classID,I.[schema],I.class,modifiedDT,I.idx,ISNULL(I.selected,1)selected \r\n\tFROM @T P INNER JOIN api.citems I ON I.id = P.id \r\n\t--WHERE I.id IN(3564680, 3564681, 3564682, 3564683) \r\n\tORDER BY level,I.idx \r\n \r\n\t;WITH P(level,id,srcID) AS(SELECT 0,I.id,I.id FROM @T I UNION ALL SELECT level+1,P.id,ISNULL(I.inheritedID,I.srcID) FROM api.items I INNER JOIN P ON I.id=P.srcID AND level<20) \r\n\tSELECT P.id,A.aid,A.id attributeItemID,A.name,A.value,A.itemID,CONVERT(VARCHAR(50),A.modifiedDT,127)modifiedDT,A.userID  \r\n\tFROM P INNER JOIN api.attributes A ON A.id=P.srcID AND A.value IS NOT NULL AND P.srcID IS NOT NULL  \r\n\tAND A.name IN( \r\n\t\t'ReadAddress', \r\n\t\t'ReadAddressBit', \r\n\t\t'ReadAddressLength', \r\n\t\t'ReadLength', \r\n\t\t'ReadRegister', \r\n\t\t'IPAddress', \r\n\t\t'Port', \r\n\t\t'PollInterval', \r\n\t\t'Community', \r\n\t\t'Unit', \r\n\t\t'Title', \r\n\t\t'AttributeType', \r\n\t\t'SignalType', \r\n \r\n\t\t'Value', \r\n\t\t'State', \r\n\t\t'Disconnected', \r\n\t\t--'Connected', \r\n\t\t--'CriticalFailure', \r\n\t\t--'NonCriticalFailure', \r\n\t\t--'Locking', \r\n\t\t--'Maintenance', \r\n\t\t--'Running', \r\n\t\t--'RunningMode', \r\n\t\t--'Security', \r\n\t\t--'PreWarning_1', \r\n\t\t--'PreWarning_2', \r\n\t\t--'PreWarning_3', \r\n\t\t--'Measurement_1', \r\n\t\t--'Measurement_2', \r\n\t\t--'Measurement_3', \r\n\t\t--'Measurement_4', \r\n\t\t--'Measurement_5', \r\n\t\t--'MeasurementErrorFlag', \r\n \r\n \r\n \r\n\t\t'Low', \r\n\t\t'High', \r\n\t\t'Enum', \r\n\t\t'RawMin', \r\n\t\t'RawMax', \r\n \r\n\t\t'MinRawValue', \r\n\t\t'MaxRawValue', \r\n \r\n\t\t'MinEngValue', \r\n\t\t'MaxEngValue', \r\n \r\n\t\t'MinValidValue', \r\n\t\t'MaxValidValue', \r\n\t\t'Deadband', \r\n\t\t'Hysteresis', \r\n\t\t'OID', \r\n\t\t'Quality') \r\n\tORDER BY P.level DESC \r\n\r\nGO\r\n"},"auth.addAccount":{"code":"\r\nIF OBJECT_ID('auth.addAccount') IS NOT NULL DROP PROCEDURE auth.addAccount;\r\nGO\r\nCREATE PROCEDURE [auth].[addAccount] @accountID INT=NULL,@publicCompanyID INT=NULL,@email VARCHAR(50)=NULL,@hostID INT=NULL,@companyID INT=NULL,@byID INT=NULL,@groupID INT=NULL,@companyName VARCHAR(200)=NULL,@hostname VARCHAR(50)=NULL   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n    DECLARE  @errMsg VARCHAR(250),@DisplayName VARCHAR(250),@domain VARCHAR(250),@userID INT,@ownerID INT,@contactID INT,@homeID INT, @publicContactID INT,@aid INT,@siteID INT,@contactName VARCHAR(200),@groupName VARCHAR(200),@userName VARCHAR(200),@byName VARCHAR(200)   \r\n\tBEGIN TRY    \r\n\t\tEXEC api.getAttribute @id=@hostID,@name='CompanyName',@value=@hostName OUTPUT   \r\n\t\t\t\t-- COMPANY ========================================================================================================   \r\n\t\tIF @publicCompanyID IS NOT NULL   \r\n\t\tBEGIN   \r\n\t\t\tSELECT @userID=userID,@hostName=keyname FROM om.items WHERE id=@publicCompanyID   \r\n\t\t\tIF @userID IS NULL RETURN--RAISERROR('No UserID',15,0)    \r\n\t\t\tIF @hostName IS NULL RETURN--RAISERROR('No HostName',15,0)    \r\n\t\t\tEXEC api.getAttribute @id=@publicCompanyID,@name='CompanyName',@value=@companyName OUTPUT   \r\n\t\t\tEXEC api.getAttribute @id=@publicCompanyID,@name='domain',@value=@domain OUTPUT   \r\n\t\t\tEXEC api.getAttribute @id=@userID,@name='EmailAddresses2Address',@value=@email OUTPUT   \r\n\t\t\tIF @email IS NULL RETURN--RAISERROR('No Email',15,0)    \r\n\t\t\t--UPDATE om.items SET config=NULL where id=2789066   \r\n\t\t\t--UPDATE om.items SET config=H.config FROM(SELECT id,config FROM om.items WHERE id=1) H WHERE om.items.id=@publicCompanyID   \r\n\t\t\t--SELECT @userID=userID,@hostName=keyname FROM om.items WHERE id=@publicCompanyID   \r\n\t\t\tIF NOT EXISTS(SELECT 0 FROM auth.host WHERE id=@publicCompanyID) INSERT auth.host(id)VALUES(@publicCompanyID)   \r\n\t\t\tUPDATE auth.host SET name=@hostName,domain=@domain,mailAccountAid=ISNULL(mailAccountAid,2) WHERE id=@publicCompanyID   \r\n\t\t\t-- GROUP   \r\n\t\t\tSELECT @groupID=id FROM api.items WHERE hostID=@publicCompanyID AND classID=1103 AND name='Admin' -- get Admin groupID   \r\n\t\t\tIF @groupID IS NULL SELECT TOP 1 @groupID=id FROM api.items WHERE hostID=@publicCompanyID AND classID=1103 -- get first available groupID   \r\n\t\t\tIF @groupID IS NULL -- Create Group Admin   \r\n\t\t\tBEGIN   \r\n\t\t\t\tINSERT om.items(hostID,classID,name)VALUES(@publicCompanyID,1103,'Admin')   \r\n\t\t\t\tSET @groupID=SCOPE_IDENTITY()   \r\n\t\t\tEND   \r\n\t\t\tSELECT @groupName=name FROM om.items WHERE id=@groupID   \r\n\t\t\t-- SITE   \r\n\t\t\tSELECT @siteID=id FROM api.items WHERE classID=1091 AND masterID=@publicCompanyID   \r\n\t\t\tIF @siteID IS NULL    \r\n\t\t\tBEGIN   \r\n\t\t\t\tINSERT om.items(hostID,classID,name,masterID)VALUES(@publicCompanyID,1091,@companyName,@publicCompanyID)   \r\n\t\t\t\tSET @siteID=SCOPE_IDENTITY()   \r\n\t\t\tEND   \r\n\t\t\tUPDATE om.items SET keyname=ISNULL(@hostName,keyname) WHERE id=@siteID   \r\n\t\t\tSELECT @hostname=keyname FROM om.items WHERE id=@siteID   \r\n\t\t\tSELECT TOP 1 @homeID=id FROM api.items WHERE classID=1092 AND masterID=@siteID ORDER BY idx   \r\n\t\t\tIF @homeID IS NULL    \r\n\t\t\tBEGIN   \r\n\t\t\t\tINSERT om.items(hostID,classID,name,masterID)VALUES(@publicCompanyID,1092,'Home',@siteID)   \r\n\t\t\t\tSET @homeID=SCOPE_IDENTITY()   \r\n\t\t\tEND   \r\n\t\t\t   \r\n\t\t\t--Account   \r\n\t\t\tSELECT @accountID=id FROM api.items WHERE hostID=@publicCompanyID AND classID=1004 AND fromID=@publicCompanyID AND toID=@userID   \r\n\t\t\t--SELECT @publicCompanyID,@userID,@accountID RETURN   \r\n\t\t\tIF @accountID IS NULL   \r\n\t\t\tBEGIN   \r\n\t\t\t\tINSERT om.items(hostID,classID,name) VALUES(@publicCompanyID,1004,@displayName)   \r\n\t\t\t\tSET @accountID=SCOPE_IDENTITY()    \r\n\t\t\tEND   \r\n\t\t\tEXEC api.setAttribute @id=@accountID,@name='DisplayName',@itemID=@userID,@classID=1000,@idname='toID'   \r\n\t\t\tEXEC api.setAttribute @id=@accountID,@name='Company',@itemID=@publicCompanyID,@classID=1002,@idname='fromID'   \r\n\t\t\tEXEC api.setAttribute @id=@accountID,@name='EmailAddresses0Address',@value=@email   \r\n\t\t\tEXEC api.setAttribute @id=@accountID,@name='groupId',@itemID=@groupID,@classID=1103   \r\n\t\tEND   \r\n\t\tIF @accountID IS NOT NULL   \r\n\t\tBEGIN   \r\n\t\t\tSELECT @hostID=hostID,@publicContactID=srcID,@companyID=fromID,@userID=toID FROM om.items WHERE id=@accountID   \r\n\t\t\tSELECT @publicCompanyID=CASE WHEN hostID<>1 THEN srcID ELSE id END FROM om.items WHERE id=@companyID   \r\n\t\t\tEXEC api.getAttribute @id=@accountID,@name='EmailAddresses0Address',@value=@email OUTPUT   \r\n\t\t\tEXEC api.getAttribute @id=@accountID,@name='DisplayName',@value=@DisplayName OUTPUT   \r\n\t\t\tIF @publicContactID IS NULL   \r\n\t\t\tBEGIN   \r\n\t\t\t\t-- Create Public Company if not exists   \r\n\t\t\t\tIF @publicCompanyID IS NULL   \r\n\t\t\t\tBEGIN   \r\n\t\t\t\t\tEXEC api.getAttribute @id=@accountID,@name='Company',@value=@companyName OUTPUT,@itemID=@companyID OUTPUT   \r\n\t\t\t\t\t--IF @companyName IS NULL RAISERROR('Missing CompanyName',15,0)    \r\n\t\t\t\t\tSELECT @publicCompanyID=id FROM api.items WHERE hostID=1 AND classID=1002 AND name=@companyName   \r\n\t\t\t\t\tIF @publicCompanyID IS NULL    \r\n\t\t\t\t\tBEGIN   \r\n\t\t\t\t\t\tINSERT om.items(hostID,classID,name,www)VALUES(1,1002,@companyName,1)   \r\n\t\t\t\t\t\tSET @publicCompanyID=SCOPE_IDENTITY()   \r\n\t\t\t\t\tEND   \r\n\t\t\t\t\tUPDATE om.items SET www=1 WHERE id=@publicCompanyID   \r\n\t\t\t\t\tUPDATE om.items SET srcID=@publicCompanyID WHERE id=@companyID   \r\n\t\t\t\tEND   \r\n\t\t\t\tIF @email IS NULL RAISERROR('Missing Email',15,0)    \r\n\t\t\t\tSELECT @aid=aid,@userID=I.id FROM auth.email E LEFT OUTER JOIN api.items I ON I.id=E.id WHERE email=@email   \r\n\t\t\t\tIF @aid IS NULL BEGIN   \r\n\t\t\t\t\tINSERT auth.email(email)VALUES(@email)   \r\n\t\t\t\t\tSET @aid=scope_identity()   \r\n\t\t\t\tEND   \r\n\t\t\t\tIF @userID IS NULL BEGIN   \r\n\t\t\t\t\tINSERT om.items(hostID,classID,name,www)VALUES(1,1000,@DisplayName,1)   \r\n\t\t\t\t\tSET @userID=scope_identity()   \r\n\t\t\t\t\tUPDATE auth.email SET id=@userID WHERE aid=@aid   \r\n\t\t\t\t\tEXEC api.setAttribute @id=@userID,@name='EmailAddresses2Address',@value=@email   \r\n\t\t\t\t\tINSERT auth.users(id)VALUES(@userID)   \r\n\t\t\t\tEND   \r\n\t\t\t\tEXEC api.setAttribute @id=@accountID,@name='DisplayName',@itemID=@userID,@classID=1000,@idname='toID'   \r\n\t\t\t\tSELECT @publicContactID=id FROM api.items WHERE hostID=1 AND classID=1004 AND fromID=@publicCompanyID AND toID=@userID   \r\n\t\t\t\tIF @publicContactID IS NULL   \r\n\t\t\t\tBEGIN   \r\n\t\t\t\t\tINSERT om.items(hostID,classID,name,www)VALUES(1,1004,@DisplayName,1)    \r\n\t\t\t\t\tSET @publicContactID=SCOPE_IDENTITY()    \r\n\t\t\t\t\tEXEC api.setAttribute @id=@publicContactID,@name='DisplayName',@itemID=@userID,@classID=1000,@value=@displayName,@idname='toID'   \r\n\t\t\t\t\tEXEC api.setAttribute @id=@publicContactID,@name='Company',@itemID=@publicCompanyID,@classID=1002,@idname='fromID'   \r\n\t\t\t\t\tEXEC api.setAttribute @id=@publicContactID,@name='EmailAddresses0Address',@value=@email   \r\n\t\t\t\tEND   \r\n\t\t\t\tUPDATE om.items SET www=1 WHERE id=@publicContactID   \r\n\t\t\t\tUPDATE om.items SET srcID=@publicContactID WHERE id=@accountID   \r\n\t\t\t\t--IF @ownerID IS NULL EXEC auth.addUserMsg @userID=@userID,@name='nocompanyowner',@itemID=@publicCompanyID,@byID=@byID   \r\n\t\t\tEND   \r\n\t\t\t--select @publicContactID,@userID return   \r\n\t\t\tIF NOT EXISTS(SELECT id FROM auth.users WHERE id=@userID) INSERT auth.users(id)VALUES(@userID)   \r\n\t\t\tSELECT @userName=name FROM om.items WHERE id=@userID   \r\n\t\t\tEXEC api.setAttribute @id=@publicContactID,@name='groupId',@classID=1103,@itemID=2619989   \r\n\t\t\tEXEC api.getAttribute @id=@publicCompanyID,@name='owner',@itemID=@ownerID OUTPUT   \r\n\t\t\t--SELECT @ownerid,@publicCompanyID   \r\n\t\t\tEXEC api.getAttribute @id=@accountID,@name='groupId',@itemID=@groupID OUTPUT   \r\n\t\t\tDELETE auth.userMsg WHERE userID=@userID AND name='nocompanyowner'   \r\n\t\t\tEXEC auth.addUserMsg @userID=@userID,@name='newcontact',@itemID=@accountID,@byID=@byID   \r\n\t\t\tEXEC auth.addUserMsg @userID=@userID,@name='newpubliccontact',@itemID=@publicContactID,@byID=@byID   \r\n\t\t\tIF @groupID IS NOT NULL EXEC auth.addUserMsg @userID=@userID,@name='newaccount',@itemID=@accountID,@byID=@byID   \r\n\t\t\tEXEC auth.addUserMsg @userID=@userID,@name='newuser',@itemID=@userID,@byID=@byID   \r\n\t\t\tIF @ownerID IS NULL    \r\n\t\t\t\tEXEC auth.addUserMsg @userID=@userID,@name='nocompanyowner',@itemID=@publicCompanyID,@byID=@byID   \r\n\t\tEND   \r\n\t\t-- AFRONDEN   \r\n\t\tSELECT @byName=name FROM om.items WHERE id=ISNULL(@byID,@userID)   \r\n\t\tSELECT H.id hostID,H.keyname host,H.name hostName,@companyID companyID,C.name companyName,@publicCompanyID publicCompanyID,@domain domain,@userID userID,U.name userName,@displayName displayName,@groupID groupID,G.name groupName,@siteID siteID,@homeID homeID,@publicContactID publicContactID,@accountID accountID,@byID byID,@email email   \r\n\t\t,BA.name byName,BA.subject byJobName, BA.summary AS byCompany   \r\n\t\tFROM api.items H    \r\n\t\tLEFT OUTER JOIN api.items PC ON PC.id=@publicCompanyID   \r\n\t\tLEFT OUTER JOIN api.items C ON C.id=@companyID   \r\n\t\tLEFT OUTER JOIN api.items U ON U.id=@userID   \r\n\t\tLEFT OUTER JOIN api.items G ON G.id=@groupID   \r\n\t\tLEFT OUTER JOIN auth.account BA ON BA.hostID=H.id AND BA.userID=@byID   \r\n\t\t--api.items AC ON AC.hostID=@publicCompanyID AND BA.classID=1004 AND BA.toID=@userID   \r\n\t\t--LEFT OUTER JOIN api.items AB ON AB.hostID=@publicCompanyID AND BA.classID=1004 AND BA.toID=@userID   \r\n\t\tWHERE H.id=@hostID   \r\n\t\tSELECT M.*,I.name AS byName,R.name AS itemName,T.name AS toName,F.name AS fromName,H.name AS hostName ,H.keyname AS host   \r\n\t\tFROM auth.userMsg M    \r\n\t\t\tLEFT OUTER JOIN api.items I ON I.id=M.createdByID    \r\n\t\t\tLEFT OUTER JOIN api.items R ON R.id=M.itemID    \r\n\t\t\tLEFT OUTER JOIN api.items T ON T.id=R.toID    \r\n\t\t\tLEFT OUTER JOIN api.items F ON F.id=R.fromID    \r\n\t\t\tLEFT OUTER JOIN api.items H ON H.id=R.hostID    \r\n\t\tWHERE M.userID=@userID AND M.sendDT IS NULL   \r\n\t\t--DELETE auth.userMsg WHERE name='newaccount' AND itemID=2773170   \r\n\t\t--SELECT * FROM auth.userMsg WHERE name='newaccount' AND itemID=2773170   \r\n\t\tRETURN   \r\n\tEND TRY   \r\n\tBEGIN CATCH   \r\n\t\tSET @errMsg = ERROR_MESSAGE()   \r\n\t\tRAISERROR(@errMsg, 15, 0)   \r\n\t\tRETURN   \r\n\tEND CATCH   \r\n\tRETURN \r\n\r\nGO\r\n"},"auth.getAccount":{"code":"\r\nIF OBJECT_ID('auth.getAccount') IS NOT NULL DROP PROCEDURE auth.getAccount;\r\nGO\r\nCREATE PROCEDURE [auth].[getAccount] @email VARCHAR(500)=NULL, @hostName VARCHAR(50)=NULL, @groupName VARCHAR(50)=NULL, @password VARCHAR(50)=NULL, @hostId INT=NULL OUTPUT, @userId INT=NULL OUTPUT, @accountId INT=NULL OUTPUT, @groupId INT=NULL OUTPUT,@verified BIT=NULL OUTPUT,@pwOk BIT=NULL OUTPUT,@select BIT=NULL  \r\nAS  \r\n\tDECLARE @userName VARCHAR(500),@accountName VARCHAR(500),@userUid VARCHAR(128),@hostUid VARCHAR(128),@accountUid VARCHAR(128),@groupUid VARCHAR(128)  \r\n\t,@user_secret VARCHAR(128)  \r\n \r\n\tIF @hostId IS NULL SELECT @hostId=id FROM api.items WHERE hostID=1 AND classID=1002 AND keyname=@hostName  \r\n\tIF @hostName IS NULL SELECT @hostName=keyname FROM api.items WHERE id=@hostId  \r\n\tIF @userId IS NOT NULL SELECT @email=value,@verified=CASE WHEN id=userId THEN 1 ELSE 0 END FROM om.attributes WHERE id=@userId AND fieldId=30  \r\n\tELSE SELECT @userId=id,@verified=CASE WHEN id=userId THEN 1 ELSE 0 END FROM om.attributes WHERE fieldId=30 AND value=@email  \r\n\tIF @password IS NOT NULL SELECT @pwOk=pwdcompare(@password,password)FROM auth.users WHERE id=@userId  \r\n\tSELECT @accountId=I.id,@groupId=A.itemId,@accountName=I.title,@groupName=A.value  \r\n\t\tFROM api.items I  \r\n\t\tINNER JOIN api.attributes A ON I.hostId=@hostId AND A.id=I.id AND A.fieldId=3 AND I.toId=@userId  \r\n\tSELECT @userName=title FROM api.items WHERE id=@userId  \r\n\tSELECT @accountName=ISNULL(title,@userName) FROM api.items WHERE id=@accountId  \r\n\tSELECT @hostUid=uid FROM api.items WHERE id=@hostId  \r\n\tIF @userId IS NOT NULL \r\n\tBEGIN \r\n\t\tSELECT @userUid=uid,@user_secret=secret FROM api.items WHERE id=@userId  \r\n\t\tIF @user_secret IS NULL \r\n\t\tBEGIN \r\n\t\t\tSET @user_secret=newid() \r\n\t\t\tUPDATE om.items SET secret=@user_secret WHERE id=@userId  \r\n\t\tEND \r\n\t\tSELECT @accountUid=uid FROM api.items WHERE id=@accountId  \r\n\t\tSELECT @groupUid=uid FROM api.items WHERE id=@groupId  \r\n\tEND \r\n  \r\n\tIF @select IS NOT NULL  \r\n\t\tSELECT  \r\n\t\t\t@email email, \r\n\t\t\t@userName userName, \r\n\t\t\t@hostName hostName,  \r\n\t\t\t@accountName accountName, \r\n\t\t\t@groupName groupName,  \r\n\t\t\t@verified verified,  \r\n\t\t\t@pwOk [pwdcompare],  \r\n\t\t\t@userId userID,  \r\n\t\t\t@hostId hostID,  \r\n\t\t\t@accountId accountID,  \r\n\t\t\t@groupId groupID,  \r\n\t\t\t@hostUid hostUID,  \r\n\t\t\t@userUid userUID,  \r\n\t\t\t@user_secret user_secret,  \r\n\t\t\t@accountUid accountUID,  \r\n\t\t\t@groupUid groupUID \r\n\r\nGO\r\n"},"auth.getContact":{"code":"\r\nIF OBJECT_ID('auth.getContact') IS NOT NULL DROP PROCEDURE auth.getContact;\r\nGO\r\nCREATE PROCEDURE [auth].[getContact] @accountID INT=NULL,@email VARCHAR(50)=NULL,@hostID INT=NULL,@publicCompanyID INT=NULL,@companyID INT=NULL,@byID INT=NULL,@groupID INT=NULL,@companyName VARCHAR(200)=NULL,@hostname VARCHAR(50)=NULL,@domain VARCHAR(50)=NULL   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n    DECLARE @userID INT,@ownerID INT,@contactID INT,@homeID INT, @publicContactID INT,@aid INT,@siteID INT,@contactName VARCHAR(200),@groupName VARCHAR(200),@userName VARCHAR(200),@byName VARCHAR(200)   \r\n\t-- ========================================================================================================   \r\n\t-- HAS CompanyID   \r\n\t--IF @hostID IS NOT NULL SET @publicCompanyID = @hostID   \r\n\tIF @publicCompanyID IS NOT NULL   \r\n\tBEGIN   \r\n\t\tEXEC api.getAttribute @id=@publicCompanyID,@name='hostName',@value=@hostname OUTPUT   \r\n\t\tEXEC api.getAttribute @id=@publicCompanyID,@name='owner',@itemID=@ownerID OUTPUT   \r\n\t\tEXEC api.getAttribute @id=@publicCompanyID,@name='CompanyName',@value=@companyName OUTPUT   \r\n\t\tEXEC api.getAttribute @id=@ownerID,@name='EmailAddresses0Address',@value=@email OUTPUT   \r\n\t\tSELECT @userID=toID FROM om.items WHERE id=@ownerID   \r\n\t\t--SELECT @ownerID,@email,@hostname,@companyName   \r\n\t\t--RETURN   \r\n\tEND   \r\n\t-- ========================================================================================================   \r\n\t-- User and Email   \r\n\tIF @email IS NULL AND @accountID IS NOT NULL SELECT @email=value FROM om.attributes WHERE id=@accountID AND fieldID=931   \r\n\tIF @email IS NULL RAISERROR('Missing Email',15,0)    \r\n\t--SELECT @accountID RETURN   \r\n\t--SELECT @contactName=value,@userID=itemID FROM om.attributes WHERE id=@accountID AND fieldID=921   \r\n\tSELECT @aid=aid,@userID=id FROM auth.email WHERE email=@email   \r\n\tIF @aid IS NULL   \r\n\tBEGIN   \r\n\t\tINSERT auth.email(email)VALUES(@email)   \r\n\t\tSET @aid=scope_identity()   \r\n\tEND   \r\n\tIF @userID IS NULL    \r\n\tBEGIN   \r\n\t\tINSERT om.items(classID,name,hostID)VALUES(1000,@email,1)   \r\n\t\tSET @userID=scope_identity()   \r\n\t\tUPDATE auth.email SET id=@userID WHERE aid=@aid   \r\n\t\tEXEC api.setAttribute @id=@userID,@name='EmailAddresses2Address',@value=@email   \r\n\tEND   \r\n\tIF NOT EXISTS(SELECT id FROM auth.users WHERE id=@userID) INSERT auth.users(id)VALUES(@userID)   \r\n\tSELECT @userName=name FROM om.items WHERE id=@userID   \r\n\tDELETE auth.userMsg WHERE userID=@userID   \r\n\tEXEC auth.addUserMsg @userID=@userID,@name='newuser',@itemID=@userID,@byID=@byID   \r\n\t-- ========================================================================================================   \r\n\t-- Company and host   \r\n\tIF @accountID IS NOT NULL SELECT @companyID=itemID FROM om.attributes WHERE id=@accountID AND fieldID=740   \r\n\tIF @companyID IS NOT NULL SELECT @publicCompanyID=srcID FROM om.items WHERE id=@companyID   \r\n\tIF @publicCompanyID IS NULL AND @domain IS NOT NULL SELECT @publicCompanyID=id FROM api.items WHERE hostID=1 AND classID=1002 AND keyname=@domain   \r\n\tIF @publicCompanyID IS NULL AND @companyName IS NOT NULL SELECT @publicCompanyID=id FROM api.items WHERE hostID=1 AND classID=1002 AND name=@companyName   \r\n\tIF @publicCompanyID IS NULL AND @companyName IS NULL RAISERROR('Missing @publicCompanyID and @companyName',15,0)    \r\n\tIF @publicCompanyID IS NULL    \r\n\tBEGIN   \r\n\t\tINSERT om.items(classID,name)VALUES(1002,@companyName)   \r\n\t\tSET @publicCompanyID=SCOPE_IDENTITY()   \r\n\t\tUPDATE om.items SET hostID=@publicCompanyID WHERE id=@publicCompanyID   \r\n\tEND   \r\n\tIF @companyName IS NOT NULL UPDATE om.items SET userID=@userID WHERE id=@publicCompanyID   \r\n\tIF @companyName IS NOT NULL EXEC auth.addUserMsg @userID=@userID,@name='newowner',@itemID=@publicCompanyID,@byID=@byID   \r\n\tSELECT @hostID=ISNULL(@hostID,@publicCompanyID),@companyName=name FROM om.items WHERE id=@publicCompanyID   \r\n\t--select @hostID   \r\n\t--RETURN   \r\n\tIF NOT EXISTS(SELECT 0 FROM auth.host WHERE id=@hostID) INSERT auth.host(id)VALUES(@hostID)   \r\n\tUPDATE om.items SET keyname=ISNULL(@domain,keyname) WHERE id=@hostID   \r\n\tUPDATE auth.host SET name=ISNULL(@hostname,name),domain=ISNULL(@domain,domain),mailAccountAid=ISNULL(mailAccountAid,2) WHERE id=@hostID   \r\n\tSELECT @domain=domain FROM auth.host WHERE id=@hostID   \r\n\t-- ========================================================================================================   \r\n\t-- Group   \r\n\tIF @accountID IS NOT NULL AND @groupID IS NULL SELECT @groupID=itemID FROM om.attributes WHERE id=@accountID AND classID=1103--fieldID=1228   \r\n\tIF @accountID IS NOT NULL AND @groupID IS NULL RETURN -- Account data but no group, so no account creation   \r\n\tIF @groupID IS NULL SELECT @groupID=id FROM api.items WHERE hostID=@hostID AND classID=1103 AND name='Admin' -- get Admin groupID   \r\n\tIF @groupID IS NULL SELECT TOP 1 @groupID=id FROM api.items WHERE hostID=@hostID AND classID=1103 -- get first available groupID   \r\n\tIF @groupID IS NULL -- Create Group Admin   \r\n\tBEGIN   \r\n\t\tINSERT om.items(hostID,classID,name)VALUES(@hostID,1103,'Admin')   \r\n\t\tSET @groupID=SCOPE_IDENTITY()   \r\n\tEND   \r\n\tSELECT @groupName=name FROM om.items WHERE id=@groupID   \r\n\t-- ========================================================================================================   \r\n\t-- Site   \r\n\tSELECT @siteID=id FROM api.items WHERE classID=1091 AND masterID=@hostID   \r\n\tIF @siteID IS NULL    \r\n\tBEGIN   \r\n\t\tINSERT om.items(hostID,classID,name,masterID)VALUES(@hostID,1091,@companyName,@hostID)   \r\n\t\tSET @siteID=SCOPE_IDENTITY()   \r\n\tEND   \r\n\tUPDATE om.items SET keyname=ISNULL(@hostName,keyname) WHERE id=@siteID   \r\n\tSELECT @hostname=keyname FROM om.items WHERE id=@siteID   \r\n\tSELECT TOP 1 @homeID=id FROM api.items WHERE classID=1092 AND masterID=@siteID ORDER BY idx   \r\n\tIF @homeID IS NULL    \r\n\tBEGIN   \r\n\t\tINSERT om.items(hostID,classID,name,masterID)VALUES(@hostID,1092,'Home',@siteID)   \r\n\t\tSET @homeID=SCOPE_IDENTITY()   \r\n\tEND   \r\n\t-- ========================================================================================================   \r\n\t-- PublicContact   \r\n\tSELECT @contactName=name FROM om.items WHERE id=@userID   \r\n\tSELECT @publicContactID=id FROM api.items WHERE hostID=1 AND classID=1004 AND fromID=@publicCompanyID AND toID=@userID   \r\n\tIF @publicContactID IS NULL    \r\n\tBEGIN    \r\n\t\tINSERT om.items(hostID,classID,name,www)VALUES(1,1004,@contactName,1)    \r\n\t\tSET @publicContactID=SCOPE_IDENTITY()    \r\n\t\tEXEC api.setAttribute @id=@publicContactID,@name='DisplayName',@itemID=@userID,@idname='toID'   \r\n\t\tEXEC api.setAttribute @id=@publicContactID,@name='Company',@itemID=@publicCompanyID,@idname='fromID'   \r\n\t\tEXEC api.setAttribute @id=@publicContactID,@name='EmailAddresses0Address',@value=@email   \r\n\tEND   \r\n\tEXEC auth.addUserMsg @userID=@userID,@name='newcontact',@itemID=@publicContactID,@byID=@byID   \r\n\t-- ========================================================================================================   \r\n\t-- Account   \r\n\tSELECT @companyID=ISNULL(@companyID,@hostID)   \r\n\tIF @accountID IS NULL SELECT @accountID=id FROM api.items WHERE hostID=@hostID AND classID=1004 AND toID=@userID AND fromID=@companyID   \r\n\tIF @accountID IS NULL    \r\n\tBEGIN    \r\n\t\tINSERT om.items(hostID,classID,name)VALUES(@hostID,1004,@contactName)   \r\n\t\tSET @accountID=SCOPE_IDENTITY()   \r\n\t\tEXEC api.setAttribute @id=@accountID,@name='DisplayName',@itemID=@userID,@idname='toID'   \r\n\t\tEXEC api.setAttribute @id=@accountID,@name='Company',@itemID=@companyID,@idname='fromID'   \r\n\t\tEXEC api.setAttribute @id=@accountID,@name='EmailAddresses0Address',@value=@email   \r\n\tEND   \r\n\tUPDATE om.items SET srcID=@publicContactID WHERE id=@accountID   \r\n\tIF @groupID IS NOT NULL EXEC auth.addUserMsg @userID=@userID,@name='newaccount',@itemID=@accountID,@byID=@byID   \r\n\tSELECT @byName=name FROM om.items WHERE id=ISNULL(@byID,@userID)   \r\n\tSELECT @hostID hostID,@hostname hostName,@companyID companyID,@companyName companyName,@domain domain,@userID userID,@userName userName,@groupID groupID,@groupName groupName,@siteID siteID,@homeID homeID,@publicContactID publicContactID,@accountID accountID,@byID byID,@email email,@byName byName   \r\n\tSELECT M.*,I.name AS byName,R.name AS itemName,T.name AS toName,F.name AS fromName,H.name AS hostName    \r\n\tFROM auth.userMsg M    \r\n\t\tLEFT OUTER JOIN api.items I ON I.id=M.createdByID    \r\n\t\tLEFT OUTER JOIN api.items R ON R.id=M.itemID    \r\n\t\tLEFT OUTER JOIN api.items T ON T.id=R.toID    \r\n\t\tLEFT OUTER JOIN api.items F ON F.id=R.fromID    \r\n\t\tLEFT OUTER JOIN api.items H ON H.id=R.hostID    \r\n\tWHERE M.userID=@userID AND M.sendDT IS NULL \r\n\r\nGO\r\n"},"auth.getUser":{"code":"\r\nIF OBJECT_ID('auth.getUser') IS NOT NULL DROP PROCEDURE auth.getUser;\r\nGO\r\nCREATE PROCEDURE [auth].[getUser] @email VARCHAR(50),@userID INT OUTPUT    \r\nAS   \r\n\tDECLARE @aid INT   \r\n\tSELECT @aid=aid,@userID=id FROM auth.email WHERE email=@email   \r\n\tIF @aid IS NULL   \r\n\tBEGIN   \r\n\t\tINSERT auth.email(email)VALUES(@email)   \r\n\t\tSET @aid=scope_identity()   \r\n\tEND   \r\n\tIF @userID IS NULL    \r\n\tBEGIN   \r\n\t\tINSERT om.items(classID,name,hostID)VALUES(1000,@email,1)   \r\n\t\tSET @userID=scope_identity()   \r\n\t\tUPDATE auth.email SET id=@userID WHERE aid=@aid   \r\n\t\tEXEC api.setAttribute @id=@userID,@name='EmailAddresses2Address',@value=@email   \r\n\tEND   \r\n\tIF NOT EXISTS(SELECT id FROM auth.users WHERE id=@userID) INSERT auth.users(id)VALUES(@userID) \r\n\r\nGO\r\n"},"auth.setHostUser":{"code":"\r\nIF OBJECT_ID('auth.setHostUser') IS NOT NULL DROP PROCEDURE auth.setHostUser;\r\nGO\r\nCREATE PROCEDURE [auth].[setHostUser] @hostID INT=NULL,@userID INT=NULL,@deviceID INT=NULL,@accountID INT=NULL,@groupID INT=NULL     \r\nAS  \r\n\tDECLARE @Periode INT  \r\n\tSET @Periode =DATEPART(year,GETUTCDATE())*100+DATEPART(month,GETUTCDATE())  \r\n\tIF @hostID IS NOT NULL AND @accountID IS NOT NULL EXEC api.setAttribute @id=@accountID,@hostID=1,@modifiedByID=@userID,@name='Periode',@max=0,@class='Periode',@value=@Periode   --AND NOT EXISTS(SELECT 0 FROM om.attributes WHERE id=@deviceID AND itemID=@userID) INSERT om.attributes(id,itemID)VALUES(@deviceID,@userID)  \r\n\t--IF @userID IS NOT NULL   \r\n\t--BEGIN   \r\n\t--\tUPDATE auth.hostLogin SET loginDt=GETUTCDATE() WHERE userID=@userID AND id=@hostID   \r\n\t--\tDECLARE @dt DATETIME, @periode INT   \r\n\t--\tSET @dt = GETUTCDATE()   \r\n\t--\tSET @periode = DATEPART(year,@dt)*100+DATEPART(month,@dt)   \r\n\t--\tIF NOT EXISTS(SELECT 0 FROM auth.hostLoginLog WHERE hostID=@hostID AND userID=@userID AND periode=@periode) INSERT auth.hostLoginLog(hostID,userID,periode,cnt,firstLoginDt,lastLoginDt) VALUES(@hostID,@userID,@periode,1,@dt,@dt)   \r\n\t--\tELSE UPDATE auth.hostLoginLog SET lastLoginDt=@dt WHERE hostID=@hostID AND userID=@userID AND periode=@periode   \r\n\t--END \r\n\r\nGO\r\n"},"mail.addItem":{"code":"\r\nIF OBJECT_ID('mail.addItem') IS NOT NULL DROP PROCEDURE mail.addItem;\r\nGO\r\nCREATE PROCEDURE [mail].[addItem] @hostID INT=NULL,@host VARCHAR(50)=NULL,@ToID INT=NULL,@AccountId INT=NULL,@email VARCHAR(50)=NULL,@name varchar(200)=NULL,@subject varchar(200)=NULL,@hostname varchar(200)=NULL,@ItemID VARCHAR(10)=NULL,@content VARCHAR(MAX)=NULL,@msg VARCHAR(MAX)=NULL,@pri INT=null   \r\nAS   \r\n\tSET NOCOUNT ON   \r\n\tDECLARE @srcid INT,@title VARCHAR(500),@companyname VARCHAR(500),@contactname VARCHAR(500),@summary VARCHAR(500),@basecolor varchar(50)   \r\n\t--IF @HostID IS NULL SELECT @HostID=hostid FROM om.items WHERE id=@accountID   \r\n\tIF @HostID IS NULL SELECT @HostID=id FROM api.items WHERE classID=1002 AND keyname=@host   \r\n\tIF @HostID IS NULL SET @hostID=1   \r\n\tSELECT @hostname=keyname,@companyname=name FROM om.items WHERE id=@HostID   \r\n\tIF @AccountID IS NULL SELECT @AccountID=AccountID FROM auth.account WHERE hostID=@hostID AND UserID=@ToID   \r\n\tSELECT @contactname=title FROM api.items WHERE id=@accountID   \r\n   \r\n\tIF @email IS NULL SELECT @email=value FROM om.attributes WHERE id=@AccountID AND fieldID=931--name='EmailAddresses0Address'   \r\n\tIF @email IS NULL SELECT @email=value FROM om.attributes WHERE id=@AccountID AND fieldID=1118--name='EmailAddresses2Address'   \r\n\t--IF @email IS NULL SELECT @email=value FROM om.attributes WHERE id=@srcID AND name='EmailAddresses0Address'   \r\n\t--IF @email IS NULL SELECT @email=value FROM om.attributes WHERE id=@srcID AND name='EmailAddresses2Address'   \r\n\tIF @email IS NULL SELECT @email=value FROM om.attributes WHERE id=@ToID AND fieldID=1118---name='EmailAddresses2Address'   \r\n\tSELECT @basecolor=value FROM om.attributes WHERE id=@HostID AND fieldID=741--name='basecolor'   \r\n   \r\n\tIF @msg IS NULL   \r\n\tBEGIN   \r\n\t\tSELECT @subject=subject,@summary=summary,@msg=mailmsg FROM cfg.msg WHERE name=@name   \r\n\t\tIF @ItemID IS NOT NULL SELECT @Subject=name,@summary=summary FROM om.items WHERE id=@itemID   \r\n\t\t--SET @msg='{\"mail\":1,\"FromEmail\":\"mailer@alicon.nl\",\"FromName\":\"Aliconnect Max\",\"ReplyToEmail\":\"max@alicon.nl\", \"ReplyToName\":\"Max\",\"to\":\"'+@email+'\",\"Basecolor\":\"#fafafa\",\"Domain\":\"alicon.aliconnect.nl\",\"Hostname\":\"alicon\",\"Subject\":\"'+ISNULL(@subject,'')+'\",\"Summary\":\"'+ISNULL(@summary,'')+'\",\"mailbody\":{\"content\":\"'+ISNULL(@msg,'')+'\",\"ItemID\":0'+ISNULL(@ItemID,'')+'}}'   \r\n\t\tSET @msg=REPLACE(ISNULL(@msg,''),'\"','\\\"')   \r\n\t\tSET @msg=REPLACE(@msg,CHAR(13)+CHAR(10),'<\/p><p>')   \r\n\t\tSET @msg=REPLACE(@msg,CHAR(10),'<br>')   \r\n\t\tSET @msg='{\"content\":\"'+ISNULL(@msg,'')+'\",\"ItemID\":\"'+ISNULL(@ItemID,'')+'\"}'   \r\n\tEND   \r\n\tSET @email='max@alicon.nl';   \r\n\tSET @msg='{\"to\":\"'+isnull(@email,'')+'\",\"bcc\":\"max@alicon.nl\",\"Subject\":\"'+ISNULL(@subject,'')+'\",\"msgs\":{\"content\":\"Beste '+ISNULL(@contactname,'')+',\"},'+@msg+'}'   \r\n\tSET @msg=REPLACE(@msg,'email',ISNULL(@email,''))   \r\n\tSET @msg=REPLACE(@msg,'domain',ISNULL(@hostname,''))   \r\n\tSET @msg=REPLACE(@msg,'subject',ISNULL(@subject,''))   \r\n\tSET @msg=REPLACE(@msg,'summary',ISNULL(@summary,''))   \r\n\tSET @msg=REPLACE(@msg,'toname',ISNULL(@contactname,''))   \r\n\tSET @msg=REPLACE(@msg,'content',ISNULL(@content,''))   \r\n\tSET @msg=REPLACE(@msg,'companyname',ISNULL(@companyname,''))   \r\n\t--SET @msg='{\"mail\":1,\"FromEmail\":\"mailer@alicon.nl\",\"to\":\"'+@email+'\",\"Basecolor\":\"#fafafa\",\"Domain\":\"alicon.aliconnect.nl\",\"Hostname\":\"alicon\",\"Subject\":\"'+ISNULL(@subject,'')+'\",\"Summary\":\"'+ISNULL(@summary,'')+'\",\"mailbody\":{\"content\":\"'+ISNULL(@msg,'')+'\"}}'   \r\n\t--SELECT @hostID,@accountID,@msg   \r\n\tIF @msg IS NOT NULL INSERT mail.queue(host,msg,pri) VALUES(@host,@msg,@pri) \r\n\r\nGO\r\n"},"api.addItemFav":{"code":"\r\nIF OBJECT_ID('api.addItemFav') IS NOT NULL DROP PROCEDURE api.addItemFav;\r\nGO\r\nCREATE PROCEDURE [api].[addItemFav] @id INT,@AccountID INT   \r\nAS   \r\n\tIF NOT EXISTS(SELECT 0 FROM om.itemFav WHERE id=@id AND UserID=@AccountID)    \r\n\tBEGIN   \r\n\t\tDECLARE @GroupID INT,@HostID INT,@UserID INT,@SrcID INT   \r\n   \r\n\t\tSELECT @HostID=HostID FROM om.items WHERE id=@id   \r\n   \r\n\t\tINSERT om.itemFav(id,userID,fav,updateDt) VALUES(@id,@AccountID,1,GETUTCDATE())    \r\n   \r\n\t\tSELECT @HostID=HostID,@SrcID=SrcID FROM api.items WHERE id=@AccountID   \r\n\t\tSELECT @groupID=itemID FROM om.attributes WHERE id=@accountID AND fieldID=1228   \r\n   \r\n\t\tIF @GroupID IS NULL   \r\n\t\tBEGIN   \r\n\t\t\tSELECT @groupID=id FROM api.items WHERE classID=1103 AND hostID=@HostID AND name='Admin'   \r\n\t\t\tUPDATE om.items SET KeyID=@GroupID WHERE id=@AccountID   \r\n\t\t\tEXEC mail.addItem @AccountID=@AccountID,@HostID=@HostID,@name='mailHostAccountAdd'   \r\n\t\t\tIF NOT EXISTS(SELECT 0 FROM auth.users WHERE id=@SrcID)   \r\n\t\t\tBEGIN   \r\n\t\t\t\tINSERT auth.users(id) VALUES(@srcID)   \r\n\t\t\t\tEXEC mail.addItem @AccountID=@AccountID,@HostID=@HostID,@name='mailAliconnectAccountAdd'   \r\n\t\t\tEND   \r\n\t\tEND   \r\n\t\tEXEC mail.addItem @AccountID=@AccountID,@HostID=@HostID,@ItemID=@id,@name='mailItemAccountAdd'   \r\n\tEND   \r\n\tELSE    \r\n\t\tUPDATE om.itemFav SET updateDt=GETUTCDATE() WHERE id=@id AND UserID=@AccountID \r\n\r\nGO\r\n"},"api.setAccount":{"code":"\r\nIF OBJECT_ID('api.setAccount') IS NOT NULL DROP PROCEDURE api.setAccount;\r\nGO\r\nCREATE PROCEDURE [api].[setAccount] @email VARCHAR(500), @userName VARCHAR(500)=NULL, @hostName VARCHAR(50), @groupName VARCHAR(50),@accountName VARCHAR(50)=NULL, @password VARCHAR(50)=NULL, @hostId INT=NULL OUTPUT, @userId INT=NULL OUTPUT, @accountId INT=NULL OUTPUT, @groupId INT=NULL OUTPUT,@select BIT=NULL,@pwOk BIT=NULL,@verified BIT=NULL , @userUid VARCHAR(50)=NULL  \r\nAS   \r\n\tDECLARE @emailAid INT   \r\n\tSET IDENTITY_INSERT om.items ON; \r\n \r\n\tIF NOT EXISTS(SELECT 0 FROM om.items WHERE id=1000) INSERT om.items(id,classID,masterID,srcID,hostID,name)VALUES(1000,0,0,0,0,'Account')   \r\n\tIF NOT EXISTS(SELECT 0 FROM om.items WHERE id=1002) INSERT om.items(id,classID,masterID,srcID,hostID,name)VALUES(1002,0,0,0,0,'Company')   \r\n\tIF NOT EXISTS(SELECT 0 FROM om.items WHERE id=1003) INSERT om.items(id,classID,masterID,srcID,hostID,name)VALUES(1003,0,0,0,0,'Group')   \r\n\tIF NOT EXISTS(SELECT 0 FROM om.items WHERE id=1004) INSERT om.items(id,classID,masterID,srcID,hostID,name)VALUES(1004,0,0,0,0,'Contact')   \r\n\tIF @userId IS NOT NULL AND NOT EXISTS(SELECT 0 FROM om.items WHERE id=@userId) INSERT om.items(id,classID,uid)VALUES(@userId,1000,@userUID) \r\n\tSET IDENTITY_INSERT om.items OFF;   \r\n \r\n\tIF NOT EXISTS(SELECT 0 FROM om.attributeName WHERE id=30)   \r\n\tBEGIN   \r\n\t\tSET IdENTITY_INSERT om.attributeName ON   \r\n\t\tINSERT om.attributeName(id,name)VALUES(30,'Email')   \r\n\t\tSET IdENTITY_INSERT om.attributeName OFF   \r\n\tEND   \r\n\tIF NOT EXISTS(SELECT 0 FROM om.attributeName WHERE id=3)   \r\n\tBEGIN   \r\n\t\tSET IdENTITY_INSERT om.attributeName ON   \r\n\t\tINSERT om.attributeName(id,name)VALUES(3,'groupId')   \r\n\t\tSET IdENTITY_INSERT om.attributeName OFF   \r\n\tEND   \r\n\tSET @userName=ISNULL(@userName,@email)   \r\n\tEXEC api.getAccount @email=@email, @hostName=@hostName, @groupName=@groupName, @password=@password, @hostId=@hostId OUTPUT, @userId=@userId OUTPUT, @accountId=@accountId OUTPUT, @groupId=@groupId OUTPUT,@pwOk=@pwOk OUTPUT   \r\n\tEXEC api.getItem @id=@hostId OUTPUT,@hostId=1,@title=@hostName,@keyname=@hostName,@classId=1002   \r\n\tEXEC api.getItem @id=@userId OUTPUT,@hostId=@hostId,@title=@userName,@classId=1000   \r\n\tEXEC api.getItem @id=@groupId OUTPUT,@hostId=@hostId,@title=@groupName,@classId=1003   \r\n\tEXEC api.getItem @id=@accountId OUTPUT,@hostId=@hostId,@title=@userName,@classId=1004   \r\n\tIF NOT EXISTS(SELECT 0 FROM auth.users WHERE id=@userId) INSERT auth.users(id)VALUES(@userId)   \r\n\tIF EXISTS(SELECT 0 FROM om.attributes WHERE fieldId=30 AND value=@email)   \r\n\t\tUPDATE om.attributes SET id=@userId,userId=@userId WHERE fieldId=30 AND value=@email   \r\n\tELSE    \r\n\t\tEXEC api.setAttribute @id=@userId,@fieldId=30,@value=@email   \r\n\tEXEC api.setAttribute @id=@accountId,@fieldId=3,@itemId=@groupId,@classId=1003   \r\n\tEXEC api.setAttribute @id=@accountId,@name='Gebruiker',@itemId=@userId,@classId=1000,@idname='toId'   \r\n\tUPDATE om.items SET title=@userName,name=@userName WHERE id IN(@userId,@accountId)   \r\n\tUPDATE om.items SET title=@groupName WHERE id=@groupId   \r\n\tIF @password IS NOT NULL UPDATE auth.users SET password=pwdencrypt(@password) WHERE id=@userID   \r\n\tIF @select IS NOT NULL SELECT @email email,@hostName hostName, @groupName groupName, @userId userId, @hostId hostId, @accountId accountId, @groupId groupId \r\n \r\n\r\nGO\r\n"},"auth.getHostUser":{"code":"\r\nIF OBJECT_ID('auth.getHostUser') IS NOT NULL DROP PROCEDURE auth.getHostUser;\r\nGO\r\nCREATE PROCEDURE [auth].[getHostUser] @hostID INT=NULL,@userID INT=NULL,@deviceID INT=NULL,@accountID INT=NULL,@groupID INT=NULL   \r\nAS   \r\n\tSET NOCOUNT ON  \r\n\tIF @deviceID IS NOT NULL AND @userID IS NOT NULL EXEC api.setAttribute @id=@deviceID,@itemID=@userID,@name='User',@max=0  --AND NOT EXISTS(SELECT 0 FROM om.attributes WHERE id=@deviceID AND itemID=@userID) INSERT om.attributes(id,itemID)VALUES(@deviceID,@userID)  \r\n\tIF @deviceID IS NOT NULL AND @hostID IS NOT NULL EXEC api.setAttribute @id=@deviceID,@itemID=@hostID,@name='Host',@max=0  --AND NOT EXISTS(SELECT 0 FROM om.attributes WHERE id=@deviceID AND itemID=@hostID) INSERT om.attributes(id,itemID)VALUES(@deviceID,@hostID)  \r\n\t  \r\n\tSET NOCOUNT OFF   \r\n    SELECT TOP 1 CONVERT(TEXT,H.itemConfig) AS host,H.keyname AS name , ISNULL(S.files,H.files)files,S.id siteID   \r\n\tFROM api.items H    \r\n\tLEFT OUTER JOIN api.items S ON S.masterID=H.id AND S.classID=1091 AND S.startDT IS NOT NULL   \r\n\tWHERE H.id=@hostID   \r\n   \r\n\tEXEC auth.setHostUser @hostID=@hostID,@userID=@userID,@deviceID=@deviceID,@accountID=@accountID,@groupID=@groupID  \r\n   \r\n\t--SELECT U.name,G.name AS groupName, U.id,A.id AS accountID,G.id AS groupID--,A.hostID   \r\n\t--FROM api.items U   \r\n\t--LEFT OUTER JOIN api.items A ON A.toID=U.id AND A.hostID=@hostID AND A.classID=1004   \r\n\t--INNER JOIN om.attributes F ON F.id=A.id AND F.classID=1103 AND F.itemID IS NOT NULL   \r\n\t--INNER JOIN api.items G ON G.id=F.itemID    \r\n\t----SELECT I.name,I.id,F.itemID groupID,F.value AS groupName FROM api.items I INNER JOIN om.attributes F ON I.hostID=@hostID AND I.toID=@userID AND I.classID=1004 AND I.id=F.id AND F.classID=1103 AND F.itemID IS NOT NULL   \r\n\t--WHERE U.id=@userID   \r\n   \r\n\t--RETURN   \r\n   \r\n   \r\n\t--SELECT id,lower(C.class)class,CONVERT(TEXT,ISNULL(C.config,'{}')) config FROM om.class C WHERE C.classHostID IN(1,@hostID) \r\n\r\nGO\r\n"}},"TRIGGER":{"om.attributesUpdate":{"code":"\r\nIF OBJECT_ID('om.attributesUpdate') IS NOT NULL DROP TRIGGER om.attributesUpdate;\r\nGO\r\nCREATE TRIGGER [om].[attributesUpdate] ON [om].[attributes] AFTER UPDATE   \r\nAS   \r\n\tSET NOCOUNT ON;   \r\n\treturn  \r\n\tIF UPDATE(value)OR UPDATE(itemID) INSERT aimhis.om.attributes(aid,value,itemID,modifiedById) SELECT aid,value,itemID,modUserID FROM inserted \r\n\r\nGO\r\n"},"om.itemsDelete":{"code":"\r\nIF OBJECT_ID('om.itemsDelete') IS NOT NULL DROP TRIGGER om.itemsDelete;\r\nGO\r\nCREATE TRIGGER [om].[itemsDelete] ON [om].[items] AFTER DELETE   \r\nAS   \r\n\tSET NOCOUNT ON;   \r\n\tDELETE om.attributes from deleted D WHERE om.attributes.id = D.id   \r\n\tDELETE om.attributes from deleted D WHERE om.attributes.id = D.masterId AND om.attributes.fieldid = D.classid AND om.attributes.valueid = D.id   \r\n\tUPDATE om.items SET om.items.hasChildren = om.items.hasChildren-1    \r\n\tFROM deleted I   \r\n\tWHERE om.items.id = I.masterId   \r\n   \r\n\tINSERT freeid(id) SELECT id FROM deleted   \r\n   \r\n\tUPDATE om.attributes SET deletedDt=GETDATE()    \r\n\tFROM deleted I WHERE om.attributes.itemId=I.id \r\n\r\nGO\r\n"},"om.itemsInsert":{"code":"\r\nIF OBJECT_ID('om.itemsInsert') IS NOT NULL DROP TRIGGER om.itemsInsert;\r\nGO\r\nCREATE TRIGGER [om].[itemsInsert] ON [om].[items] AFTER INSERT   \r\nAS   \r\n\tSET NOCOUNT ON;   \r\n\t--INSERT auth.users(id) SELECT id FROM inserted WHERE classId=1000   \r\n\tINSERT auth.host(id,name) SELECT id,name FROM inserted WHERE classId=1001   \r\n\tINSERT auth.hostDomain(id,domain) SELECT id,name+'.aliconnect.nl' FROM inserted WHERE classId=1001 \r\n\r\nGO\r\n"},"om.itemsUpdate":{"code":"\r\nIF OBJECT_ID('om.itemsUpdate') IS NOT NULL DROP TRIGGER om.itemsUpdate;\r\nGO\r\nCREATE TRIGGER [om].[itemsUpdate] ON [om].[items] AFTER UPDATE,INSERT   \r\nAS   \r\n\tSET NOCOUNT ON;   \r\n\tIF UPDATE(hasChildren) AND EXISTS(SELECT 0 FROM om.items WHERE detailId IN(SELECT id FROM inserted))   \r\n\t\tUPDATE om.items SET om.items.hasChildren=I.hasChildren   \r\n\t\tFROM inserted I    \r\n\t\tWHERE om.items.detailId = I.id   \r\n\tIF UPDATE(clone)    \r\n\tBEGIN   \r\n\t\tUPDATE OM.items SET deletedDT=GETUTCDATE() WHERE id IN( \r\n\t\t\tSELECT CC.id--,CC.masterId,CC.inheritedId--,CC.inheritedId,C.id \r\n\t\t\tFROM inserted I   \r\n\t\t\tINNER JOIN api.items CC ON CC.masterId=I.id AND CC.inheritedId IS NOT NULL  \r\n\t\t\tLEFT OUTER JOIN api.items C ON C.masterID=ISNULL(I.inheritedID,I.srcID) AND C.masterId IS NOT NULL    \r\n\t\t\t\tAND C.masterId<>ISNULL(C.srcID,0) \r\n\t\t\t\tAND ISNULL(C.selected,1)=1 \r\n\t\t\t\tAND ISNULL(I.selected,1)=1 \r\n\t\t\t\tAND CC.inheritedId=C.id \r\n\t\t\tWHERE I.clone=1 AND ISNULL(I.selected,1)=1 AND C.id IS NULL \r\n\t\t) \r\n \r\n\t\tDECLARE @T TABLE(masterID INT,id INT,selected BIT,inheritedId INT,idx INT)   \r\n\t\tINSERT @T \r\n\t\tSELECT I.id masterID,CC.id id,C.selected,C.id inheritedId,C.idx   \r\n\t\tFROM inserted I   \r\n\t\tINNER JOIN api.items C ON C.masterID=ISNULL(I.inheritedID,I.srcID) AND C.masterId IS NOT NULL    \r\n\t\t\t--AND I.srcId IS NOT NULL    \r\n\t\t\tAND C.masterId<>ISNULL(C.srcID,0)    \r\n\t\t\tAND ISNULL(C.selected,1)=1    \r\n\t\t\tAND ISNULL(I.selected,1)=1    \r\n\t\t\t--AND I.clone=1 AND ISNULL(I.selected,1)=1 --OR I.clone=1)   \r\n\t\tLEFT OUTER JOIN api.items CC ON CC.masterId=I.id AND CC.inheritedId IS NOT NULL AND CC.inheritedId=C.id   \r\n\t\tWHERE I.clone=1 AND ISNULL(I.selected,1)=1   \r\n \r\n\t\t--Maak kinderen aan die nog niet bestaan   \r\n\t\tIF EXISTS(SELECT 0 FROM @T WHERE id IS NULL) --AND ISNULL(C.selected,1)=1)   \r\n\t\t\tINSERT om.items(inheritedId,masterId,hostId,userId,classId,srcId,idx,selected,groupname,files,state,categorie,startDt,endDt,finishDt,filterfields,inherit)   \r\n\t\t\tSELECT C.id,T.masterID,C.hostId,C.userId,C.classId,C.srcID,C.idx,T.selected,C.groupname,C.files,C.state,C.categorie,C.startDt,C.endDt,C.finishDt,C.filterfields,1   \r\n\t\t\tFROM @T T   \r\n\t\t\tINNER JOIN api.items C ON C.id=T.inheritedId AND T.id IS NULL   \r\n   \r\n\t\t--Update kinderen    \r\n\t\tIF EXISTS(SELECT 0 FROM inserted I WHERE id IN(SELECT masterID FROM om.items WHERE deletedDT IS NULL AND ISNULL(inheritedID,srcID) IS NOT NULL AND ISNULL(om.items.selected,1)=1))   \r\n\t\tUPDATE om.items SET clone=1,idx=C.idx,title=ISNULL(C.title,'NO TITLE'),summary=C.summary,subject=C.subject,tag=C.tag,hasChildren=C.hasChildren,classID=C.classID,name=C.name   \r\n\t\t--,srcID=CASE WHEN inheritedID IS NOT NULL THEN C.srcID ELSE om.items.srcID END   \r\n\t\tFROM(   \r\n\t\t\tSELECT C.id,CC.idx,CC.title,CC.subject,CC.summary,CC.tag,CC.srcID,CC.hasChildren,CC.classID,CC.name   \r\n\t\t\tFROM inserted I   \r\n\t\t\tINNER JOIN om.items C ON C.masterID=I.id AND C.deletedDT IS NULL AND ISNULL(C.selected,1)=1   \r\n\t\t\tINNER JOIN om.items CC ON CC.id=C.inheritedID   \r\n\t\t) C WHERE om.items.id = C.id   \r\n\tEND   \r\n\t--IF UPDATE(startDT)OR UPDATE(endDT)OR UPDATE(finishDT) INSERT aimhis.om.items(id,startDT,endDT,finishDT,modifiedById) SELECT id,startDT,endDT,finishDT,modifiedById FROM inserted \r\n\r\nGO\r\n"}},"VIEW":{"api.host":{"code":"\r\nIF OBJECT_ID('api.host') IS NOT NULL DROP VIEW api.host;\r\nGO\r\nCREATE VIEW [api].[host]   \r\nAS   \r\n\tSELECT P.* FROM( SELECT I.keyname,F.id,F.name,F.value FROM om.attributes F INNER JOIN om.items I ON I.deletedDT IS NULL AND I.classid=1002 AND I.keyname IS NOT NULL AND F.id = I.id )    \r\n\tX PIVOT(max(value) FOR name in(color)) P \r\n\r\nGO\r\n"},"api.listitems":{"code":"\r\nIF OBJECT_ID('api.listitems') IS NOT NULL DROP VIEW api.listitems;\r\nGO\r\nCREATE VIEW [api].[listitems]   \r\nAS   \r\n\tSELECT I.id,I.name,I.classID,I.state,I.obj,I.stock,I.discount,I.msrp,I.hasChildren,I.idx,I.modifiedDT   \r\n\tFROM om.items I WHERE I.deletedDT IS NULL \r\n\r\nGO\r\n"},"api.msg":{"code":"\r\nIF OBJECT_ID('api.msg') IS NOT NULL DROP VIEW api.msg;\r\nGO\r\nCREATE VIEW [api].[msg]   \r\nAS   \r\n\tSELECT    \r\n\t\tM.Subject   \r\n\t\t,MT.toID   \r\n\t\t,FU.name AS FromName   \r\n\t\t,M.CreatedDt   \r\n\t\t,SendDT   \r\n\t\t,ReadDt   \r\n\t\t,NotifyDt   \r\n\t\t,M.itemId   \r\n\t\t,M.msg   \r\n\t\t,M.hostID   \r\n\t\t,M.pri   \r\n\t\t,M.aid   \r\n\tFROM    \r\n\t\tom.msg M    \r\n\t\tINNER JOIN om.msgTo MT ON MT.msgaid = M.aid    \r\n\t\tINNER JOIN auth.users FU ON FU.id = M.fromID \r\n\r\nGO\r\n"},"api.Users":{"code":"\r\nIF OBJECT_ID('api.Users') IS NOT NULL DROP VIEW api.Users;\r\nGO\r\nCREATE VIEW [api].[Users]   \r\nAS   \r\n\t-- wordt gebruikt in: Beheer applicatie   \r\n\tSELECT I.id,I.name,U.password    \r\n\tFROM om.items I   \r\n\tINNER JOIN auth.users U ON U.id = I.id AND I.classid=1000 AND I.deletedDT IS NULL \r\n\r\nGO\r\n"},"auth.accountId":{"code":"\r\nIF OBJECT_ID('auth.accountId') IS NOT NULL DROP VIEW auth.accountId;\r\nGO\r\nCREATE VIEW [auth].[accountId]   \r\nAS   \r\n\tSELECT I.ToID AS UserID,F.id AS AccountID,F.HostID,F.ItemID AS GroupID    \r\n\tFROM om.items I   \r\n\t\tINNER JOIN om.attributes F ON I.classID=1004 AND I.id=F.id AND F.classID=1103 AND F.itemID IS NOT NULL \r\n\r\nGO\r\n"},"auth.email":{"code":"\r\nIF OBJECT_ID('auth.email') IS NOT NULL DROP VIEW auth.email;\r\nGO\r\nCREATE VIEW [auth].[email]   \r\nAS  \r\nSELECT aid,id,CONVERT(VARCHAR(250),value) email,userID,CASE WHEN userID=id THEN modDT ELSE NULL END AS verifiedDt FROM om.attributes WHERE fieldID=30 \r\n\r\nGO\r\n"},"auth.hostMailserver":{"code":"\r\nIF OBJECT_ID('auth.hostMailserver') IS NOT NULL DROP VIEW auth.hostMailserver;\r\nGO\r\nCREATE VIEW [auth].[hostMailserver]   \r\nAS   \r\n\tSELECT   \r\n\t\tH.id hostID   \r\n\t\t,D.Domain   \r\n\t\t,D.aid AS domainId   \r\n\t\t,S.SMTPHost   \r\n\t\t,SMTPSecure   \r\n\t\t,S.SMTPPort AS Port   \r\n\t\t,username+'@'+A.host AS Username   \r\n\t\t,A.Password   \r\n\t\t,H.email ReplyToEmail   \r\n\t\t,H.emailName ReplyToName   \r\n\t\t,H.Basecolor   \r\n\t\t,H.name AS Hostname   \r\n\tFROM   \r\n\t\tauth.hostDomain D   \r\n\t\tINNER JOIN auth.host H ON H.id = D.id    \r\n\t\tINNER JOIN auth.mailAccount A ON A.aid = H.mailAccountAid   \r\n\t\tINNER JOIN auth.mailServer S ON S.host = A.host \r\n\r\nGO\r\n"},"om.class":{"code":"\r\nIF OBJECT_ID('om.class') IS NOT NULL DROP VIEW om.class;\r\nGO\r\nCREATE VIEW [om].[class] \r\nAS \r\nSELECT id,hostID,srcID,masterID,name,name class,config  \r\nFROM om.items WHERE srcID=masterID AND srcID=0 \r\n \r\n\r\nGO\r\n"},"om.field":{"code":"\r\nIF OBJECT_ID('om.field') IS NOT NULL DROP VIEW om.field;\r\nGO\r\nCREATE VIEW [om].[field] AS  \r\nSELECT * FROM om.attributeName \r\n\r\nGO\r\n"},"om.fields":{"code":"\r\nIF OBJECT_ID('om.fields') IS NOT NULL DROP VIEW om.fields;\r\nGO\r\nCREATE VIEW [om].[fields] AS SELECT * FROM om.attributes GO \r\n\r\nGO\r\n"},"omv.fields":{"code":"\r\nIF OBJECT_ID('omv.fields') IS NOT NULL DROP VIEW omv.fields;\r\nGO\r\nCREATE VIEW [omv].[fields]    \r\nAS   \r\n\tSELECT  I.id,I.idx,I.classID,I.fromID,I.toID,I.srcID,I.hostID,I.startDT,I.endDT,I.finishDT,I.state,I.name AS itemname,I.subject,IV.aid,IV.name,IV.value,IV.itemId,IV.hostID AS fieldHostId   \r\n\tFROM om.items I   \r\n\t\tINNER JOIN om.attributes IV ON IV.id = I.id --AND I.deletedDT IS NULL \r\n\r\nGO\r\n"},"api.items":{"code":"\r\nIF OBJECT_ID('api.items') IS NOT NULL DROP VIEW api.items;\r\nGO\r\nCREATE VIEW [api].[items]     \r\nAS    \r\n\tSELECT --*    \r\n\t\tI.id PrimaryKey,    \r\n\t\tI.ParentFolderId,  \r\n\t\tI.SourceObjectId,  \r\n\t\tI.idx ChildIndex,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.createdDT AS DATETIMEOFFSET),127) CreatedDateTime,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.modifiedDT AS DATETIMEOFFSET),127) LastModifiedDateTime,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.startDT AS DATETIMEOFFSET),127) StartDateTime,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.endDT AS DATETIMEOFFSET),127) EndDateTime,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.finishDT AS DATETIMEOFFSET),127) FinishDateTime,    \r\n\t\tI.id,    \r\n\t\tLOWER(CONVERT(VARCHAR(200),I.uid))uid,    \r\n\t\tLOWER(CONVERT(VARCHAR(200),I.secret))secret,    \r\n\t\tI.detailID,    \r\n\t\tI.masterID,    \r\n\t\tI.idx,    \r\n\t\tISNULL(I.detailID,I.id)itemID,    \r\n\t\tD.hostID,    \r\n\t\tD.nr,    \r\n\t\tD.sourceID,    \r\n\t\tD.keyID,    \r\n\t\tD.srcID,    \r\n\t\tD.inherit,    \r\n\t\tI.inheritedID,    \r\n\t\tD.fromID,    \r\n\t\tD.toID,    \r\n\t\tD.ownerID,    \r\n\t\tD.userID,    \r\n\t\tD.classID,    \r\n\t\tD.Tag,    \r\n\t\tISNULL(D.tagName,om.tagname(I.id)) tagname,    \r\n\t\tD.keyname,    \r\n\t\tCONVERT(VARCHAR(50),D.keyname) UniqueKey,    \r\n\t\tD.name,    \r\n\t\tD.title title,    \r\n\t\tD.description,    \r\n\t\tCONVERT(TEXT,D.subject) subject,    \r\n\t\tCONVERT(TEXT,D.summary) summary,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.createdDT AS DATETIMEOFFSET),127) createdDT,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.modifiedDT AS DATETIMEOFFSET),127) modifiedDT,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.startDT AS DATETIMEOFFSET),127) startDT,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.endDT AS DATETIMEOFFSET),127) endDT,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.finishDT AS DATETIMEOFFSET),127) finishDT,    \r\n\t\tCONVERT(VARCHAR(50),CAST(D.indexDT AS DATETIMEOFFSET),127) indexDT,    \r\n\t\tD.www,    \r\n\t\tD.state,    \r\n\t\tD.categorie,    \r\n\t\tD.selected,    \r\n\t\tD.groupname,    \r\n\t\tD.files,    \r\n\t\tD.msgCnt,    \r\n\t\tD.hasChildren,    \r\n\t\tD.geolocatie,    \r\n\t\tD.geolocatie location,    \r\n\t\tD.createdByID,    \r\n\t\tD.modifiedByID,    \r\n\t\tD.cp,    \r\n\t\tD.discount,    \r\n\t\tD.msrp,    \r\n\t\tD.findtext,    \r\n\t\tD.obj,    \r\n\t\tD.stock,    \r\n\t\tD.readID,    \r\n\t\tD.writeID,    \r\n\t\tD.filterfields,    \r\n\t\tD.childClassNr,    \r\n\t\tD.ClassNr,    \r\n\t\tD.activeCnt,    \r\n\t\tCONVERT(TEXT,D.config) itemConfig,    \r\n\t\tD.value    \r\n\tFROM om.items I    \r\n\tINNER JOIN om.items D ON D.id=ISNULL(I.detailID,I.id) AND I.deletedDT IS NULL AND D.deletedDT IS NULL --AND D.classID IS NOT NULL--> 0 --AND I.classID > 0 \r\n\r\nGO\r\n"},"api.Account":{"code":"\r\nIF OBJECT_ID('api.Account') IS NOT NULL DROP VIEW api.Account;\r\nGO\r\nCREATE VIEW [api].[Account]  \r\nAS  \r\n\tSELECT I.id,I.toID userID,I.hostID,IG.id AS groupID,I.title,IG.title AS groupTitle,I.startDT,I.endDT,AM.value as Email  \r\n\tFROM api.items I   \r\n\t\tINNER JOIN om.attributes A ON A.id = I.id AND A.fieldID=1228 AND I.classID=1004   \r\n\t\tINNER JOIN api.items IG ON IG.id = A.itemID  \r\n\t\tLEFT OUTER JOIN om.attributes AM ON AM.id = I.id AND AM.fieldID=931 \r\n\r\nGO\r\n"},"api.attributes":{"code":"\r\nIF OBJECT_ID('api.attributes') IS NOT NULL DROP VIEW api.attributes;\r\nGO\r\nCREATE VIEW [api].[attributes]   \r\nAS   \r\n\tSELECT F.name,ISNULL(ISNULL(CONVERT(TEXT,I.title),SI.title),A.value)value,A.id,A.hostID,A.createdDT,A.modDT AS modifiedDT,A.modUserID AS modifiedByID,A.userID,A.aid,A.fieldID,A.itemID,A.classID   \r\n\tFROM om.attributes A   \r\n\tINNER JOIN om.field F ON F.id=A.fieldID  \r\n\tLEFT OUTER JOIN api.items I ON I.id=A.itemID  \r\n\tLEFT OUTER JOIN api.items SI ON SI.id=ISNULL(I.detailID,I.srcID) \r\n\r\nGO\r\n"},"api.citems":{"code":"\r\nIF OBJECT_ID('api.citems') IS NOT NULL DROP VIEW api.citems;\r\nGO\r\nCREATE VIEW [api].[citems]     \r\nAS    \r\n\tSELECT    \r\n\t\tI.*,    \r\n\t\tC.name class,    \r\n\t\tC.name AS [schema],    \r\n\t\tC.name ClassName,    \r\n\t\t--CONVERT(TEXT,C.config) config,    \r\n\t\tISNULL(S.title,S.name) typical    \r\n\tFROM api.items I  \r\n\tLEFT OUTER JOIN om.items C ON C.id=I.classID    \r\n\tLEFT OUTER JOIN api.items S ON S.id=I.srcID  \r\n\t--LEFT OUTER JOIN api.items M ON M.id=I.masterID \r\n\r\nGO\r\n"},"api.item":{"code":"\r\nIF OBJECT_ID('api.item') IS NOT NULL DROP VIEW api.item;\r\nGO\r\nCREATE VIEW [api].[item]    \r\nAS   \r\n\tSELECT * FROM api.items   \r\n\r\nGO\r\n"},"api.itemdetails":{"code":"\r\nIF OBJECT_ID('api.itemdetails') IS NOT NULL DROP VIEW api.itemdetails;\r\nGO\r\nCREATE VIEW [api].[itemdetails]   \r\nAS    \r\n\tSELECT F.itemId fieldmasterID,I.*    \r\n\tFROM om.attributes F    \r\n\tINNER JOIN api.items I ON F.typeid=11 AND I.id=F.id \r\n\r\nGO\r\n"},"auth.account":{"code":"\r\nIF OBJECT_ID('auth.account') IS NOT NULL DROP VIEW auth.account;\r\nGO\r\nCREATE VIEW [auth].[account]   \r\nAS   \r\n\tSELECT I.name,I.subject,I.summary,I.FromID AS CompanyID,I.ToID AS UserID,I.id AS AccountID,I.HostID,F.ItemID AS GroupID,E.value AS email    \r\n\tFROM api.items I   \r\n\t\tINNER JOIN om.attributes F ON I.id=F.id AND F.classID=1103 AND F.itemID IS NOT NULL    \r\n\t\tINNER JOIN om.attributes E ON I.id=E.id AND E.fieldID=931   \r\n\tWHERE I.classID=1004 \r\n\r\nGO\r\n"},"auth.useremail":{"code":"\r\nIF OBJECT_ID('auth.useremail') IS NOT NULL DROP VIEW auth.useremail;\r\nGO\r\nCREATE VIEW [auth].[useremail]   \r\nAS   \r\n\tselect   \r\n\t\tLC.hostID,U.id AS userID,ACFE.value AS email,AC.name   \r\n\tfrom   \r\n\t\tapi.items LC   \r\n\t\tINNER JOIN api.items AC ON    \r\n\t\t\tAC.id=LC.srcID AND LC.classID=1100 AND AC.classID=1004   \r\n\t\tINNER JOIN auth.users U ON    \r\n\t\t\tU.id=AC.toID   \r\n\t\tINNER JOIN om.attributes ACFE ON   \r\n\t\t\tACFE.id=AC.id AND ACFE.name='BusinessEmail' \r\n\r\nGO\r\n"},"cfg.msg":{"code":"\r\nIF OBJECT_ID('cfg.msg') IS NOT NULL DROP VIEW cfg.msg;\r\nGO\r\nCREATE VIEW [cfg].[msg] AS   \r\n\tSELECT I.keyname name,I.name AS title,I.subject,I.summary,P.msg,P.errmsg,P.mailmsg   \r\n\tFROM(SELECT id,name,value FROM om.attributes WHERE fieldID IN(730,1429,1437))x pivot(max(value)for name in(keyname,subject,summary,msg,errmsg,mailmsg)) P   \r\n\tINNER JOIN api.items I ON I.id=P.id AND I.classID=1010 \r\n\r\nGO\r\n"},"item.csp":{"code":"\r\nIF OBJECT_ID('item.csp') IS NOT NULL DROP VIEW item.csp;\r\nGO\r\nCREATE VIEW [item].[csp] AS    \r\n\t\t\tSELECT I.*,'csp'[schema],F.users,F.cspnummer,F.volgnummer,F.QuoteNr,F.WkIn,F.Deadline,F.startPE,F.Status,F.Customer,F.Site,F.Area,F.Machine,F.Layout,F.Project,F.System,F.Scope,F.Request,F.ProjectKlasse,F.PlannerBB,F.ProjectleiderPE,F.UrenGeschat,F.UrenWerkelijk,F.PEPDgereed,F.DescriptionME,F.DescriptionHW,F.DescriptionSW,F.DocFDS,F.DocDiagrams,F.DocTest,F.TestDescription,F.TestRequiredMachineParts,F.TestAssemblerRequired,F.TestFAT,F.Eng_me,F.Eng_hw,F.Eng_sw,F.Eng_pli,F.Materiaal,F.Aandacht,F.Uitgang,F.Risico,F.Fase,F.convManual,F.PartsManualMatri,F.PartsManual,F.VervangenMatriBook,F.SpecialUserServiceManual,F.Elektro660,F.TrackFrame600,F.FarmPacker601,F.Transfer,F.Denester,F.Infeed,F.Accumulator,F.Mobane,F.MaxipackContiflow,F.Loader,F.PackingLane,F.FarmPackerM70M55,F.AutopackMr40,F.MR10,F.Traystacker,F.TestDatum,F.Testtijd,F.FAT,F.FATdatum,F.Monteur,F.Opmerkingen,F.Aanbeveling,F.Gereed    \r\n\t\t\tFROM api.items I    \r\n            LEFT OUTER JOIN(SELECT id fielditemid,name,value FROM om.attributes WHERE fieldID IN(1223,1428,1006,606,998,1457,1456,1458,1273,718,1455,959,1280,793,1174,618,1272,1241,639,702,621,1295,1027,751,573,689,1461,683,1026,1207,1418)) X PIVOT(MAX(value)FOR name IN(users,cspnummer,volgnummer,QuoteNr,WkIn,Deadline,startPE,Status,Customer,Site,Area,Machine,Layout,Project,System,Scope,Request,ProjectKlasse,PlannerBB,ProjectleiderPE,UrenGeschat,UrenWerkelijk,PEPDgereed,DescriptionME,DescriptionHW,DescriptionSW,DocFDS,DocDiagrams,DocTest,TestDescription,TestRequiredMachineParts,TestAssemblerRequired,TestFAT,Eng_me,Eng_hw,Eng_sw,Eng_pli,Materiaal,Aandacht,Uitgang,Risico,Fase,convManual,PartsManualMatri,PartsManual,VervangenMatriBook,SpecialUserServiceManual,Elektro660,TrackFrame600,FarmPacker601,Transfer,Denester,Infeed,Accumulator,Mobane,MaxipackContiflow,Loader,PackingLane,FarmPackerM70M55,AutopackMr40,MR10,Traystacker,TestDatum,Testtijd,FAT,FATdatum,Monteur,Opmerkingen,Aanbeveling,Gereed)) F ON I.id=F.fielditemid   \r\n            WHERE I.classID=2102 \r\n\r\nGO\r\n"},"item.task":{"code":"\r\nIF OBJECT_ID('item.task') IS NOT NULL DROP VIEW item.task;\r\nGO\r\nCREATE VIEW [item].[task] AS SELECT I.*,'task'[schema],F.users,F.prio,F.Master,F.Project,F.Vraagstelling,F.Uitwerking,F.Owner,F.Calc,F.Work,F.Voltooid FROM api.items I    \r\n            LEFT OUTER JOIN(SELECT id fielditemid,name,value FROM om.attributes WHERE fieldID IN(806,980,1406,1193,639,1209,940,1318,1454)) X PIVOT(MAX(value)FOR name IN(users,prio,Master,Project,Vraagstelling,Uitwerking,Owner,Calc,Work,Voltooid)) F ON I.id=F.fielditemid   \r\n            WHERE I.classID=1162 \r\n\r\nGO\r\n"},"om.itemSrc":{"code":"\r\nIF OBJECT_ID('om.itemSrc') IS NOT NULL DROP VIEW om.itemSrc;\r\nGO\r\nCREATE VIEW [om].[itemSrc]    \r\nAS   \r\nWITH P(level,id,srcID) AS(    \r\n\t\tSELECT 0,I.id,I.id   \r\n\t\tFROM api.items I    \r\n\t\t--WHERE I.srcID IS NOT NULL   \r\n\tUNION ALL   \r\n\t\tSELECT level+1,P.id,I.srcID   \r\n\t\tFROM api.items I    \r\n\t\tINNER JOIN P ON I.id=P.srcID AND level<10   \r\n\t)    \r\n\tSELECT * FROM P WHERE srcID IS NOT NULL \r\n\r\nGO\r\n"},"om.itemvisit":{"code":"\r\nIF OBJECT_ID('om.itemvisit') IS NOT NULL DROP VIEW om.itemvisit;\r\nGO\r\nCREATE VIEW [om].[itemvisit]   \r\nAS   \r\n\tSELECT I.id,I.name,I.findtext,I.keyname,I.classID,I.state,I.obj,I.idx,V.lastvisitDT,V.userID--,V.hostID   \r\n\tFROM om.itemuservisit V   \r\n\tINNER JOIN api.items I ON I.id=V.id \r\n\r\nGO\r\n"},"api.msgAll":{"code":"\r\nIF OBJECT_ID('api.msgAll') IS NOT NULL DROP VIEW api.msgAll;\r\nGO\r\nCREATE VIEW [api].[msgAll]   \r\nAS   \r\n\tSELECT M.name,CONVERT(TEXT,M.msg) as msg,CONVERT(TEXT,M.mailmsg) as mailmsg,CONVERT(TEXT,M.errmsg) as errmsg,S.*    \r\n\tFROM cfg.msg M    \r\n\tCROSS JOIN auth.hostMailserver S \r\n\r\nGO\r\n"}},"TABLES":{"auth.token":{"schema":"auth","name":"token","columns":{"id":{"type":"bigint"},"secret":{"type":"uniqueidentifier"}}},"auth.hostDomain":{"schema":"auth","name":"hostDomain","columns":{"aid":{"type":"int"},"domain":{"type":"varchar"},"id":{"type":"int"}}},"auth.host":{"schema":"auth","name":"host","columns":{"active":{"type":"bit"},"adres":{"type":"varchar"},"analytics":{"type":"varchar"},"backgroundcolor":{"type":"varchar"},"bannercolor":{"type":"varchar"},"bannerheight":{"type":"int"},"bannerimage":{"type":"varchar"},"bannerinnerimage":{"type":"varchar"},"baseColor":{"type":"varchar"},"colorBackground":{"type":"varchar"},"colorHover":{"type":"varchar"},"colorHyperlink":{"type":"varchar"},"colorTop":{"type":"varchar"},"companyId":{"type":"int"},"companyinfo":{"type":"varchar"},"companyname":{"type":"varchar"},"config":{"type":"varchar"},"configDb":{"type":"varchar"},"createdDt":{"type":"datetime"},"css":{"type":"text"},"debnr":{"type":"int"},"domain":{"type":"varchar"},"domainId":{"type":"int"},"email":{"type":"varchar"},"emailName":{"type":"varchar"},"factuurEmail":{"type":"varchar"},"favicon":{"type":"varchar"},"footerId":{"type":"int"},"iban":{"type":"varchar"},"id":{"type":"int"},"js":{"type":"varchar"},"logoimage":{"type":"varchar"},"mailAccountAid":{"type":"int"},"menuitems":{"type":"varchar"},"name":{"type":"varchar"},"nosite":{"type":"bit"},"ownerId":{"type":"int"},"pageId":{"type":"int"},"siteId":{"type":"int"},"sitesoftware":{"type":"varchar"},"style":{"type":"text"},"theme":{"type":"varchar"},"uid":{"type":"uniqueidentifier"}}},"auth.mailgroupEmail":{"schema":"auth","name":"mailgroupEmail","columns":{"dateEnd":{"type":"datetime"},"dateStart":{"type":"datetime"},"emailAid":{"type":"int"},"mailgroupAid":{"type":"int"}}},"auth.blacklist":{"schema":"auth","name":"blacklist","columns":{"ip":{"type":"varchar"}}},"auth.appprintqueue":{"schema":"auth","name":"appprintqueue","columns":{"aid":{"type":"int"},"createDt":{"type":"datetime"},"documentname":{"type":"varchar"},"href":{"type":"varchar"},"html":{"type":"text"},"printDt":{"type":"datetime"},"uid":{"type":"uniqueidentifier"}}},"auth.users":{"schema":"auth","name":"users","columns":{"aanhef":{"type":"varchar"},"aanhef2":{"type":"varchar"},"achternaam":{"type":"varchar"},"achternaam2":{"type":"varchar"},"afdeling":{"type":"varchar"},"bedrag":{"type":"int"},"bedrijf":{"type":"bit"},"beeindigen":{"type":"bit"},"bericht":{"type":"varchar"},"betaald":{"type":"datetime"},"betaling":{"type":"varchar"},"bic":{"type":"varchar"},"bsn":{"type":"sysname"},"btwnummer":{"type":"varchar"},"clientId":{"type":"int"},"code":{"type":"char"},"codeCreateDt":{"type":"datetime"},"createdById":{"type":"int"},"createdDt":{"type":"datetime"},"detailId":{"type":"int"},"displayName":{"type":"varchar"},"eindDt":{"type":"date"},"email":{"type":"varchar"},"emailId":{"type":"int"},"facebookId":{"type":"varchar"},"factuuraanhef":{"type":"varchar"},"factuuradres":{"type":"bit"},"factuurbedrijf":{"type":"varchar"},"factuurhuisnummer":{"type":"varchar"},"factuurland":{"type":"varchar"},"factuurplaats":{"type":"varchar"},"factuurpostcode":{"type":"varchar"},"factuurstraat":{"type":"varchar"},"factuurtoevoeging":{"type":"varchar"},"familyName":{"type":"varchar"},"fullName":{"type":"varchar"},"functie":{"type":"varchar"},"gebdatum":{"type":"date"},"gebdatum2":{"type":"date"},"givenName":{"type":"varchar"},"googleId":{"type":"varchar"},"googleToken":{"type":"varchar"},"hold":{"type":"bit"},"holdwhy":{"type":"varchar"},"host":{"type":"varchar"},"iban":{"type":"varchar"},"id":{"type":"int"},"imageUrl":{"type":"varchar"},"itemId":{"type":"int"},"keep_me_signed":{"type":"bit"},"kvk":{"type":"varchar"},"land":{"type":"varchar"},"lastLoginTime":{"type":"datetime"},"licaim":{"type":"varchar"},"licentie":{"type":"varchar"},"licweb":{"type":"varchar"},"linkedinId":{"type":"varchar"},"listId":{"type":"int"},"logboek":{"type":"text"},"loginCnt":{"type":"tinyint"},"menu":{"type":"varchar"},"mobiel":{"type":"varchar"},"mse_access_token":{"type":"text"},"mse_email":{"type":"varchar"},"mse_id_token":{"type":"text"},"mse_name":{"type":"varchar"},"mse_refresh_token":{"type":"text"},"name":{"type":"varchar"},"newpassword":{"type":"sysname"},"newpasswordUI":{"type":"uniqueidentifier"},"newphonenumber":{"type":"varchar"},"newremoteaddressId":{"type":"int"},"nieuwsbrief":{"type":"bit"},"nummer":{"type":"varchar"},"onlineDt":{"type":"datetime"},"organisatie":{"type":"varchar"},"password":{"type":"sysname"},"path":{"type":"varchar"},"phoneVerifiedDt":{"type":"datetime"},"phonenumber":{"type":"varchar"},"plaats":{"type":"varchar"},"postcode":{"type":"varchar"},"relatie":{"type":"varchar"},"sessionId":{"type":"varchar"},"settings":{"type":"text"},"shopId":{"type":"int"},"signinCode":{"type":"varchar"},"signinDt":{"type":"datetime"},"signinRequest":{"type":"datetime"},"signinUid":{"type":"uniqueidentifier"},"signoutDt":{"type":"datetime"},"source":{"type":"varchar"},"sourceId":{"type":"int"},"startDt":{"type":"date"},"straat":{"type":"varchar"},"suserid":{"type":"int"},"telefoon":{"type":"varchar"},"toelichting":{"type":"varchar"},"toevoeging":{"type":"varchar"},"tussenvoegsel":{"type":"varchar"},"tussenvoegsel2":{"type":"varchar"},"uid":{"type":"uniqueidentifier"},"userGroupId":{"type":"int"},"userLevel":{"type":"tinyint"},"userRef":{"type":"varchar"},"verified":{"type":"bit"},"vestiging":{"type":"varchar"},"voorletters":{"type":"varchar"},"voorletters2":{"type":"varchar"},"voornamen":{"type":"varchar"},"voornamen2":{"type":"varchar"}}},"auth.mailAccount":{"schema":"auth","name":"mailAccount","columns":{"aid":{"type":"int"},"host":{"type":"varchar"},"hostId":{"type":"int"},"name":{"type":"varchar"},"password":{"type":"varchar"},"replyTo":{"type":"varchar"},"username":{"type":"varchar"}}},"auth.app":{"schema":"auth","name":"app","columns":{"appName":{"type":"varchar"},"clientID":{"type":"varchar"},"hostID":{"type":"int"},"id":{"type":"int"},"isprinter":{"type":"bit"},"name":{"type":"varchar"},"secretUID":{"type":"uniqueidentifier"},"sql":{"type":"varchar"},"src":{"type":"varchar"},"srcphp":{"type":"varchar"},"uid":{"type":"uniqueidentifier"},"userID":{"type":"int"}}},"auth.mailServer":{"schema":"auth","name":"mailServer","columns":{"SMTPAuth":{"type":"varchar"},"SMTPHost":{"type":"varchar"},"SMTPPort":{"type":"int"},"SMTPSecure":{"type":"varchar"},"host":{"type":"varchar"}}},"auth.userMsg":{"schema":"auth","name":"userMsg","columns":{"aid":{"type":"int"},"createdByID":{"type":"int"},"createdDT":{"type":"datetime"},"itemID":{"type":"int"},"name":{"type":"varchar"},"readDT":{"type":"datetime"},"sendDT":{"type":"datetime"},"userID":{"type":"int"}}},"dbo.grid":{"schema":"dbo","name":"grid","columns":{"columns":{"type":"varbinary"},"gridname":{"type":"varchar"},"height":{"type":"int"},"width":{"type":"int"}}},"his.error":{"schema":"his","name":"error","columns":{"createDT":{"type":"datetime"},"data":{"type":"varchar"},"error":{"type":"varchar"},"errorNumber":{"type":"int"},"ts":{"type":"timestamp"}}},"his.event":{"schema":"his","name":"event","columns":{"Data":{"type":"varchar"},"ItemID":{"type":"int"},"LogDateTime":{"type":"datetime"},"LogID":{"type":"int"},"Method":{"type":"varchar"},"Path":{"type":"varchar"},"Step":{"type":"varchar"},"Tag":{"type":"varchar"},"ts":{"type":"timestamp"}}},"mail.queue":{"schema":"mail","name":"queue","columns":{"Subject":{"type":"varchar"},"aid":{"type":"int"},"createDt":{"type":"datetime"},"deviceId":{"type":"varchar"},"domainId":{"type":"int"},"fromId":{"type":"int"},"host":{"type":"varchar"},"hostId":{"type":"int"},"hostname":{"type":"varchar"},"itemId":{"type":"int"},"loadDt":{"type":"datetime"},"msg":{"type":"text"},"openDt":{"type":"datetime"},"pri":{"type":"tinyint"},"readDt":{"type":"datetime"},"reply":{"type":"varchar"},"sendDt":{"type":"datetime"},"sessionId":{"type":"varchar"},"succes":{"type":"bit"},"toId":{"type":"int"},"username":{"type":"varchar"},"viewDt":{"type":"datetime"}}},"mse.contact":{"schema":"mse","name":"contact","columns":{"ContactID":{"type":"int"},"DisplayName":{"type":"varchar"},"ID":{"type":"int"},"ItemID":{"type":"int"},"LastModifiedDateTime":{"type":"datetime"},"MseID":{"type":"varchar"},"UserID":{"type":"int"}}},"mse.contactsync":{"schema":"mse","name":"contactsync","columns":{"itemID":{"type":"int"}}},"om.msg":{"schema":"om","name":"msg","columns":{"aid":{"type":"int"},"createdDt":{"type":"datetime"},"domainId":{"type":"int"},"files":{"type":"text"},"fromId":{"type":"int"},"hostId":{"type":"int"},"itemId":{"type":"int"},"msg":{"type":"text"},"pri":{"type":"tinyint"},"subject":{"type":"varchar"}}},"om.itemFav":{"schema":"om","name":"itemFav","columns":{"createdById":{"type":"int"},"createdDt":{"type":"datetime"},"fav":{"type":"bit"},"id":{"type":"int"},"notifiedDt":{"type":"datetime"},"sendMsgDt":{"type":"datetime"},"updateDt":{"type":"datetime"},"userId":{"type":"int"}}},"om.msgTo":{"schema":"om","name":"msgTo","columns":{"aid":{"type":"int"},"msgAid":{"type":"int"},"notifyDt":{"type":"datetime"},"readDt":{"type":"datetime"},"sendDt":{"type":"datetime"},"toId":{"type":"int"}}},"om.freeid":{"schema":"om","name":"freeid","columns":{"id":{"type":"int"}}},"om.files":{"schema":"om","name":"files","columns":{"checkoutDt":{"type":"datetime"},"ext":{"type":"varchar"},"filename":{"type":"varchar"},"folder":{"type":"varchar"},"height":{"type":"int"},"host":{"type":"varchar"},"hostId":{"type":"int"},"id":{"type":"int"},"idx":{"type":"int"},"itemId":{"type":"int"},"lastModifiedDate":{"type":"varchar"},"name":{"type":"varchar"},"path":{"type":"varchar"},"pngSmall":{"type":"varbinary"},"root":{"type":"varchar"},"size":{"type":"int"},"src":{"type":"varchar"},"srcs":{"type":"varchar"},"type":{"type":"varchar"},"uid":{"type":"uniqueidentifier"},"userId":{"type":"int"},"username":{"type":"varchar"},"versionIdx":{"type":"int"},"width":{"type":"int"}}},"om.attributes":{"schema":"om","name":"attributes","columns":{"aid":{"type":"int"},"classId":{"type":"int"},"config":{"type":"text"},"configEdit":{"type":"text"},"configList":{"type":"text"},"configView":{"type":"text"},"createdDt":{"type":"datetime"},"deletedDt":{"type":"datetime"},"fieldId":{"type":"int"},"filter":{"type":"bit"},"find":{"type":"bit"},"groupID":{"type":"int"},"groupname":{"type":"varchar"},"hostId":{"type":"int"},"id":{"type":"int"},"idx":{"type":"int"},"inheritedID":{"type":"int"},"inname":{"type":"bit"},"itemId":{"type":"int"},"item_uid":{"type":"uniqueidentifier"},"itemfieldID":{"type":"tinyint"},"kop":{"type":"tinyint"},"kopId":{"type":"tinyint"},"label":{"type":"varchar"},"levelId":{"type":"tinyint"},"link":{"type":"bit"},"list":{"type":"bit"},"modDt":{"type":"datetime"},"modUserId":{"type":"int"},"name":{"type":"varchar"},"opties":{"type":"text"},"page":{"type":"bit"},"private":{"type":"bit"},"readID":{"type":"int"},"readonly":{"type":"bit"},"rights":{"type":"char"},"share":{"type":"tinyint"},"srcId":{"type":"int"},"type":{"type":"varchar"},"typeId":{"type":"tinyint"},"userId":{"type":"int"},"value":{"type":"varchar"},"valueId":{"type":"int"},"writeID":{"type":"int"},"www":{"type":"bit"}}},"om.hostip":{"schema":"om","name":"hostip","columns":{"HTTP_USER_AGENT":{"type":"varchar"},"areaCode":{"type":"varchar"},"asname":{"type":"varchar"},"city":{"type":"varchar"},"company":{"type":"varchar"},"continentCode":{"type":"varchar"},"country":{"type":"varchar"},"countryCode":{"type":"varchar"},"countryName":{"type":"varchar"},"currencyCode":{"type":"varchar"},"currencyConverter":{"type":"varchar"},"currencySymbol":{"type":"varchar"},"currencySymbol_UTF8":{"type":"varchar"},"dmaCode":{"type":"varchar"},"hostid":{"type":"int"},"ip":{"type":"varchar"},"isp":{"type":"varchar"},"lat":{"type":"varchar"},"latitude":{"type":"varchar"},"lon":{"type":"varchar"},"longitude":{"type":"varchar"},"org":{"type":"varchar"},"query":{"type":"varchar"},"region":{"type":"varchar"},"regionCode":{"type":"varchar"},"regionName":{"type":"varchar"},"status":{"type":"varchar"},"timezone":{"type":"varchar"},"zip":{"type":"varchar"}}},"om.items":{"schema":"om","name":"items","columns":{"Calc":{"type":"float"},"Duur":{"type":"int"},"Fixed":{"type":"bit"},"Inzet":{"type":"tinyint"},"OwnerId":{"type":"int"},"PlanEndDt":{"type":"datetime"},"PlanResourceId":{"type":"int"},"PlanStartDt":{"type":"datetime"},"Repeat":{"type":"bit"},"ResourceId":{"type":"int"},"ResourceTypeId":{"type":"int"},"Schedule":{"type":"text"},"ToGo":{"type":"float"},"Uren":{"type":"float"},"_inherit":{"type":"int"},"activeCnt":{"type":"int"},"adb":{"type":"varchar"},"artId":{"type":"int"},"avw":{"type":"varchar"},"categorie":{"type":"varchar"},"categories":{"type":"varchar"},"checked":{"type":"bit"},"childClassNr":{"type":"int"},"class":{"type":"varchar"},"classId":{"type":"int"},"classNr":{"type":"int"},"clone":{"type":"bit"},"commandId":{"type":"int"},"config":{"type":"varchar"},"configEdit":{"type":"text"},"configList":{"type":"text"},"configView":{"type":"text"},"cp":{"type":"float"},"createdById":{"type":"int"},"createdDt":{"type":"datetime"},"data":{"type":"varchar"},"deleted":{"type":"bit"},"deletedById":{"type":"int"},"deletedDate":{"type":"datetime"},"deletedDt":{"type":"datetime"},"derivedId":{"type":"int"},"description":{"type":"varchar"},"detailId":{"type":"int"},"disabled":{"type":"tinyint"},"discount":{"type":"float"},"durationMs":{"type":"int"},"endDt":{"type":"datetime"},"ext":{"type":"varchar"},"fieldname":{"type":"varchar"},"files":{"type":"text"},"filterfields":{"type":"varchar"},"filternames":{"type":"varchar"},"filtervalues":{"type":"varchar"},"findtext":{"type":"text"},"finishDT":{"type":"datetime"},"fromId":{"type":"int"},"geolocatie":{"type":"varchar"},"groupname":{"type":"varchar"},"hasChildren":{"type":"int"},"hostId":{"type":"int"},"icon":{"type":"varchar"},"id":{"type":"int"},"idx":{"type":"int"},"imageId":{"type":"int"},"imgUid":{"type":"varchar"},"indexDT":{"type":"datetime"},"inherit":{"type":"bit"},"inheritId":{"type":"int"},"inheritedId":{"type":"int"},"keyId":{"type":"int"},"keyName":{"type":"varchar"},"levelId":{"type":"int"},"linkId":{"type":"int"},"linkTypeId":{"type":"int"},"linkdata":{"type":"varchar"},"masterId":{"type":"int"},"menuitem":{"type":"bit"},"methodId":{"type":"int"},"modifiedById":{"type":"int"},"modifiedDt":{"type":"datetime"},"msgCnt":{"type":"int"},"msrp":{"type":"float"},"name":{"type":"varchar"},"nr":{"type":"int"},"obj":{"type":"text"},"parentFolderId":{"type":"varchar"},"parentId":{"type":"int"},"price":{"type":"float"},"pricenormal":{"type":"float"},"prodId":{"type":"int"},"quant":{"type":"int"},"readID":{"type":"int"},"refKey":{"type":"varchar"},"revertToInherited":{"type":"bit"},"scanDT":{"type":"datetime"},"secret":{"type":"uniqueidentifier"},"secret_uid":{"type":"uniqueidentifier"},"selected":{"type":"tinyint"},"server":{"type":"uniqueidentifier"},"sourceId":{"type":"int"},"sourceObjectId":{"type":"varchar"},"srcId":{"type":"int"},"startDt":{"type":"datetime"},"startedDt":{"type":"datetime"},"state":{"type":"varchar"},"stateId":{"type":"tinyint"},"states":{"type":"varchar"},"stock":{"type":"int"},"subCnt":{"type":"int"},"subject":{"type":"varchar"},"summary":{"type":"varchar"},"suserId":{"type":"int"},"tag":{"type":"varchar"},"tagName":{"type":"varchar"},"tblId":{"type":"int"},"tblKeyId":{"type":"int"},"title":{"type":"varchar"},"toGui":{"type":"bit"},"toId":{"type":"int"},"toPlc":{"type":"bit"},"ts":{"type":"timestamp"},"typeID":{"type":"int"},"typicalID":{"type":"int"},"uid":{"type":"uniqueidentifier"},"userId":{"type":"int"},"value":{"type":"varchar"},"values":{"type":"text"},"viewCnt":{"type":"int"},"workHours":{"type":"float"},"writeID":{"type":"int"},"www":{"type":"bit"}}},"om.word":{"schema":"om","name":"word","columns":{"id":{"type":"int"},"ln":{"type":"tinyint"},"word":{"type":"varchar"}}},"om.itemMsgUser":{"schema":"om","name":"itemMsgUser","columns":{"itemId":{"type":"int"},"itemMsgAid":{"type":"int"},"notifyDt":{"type":"datetime"},"readDt":{"type":"datetime"},"sendEmail":{"type":"bit"},"sendEmailDt":{"type":"datetime"},"subject":{"type":"varchar"},"userId":{"type":"int"}}},"om.itemUserVisit":{"schema":"om","name":"itemUserVisit","columns":{"cnt":{"type":"int"},"firstvisitDt":{"type":"datetime"},"hostID":{"type":"int"},"id":{"type":"int"},"lastvisitDt":{"type":"datetime"},"sentDt":{"type":"datetime"},"userId":{"type":"int"}}},"om.itemWord":{"schema":"om","name":"itemWord","columns":{"cnt":{"type":"tinyint"},"itemID":{"type":"int"},"weight":{"type":"tinyint"},"wordID":{"type":"int"}}},"om.wordSyn":{"schema":"om","name":"wordSyn","columns":{"synID":{"type":"int"},"wordID":{"type":"int"}}},"om.attributeName":{"schema":"om","name":"attributeName","columns":{"active":{"type":"bit"},"addtofilter":{"type":"bit"},"classId":{"type":"int"},"className":{"type":"varchar"},"data":{"type":"varchar"},"fieldClassId":{"type":"int"},"fieldname":{"type":"varchar"},"find":{"type":"bit"},"hostField":{"type":"bit"},"id":{"type":"int"},"idx":{"type":"int"},"isProperty":{"type":"bit"},"keyname":{"type":"varchar"},"label":{"type":"varchar"},"levelIdx":{"type":"tinyint"},"list":{"type":"bit"},"name":{"type":"varchar"},"options":{"type":"varchar"},"refname":{"type":"varchar"},"tablename":{"type":"varchar"},"tag":{"type":"varchar"},"type":{"type":"varchar"},"userField":{"type":"bit"},"valmax":{"type":"tinyint"},"valmin":{"type":"tinyint"},"width":{"type":"int"}}}}}